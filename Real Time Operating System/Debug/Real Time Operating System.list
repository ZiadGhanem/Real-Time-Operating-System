
Real Time Operating System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000e64  08000e64  00010e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000e6c  08000e6c  00010e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000e70  08000e70  00010e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08000e74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  7 .bss          000061a0  20000018  20000018  00020018  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  200061b8  200061b8  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   00003aa5  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000e60  00000000  00000000  00023aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000468  00000000  00000000  00024950  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000390  00000000  00000000  00024db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001bd6  00000000  00000000  00025148  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000018da  00000000  00000000  00026d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000285f8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000f80  00000000  00000000  00028674  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000e4c 	.word	0x08000e4c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08000e4c 	.word	0x08000e4c

080001ec <RTOS_SVC_Handler>:

 .text

 .type RTOS_SVC_Handler, %function
 RTOS_SVC_Handler:
 	TST LR, #4
 80001ec:	f01e 0f04 	tst.w	lr, #4
	ITE EQ
 80001f0:	bf0c      	ite	eq
	MRSEQ R0, MSP
 80001f2:	f3ef 8008 	mrseq	r0, MSP
	MRSNE R0, PSP
 80001f6:	f3ef 8009 	mrsne	r0, PSP
	LDR R1, =RTOS_SVC_excReturn
 80001fa:	4917      	ldr	r1, [pc, #92]	; (8000258 <RTOS_PendSV_Handler+0x4c>)
	STR LR, [R1]
 80001fc:	f8c1 e000 	str.w	lr, [r1]
	BL RTOS_SVC_Handler_Main
 8000200:	f000 f906 	bl	8000410 <RTOS_SVC_Handler_Main>
	LDR R1, =RTOS_SVC_excReturn
 8000204:	4914      	ldr	r1, [pc, #80]	; (8000258 <RTOS_PendSV_Handler+0x4c>)
	LDR LR, [R1]
 8000206:	f8d1 e000 	ldr.w	lr, [r1]
	BX LR
 800020a:	4770      	bx	lr

0800020c <RTOS_PendSV_Handler>:

 .type RTOS_PendSV_Handler, %function
 RTOS_PendSV_Handler:
 	/****************** Saving the current thread's context ********************/
 	/* Get PSP */
 	MRS R1, PSP
 800020c:	f3ef 8109 	mrs	r1, PSP
	/* Check if the currently running thread uses FPU
	 * If so so push FPU registers (s16 - s32)
	**/
	TST LR, 0x10	/* Test bit 5 in LR, if it is zero then FPU is enabled */
 8000210:	f01e 0f10 	tst.w	lr, #16
	IT	EQ	/* If zero flag is cleared */
 8000214:	bf08      	it	eq
	VSTMDBEQ R1!, {S16-S31}
 8000216:	ed21 8a10 	vstmdbeq	r1!, {s16-s31}
	/* Save EXC_RETURN into R2 */
	MOV	R2, LR
 800021a:	4672      	mov	r2, lr
	/* Save CONTROL into R3 */
	MRS R3, CONTROL
 800021c:	f3ef 8314 	mrs	r3, CONTROL
	/* Instruction Synchronization Barrier */
	ISB
 8000220:	f3bf 8f6f 	isb	sy
	/* Push {R2 -> R11} into the thread's stack*/
	STMDB R1!, {R2-R11}
 8000224:	e921 0ffc 	stmdb	r1!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
	/* Save the thread's stack pointer */
	BL RTOS_threadGetRunning
 8000228:	f000 fa96 	bl	8000758 <RTOS_threadGetRunning>
	STR R1, [R0]
 800022c:	6001      	str	r1, [r0, #0]

	/****************** Restoring the next thread's context ********************/
 	/* Get the next thread */
 	BL RTOS_threadSwitch
 800022e:	f000 fa9f 	bl	8000770 <RTOS_threadSwitch>
 	/* Set the process stack pointer to the thread's stack */
 	BL RTOS_threadGetRunning
 8000232:	f000 fa91 	bl	8000758 <RTOS_threadGetRunning>
 	LDR R1, [R0]
 8000236:	6801      	ldr	r1, [r0, #0]
 	/* POP {R2 -> R11} from the thread's stack*/
 	LDMIA R1!, {R2-R11}
 8000238:	e8b1 0ffc 	ldmia.w	r1!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 	/* Move R3 into CONTROL */
 	MSR CONTROL, R3
 800023c:	f383 8814 	msr	CONTROL, r3
 	/* Instruction Synchronization Barrier */
 	ISB
 8000240:	f3bf 8f6f 	isb	sy
 	/* MOVE R2 into Link Register */
 	MOV LR, R2
 8000244:	4696      	mov	lr, r2
 	/* Check if the currently running thread uses FPU
	 * If so so pop FPU registers (s16 - s32)
	**/
	TST LR, 0x10	/* Test bit 5 in LR, if it is zero then FPU is enabled */
 8000246:	f01e 0f10 	tst.w	lr, #16
	IT	EQ	/* If zero flag is cleared */
 800024a:	bf08      	it	eq
	VLDMIAEQ R1!, {S16-S31}
 800024c:	ecb1 8a10 	vldmiaeq	r1!, {s16-s31}
	/* Save PSP */
	MSR PSP, R1
 8000250:	f381 8809 	msr	PSP, r1
	/* Return from interrupt */
	BX LR
 8000254:	4770      	bx	lr
 8000256:	0000      	.short	0x0000
	LDR R1, =RTOS_SVC_excReturn
 8000258:	20002174 	.word	0x20002174

0800025c <RTOS_SVC_schedulerStart>:

 .text

 .type RTOS_SVC_schedulerStart, %function
 RTOS_SVC_schedulerStart:
	SVC 0
 800025c:	df00      	svc	0
	BX LR
 800025e:	4770      	bx	lr

08000260 <RTOS_SVC_threadCreate>:

 .type RTOS_SVC_threadCreate, %function
 RTOS_SVC_threadCreate:
	SVC 1
 8000260:	df01      	svc	1
	BX LR
 8000262:	4770      	bx	lr

08000264 <RTOS_SVC_threadDelay>:

 .type RTOS_SVC_threadDelay, %function
 RTOS_SVC_threadDelay:
 	SVC 2
 8000264:	df02      	svc	2
 	BX LR
 8000266:	4770      	bx	lr

08000268 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f003 0307 	and.w	r3, r3, #7
 8000276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <NVIC_SetPriorityGrouping+0x44>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000284:	4013      	ands	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8000290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800029a:	4a04      	ldr	r2, [pc, #16]	; (80002ac <NVIC_SetPriorityGrouping+0x44>)
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	60d3      	str	r3, [r2, #12]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80002ba:	4909      	ldr	r1, [pc, #36]	; (80002e0 <NVIC_EnableIRQ+0x30>)
 80002bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c0:	095b      	lsrs	r3, r3, #5
 80002c2:	79fa      	ldrb	r2, [r7, #7]
 80002c4:	f002 021f 	and.w	r2, r2, #31
 80002c8:	2001      	movs	r0, #1
 80002ca:	fa00 f202 	lsl.w	r2, r0, r2
 80002ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000e100 	.word	0xe000e100

080002e4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	4603      	mov	r3, r0
 80002ec:	6039      	str	r1, [r7, #0]
 80002ee:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80002f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	da0b      	bge.n	8000310 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80002f8:	490d      	ldr	r1, [pc, #52]	; (8000330 <NVIC_SetPriority+0x4c>)
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	3b04      	subs	r3, #4
 8000302:	683a      	ldr	r2, [r7, #0]
 8000304:	b2d2      	uxtb	r2, r2
 8000306:	0112      	lsls	r2, r2, #4
 8000308:	b2d2      	uxtb	r2, r2
 800030a:	440b      	add	r3, r1
 800030c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800030e:	e009      	b.n	8000324 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000310:	4908      	ldr	r1, [pc, #32]	; (8000334 <NVIC_SetPriority+0x50>)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	683a      	ldr	r2, [r7, #0]
 8000318:	b2d2      	uxtb	r2, r2
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000324:	bf00      	nop
 8000326:	370c      	adds	r7, #12
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr
 8000330:	e000ed00 	.word	0xe000ed00
 8000334:	e000e100 	.word	0xe000e100

08000338 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	3b01      	subs	r3, #1
 8000344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000348:	d301      	bcc.n	800034e <SysTick_Config+0x16>
 800034a:	2301      	movs	r3, #1
 800034c:	e00f      	b.n	800036e <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800034e:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <SysTick_Config+0x40>)
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	3b01      	subs	r3, #1
 8000354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000356:	210f      	movs	r1, #15
 8000358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800035c:	f7ff ffc2 	bl	80002e4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000360:	4b05      	ldr	r3, [pc, #20]	; (8000378 <SysTick_Config+0x40>)
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000366:	4b04      	ldr	r3, [pc, #16]	; (8000378 <SysTick_Config+0x40>)
 8000368:	2207      	movs	r2, #7
 800036a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800036c:	2300      	movs	r3, #0
}
 800036e:	4618      	mov	r0, r3
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	e000e010 	.word	0xe000e010

0800037c <RTOS_init>:
 * 	None
 * Return:
 * 	None
 */
void RTOS_init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000382:	b672      	cpsid	i
	/* Disable interrupt requests during initialization */
	__disable_irq();

	/* Double word stack alignment */
	SCB->SCR |= SCB_CCR_STKALIGN_Msk;
 8000384:	4a1f      	ldr	r2, [pc, #124]	; (8000404 <RTOS_init+0x88>)
 8000386:	4b1f      	ldr	r3, [pc, #124]	; (8000404 <RTOS_init+0x88>)
 8000388:	691b      	ldr	r3, [r3, #16]
 800038a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800038e:	6113      	str	r3, [r2, #16]

	/* Setup system clock */
	SystemCoreClockUpdate();
 8000390:	f000 fc40 	bl	8000c14 <SystemCoreClockUpdate>

	/* Configure NVIC */
	NVIC_SetPriorityGrouping(3);
 8000394:	2003      	movs	r0, #3
 8000396:	f7ff ff67 	bl	8000268 <NVIC_SetPriorityGrouping>

	/* Configure SysTick */
	ASSERT(SysTick_Config(SystemCoreClock / SYSTICK_FREQUENCY) == 0);
 800039a:	4b1b      	ldr	r3, [pc, #108]	; (8000408 <RTOS_init+0x8c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a1b      	ldr	r2, [pc, #108]	; (800040c <RTOS_init+0x90>)
 80003a0:	fba2 2303 	umull	r2, r3, r2, r3
 80003a4:	099b      	lsrs	r3, r3, #6
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ffc6 	bl	8000338 <SysTick_Config>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <RTOS_init+0x3a>
 80003b2:	b672      	cpsid	i
 80003b4:	e7fe      	b.n	80003b4 <RTOS_init+0x38>
	NVIC_SetPriority(SysTick_IRQn, 1);
 80003b6:	2101      	movs	r1, #1
 80003b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003bc:	f7ff ff92 	bl	80002e4 <NVIC_SetPriority>
	NVIC_EnableIRQ(SysTick_IRQn);
 80003c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003c4:	f7ff ff74 	bl	80002b0 <NVIC_EnableIRQ>


	/* Enable SVC interrupt and set its priority */
	NVIC_SetPriority(SVCall_IRQn, 0);
 80003c8:	2100      	movs	r1, #0
 80003ca:	f06f 0004 	mvn.w	r0, #4
 80003ce:	f7ff ff89 	bl	80002e4 <NVIC_SetPriority>
	NVIC_EnableIRQ(SVCall_IRQn);
 80003d2:	f06f 0004 	mvn.w	r0, #4
 80003d6:	f7ff ff6b 	bl	80002b0 <NVIC_EnableIRQ>

	/* Enable PendSV interrupt and set its priority */
	NVIC_SetPriority(PendSV_IRQn, 0xFF);
 80003da:	21ff      	movs	r1, #255	; 0xff
 80003dc:	f06f 0001 	mvn.w	r0, #1
 80003e0:	f7ff ff80 	bl	80002e4 <NVIC_SetPriority>
	NVIC_EnableIRQ(PendSV_IRQn);
 80003e4:	f06f 0001 	mvn.w	r0, #1
 80003e8:	f7ff ff62 	bl	80002b0 <NVIC_EnableIRQ>

	/* Initialize ready lists */
	RTOS_threadReadyListsInit();
 80003ec:	f000 f91a 	bl	8000624 <RTOS_threadReadyListsInit>
 80003f0:	2301      	movs	r3, #1
 80003f2:	607b      	str	r3, [r7, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 80003fa:	b662      	cpsie	i
	/* Disable all interrupts except SVC */
	__set_BASEPRI(1);

	/* Enable interrupts */
	__enable_irq();
}
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	e000ed00 	.word	0xe000ed00
 8000408:	20000004 	.word	0x20000004
 800040c:	10624dd3 	.word	0x10624dd3

08000410 <RTOS_SVC_Handler_Main>:
 * 	svc_args -> The supervisor calls arguments passed to the supervisor call
 * Return:
 * 	None
 */
void RTOS_SVC_Handler_Main(uint32_t* svc_args)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	 * Stack contains:
	 *  r0, r1, r2, r3, r12, r14, the return address and xPSR
	 * First argument (r0) is svc_args[0]
	 */
	uint32_t svc_number;
	svc_number = ((int8_t*)svc_args[6])[-2];
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	3318      	adds	r3, #24
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	3b02      	subs	r3, #2
 8000420:	f993 3000 	ldrsb.w	r3, [r3]
 8000424:	60fb      	str	r3, [r7, #12]

	switch(svc_number)
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	2b01      	cmp	r3, #1
 800042a:	d007      	beq.n	800043c <RTOS_SVC_Handler_Main+0x2c>
 800042c:	2b01      	cmp	r3, #1
 800042e:	d302      	bcc.n	8000436 <RTOS_SVC_Handler_Main+0x26>
 8000430:	2b02      	cmp	r3, #2
 8000432:	d014      	beq.n	800045e <RTOS_SVC_Handler_Main+0x4e>
 8000434:	e019      	b.n	800046a <RTOS_SVC_Handler_Main+0x5a>
	{
		case 0:
			/* Start the scheduler */
			RTOS_schedulerStart();
 8000436:	f000 f8a5 	bl	8000584 <RTOS_schedulerStart>
			break;
 800043a:	e018      	b.n	800046e <RTOS_SVC_Handler_Main+0x5e>
		case 1:
			/* Create a thread */
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4618      	mov	r0, r3
							(RTOS_stack_t*)svc_args[1],
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	3304      	adds	r3, #4
 8000446:	681b      	ldr	r3, [r3, #0]
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 8000448:	4619      	mov	r1, r3
							(void *)svc_args[2],
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	3308      	adds	r3, #8
 800044e:	681b      	ldr	r3, [r3, #0]
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 8000450:	461a      	mov	r2, r3
							(uint32_t)svc_args[3]);
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	330c      	adds	r3, #12
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	f000 f902 	bl	8000660 <RTOS_threadCreate>
			break;
 800045c:	e007      	b.n	800046e <RTOS_SVC_Handler_Main+0x5e>
		case 2:
			RTOS_threadDelay((uint32_t) svc_args[0]);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
 8000464:	f000 f9d2 	bl	800080c <RTOS_threadDelay>
			break;
 8000468:	e001      	b.n	800046e <RTOS_SVC_Handler_Main+0x5e>
  __ASM volatile ("cpsid i" : : : "memory");
 800046a:	b672      	cpsid	i
		/* Unsupported supervisor call */
		default:
			ASSERT(0)
 800046c:	e7fe      	b.n	800046c <RTOS_SVC_Handler_Main+0x5c>
			break;
	}
}
 800046e:	bf00      	nop
 8000470:	3710      	adds	r7, #16
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}

08000476 <RTOS_listInit>:
 * 	pList -> The RTOS list
 * Return:
 * 	None
 */
void RTOS_listInit(RTOS_list_t* pList)
{
 8000476:	b480      	push	{r7}
 8000478:	b083      	sub	sp, #12
 800047a:	af00      	add	r7, sp, #0
 800047c:	6078      	str	r0, [r7, #4]
	ASSERT(pList != NULL);
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d101      	bne.n	8000488 <RTOS_listInit+0x12>
 8000484:	b672      	cpsid	i
 8000486:	e7fe      	b.n	8000486 <RTOS_listInit+0x10>

	/* Set the the current index as end item */
	pList->pIndex = (RTOS_listItem_t*) &(pList->endItem);
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	1d1a      	adds	r2, r3, #4
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	601a      	str	r2, [r3, #0]

	/* Set the next and previous of the end item as itself */
	pList->endItem.pNext = (RTOS_listItem_t*) &(pList->endItem);
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	1d1a      	adds	r2, r3, #4
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	605a      	str	r2, [r3, #4]
	pList->endItem.pPrev = (RTOS_listItem_t*) &(pList->endItem);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	1d1a      	adds	r2, r3, #4
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	609a      	str	r2, [r3, #8]

	/* Set the number of items in the list to zero */
	pList->numListItems = 0;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]
}
 80004a6:	bf00      	nop
 80004a8:	370c      	adds	r7, #12
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr

080004b2 <RTOS_listAppend>:
 * 	pListItem -> The RTOS list item to be inserted
 * Return:
 * 	None
 */
void RTOS_listAppend(RTOS_list_t* pList, RTOS_listItem_t* pListItem)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	6039      	str	r1, [r7, #0]
	ASSERT(pList != NULL);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d101      	bne.n	80004c6 <RTOS_listAppend+0x14>
 80004c2:	b672      	cpsid	i
 80004c4:	e7fe      	b.n	80004c4 <RTOS_listAppend+0x12>
	ASSERT(pListItem != NULL);
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d101      	bne.n	80004d0 <RTOS_listAppend+0x1e>
 80004cc:	b672      	cpsid	i
 80004ce:	e7fe      	b.n	80004ce <RTOS_listAppend+0x1c>

	/* Make the next of the new item the next of the current index item of list */
	pListItem->pNext = pList->pIndex->pNext;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	601a      	str	r2, [r3, #0]
	/* Make the previous of the new item the current index item of the list */
	pListItem->pPrev = pList->pIndex;
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	605a      	str	r2, [r3, #4]
	/* Make the previous of the item that was the next the new item */
	pListItem->pNext->pPrev = pListItem;
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	683a      	ldr	r2, [r7, #0]
 80004e8:	605a      	str	r2, [r3, #4]
	/* Make the next item of the current index item the new list item */
	pList->pIndex->pNext = pListItem;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	683a      	ldr	r2, [r7, #0]
 80004f0:	601a      	str	r2, [r3, #0]
	/* Update the current index to the new item */
	pList->pIndex = pListItem;
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	683a      	ldr	r2, [r7, #0]
 80004f6:	601a      	str	r2, [r3, #0]
	/* Set the list of the new item as the list */
	pListItem->pList = pList;
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	609a      	str	r2, [r3, #8]
	/* Increment the number of items in the list */
	pList->numListItems++;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	68db      	ldr	r3, [r3, #12]
 8000502:	1c5a      	adds	r2, r3, #1
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	60da      	str	r2, [r3, #12]
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <RTOS_listRemove>:
 * 	pListItem -> The RTOS list item to be removed
 * Return:
 * 	None
 */
void RTOS_listRemove(RTOS_list_t* pList, RTOS_listItem_t* pListItem)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	ASSERT(pList != NULL);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d101      	bne.n	8000528 <RTOS_listRemove+0x14>
 8000524:	b672      	cpsid	i
 8000526:	e7fe      	b.n	8000526 <RTOS_listRemove+0x12>
	ASSERT(pListItem != NULL);
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d101      	bne.n	8000532 <RTOS_listRemove+0x1e>
 800052e:	b672      	cpsid	i
 8000530:	e7fe      	b.n	8000530 <RTOS_listRemove+0x1c>
	ASSERT(pListItem != (RTOS_listItem_t*) &pList->endItem);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	1d1a      	adds	r2, r3, #4
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	429a      	cmp	r2, r3
 800053a:	d101      	bne.n	8000540 <RTOS_listRemove+0x2c>
 800053c:	b672      	cpsid	i
 800053e:	e7fe      	b.n	800053e <RTOS_listRemove+0x2a>

	/* Make the next of previous item the next item */
	pListItem->pPrev->pNext = pListItem->pNext;
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	685b      	ldr	r3, [r3, #4]
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	6812      	ldr	r2, [r2, #0]
 8000548:	601a      	str	r2, [r3, #0]
	/* Make the previous of the next item the previous item */
	pListItem->pNext->pPrev = pListItem->pPrev;
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	683a      	ldr	r2, [r7, #0]
 8000550:	6852      	ldr	r2, [r2, #4]
 8000552:	605a      	str	r2, [r3, #4]
	/* Check if the removed item is the index of the list */
	if(pListItem == pList->pIndex)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681a      	ldr	r2, [r3, #0]
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	429a      	cmp	r2, r3
 800055c:	d103      	bne.n	8000566 <RTOS_listRemove+0x52>
	{
		/* Make the previous item the new index */
		pList->pIndex = pListItem->pPrev;
 800055e:	683b      	ldr	r3, [r7, #0]
 8000560:	685a      	ldr	r2, [r3, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
	else
	{

	}
	/* Increment the number of items in the list */
	pList->numListItems--;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	1e5a      	subs	r2, r3, #1
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	60da      	str	r2, [r3, #12]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <RTOS_idleThreadFunc>:
 * 	None
 * Return:
 * 	None
 */
static void RTOS_idleThreadFunc(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	while(1);
 8000580:	e7fe      	b.n	8000580 <RTOS_idleThreadFunc+0x4>
	...

08000584 <RTOS_schedulerStart>:
 * 	None
 * Return:
 * 	None
 */
void RTOS_schedulerStart(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
	/* Create the idle thread */
	RTOS_threadCreate(&RTOS_idleThread, &RTOS_idleThreadStack, RTOS_idleThreadFunc, MAX_PRIORITY_LEVEL - 1);
 800058a:	230f      	movs	r3, #15
 800058c:	4a15      	ldr	r2, [pc, #84]	; (80005e4 <RTOS_schedulerStart+0x60>)
 800058e:	4916      	ldr	r1, [pc, #88]	; (80005e8 <RTOS_schedulerStart+0x64>)
 8000590:	4816      	ldr	r0, [pc, #88]	; (80005ec <RTOS_schedulerStart+0x68>)
 8000592:	f000 f865 	bl	8000660 <RTOS_threadCreate>

	/* Switch to the top priority ready thread */
	RTOS_threadSwitch();
 8000596:	f000 f8eb 	bl	8000770 <RTOS_threadSwitch>

	/* Get the new ready thread */
	RTOS_thread_t* pNewRunningThread = RTOS_threadGetRunning();
 800059a:	f000 f8dd 	bl	8000758 <RTOS_threadGetRunning>
 800059e:	60f8      	str	r0, [r7, #12]

	/* Set the exception return value */
	RTOS_SVC_excReturn = MEM32WORD(pNewRunningThread->pStack);
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <RTOS_schedulerStart+0x6c>)
 80005a8:	6013      	str	r3, [r2, #0]

	/* Set the Process Stack Pointer */
	__set_PSP(pNewRunningThread->pStack + 10 * 4);
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	3328      	adds	r3, #40	; 0x28
 80005b0:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	f383 8809 	msr	PSP, r3

	/* Set the control register */
	__set_CONTROL(MEM32WORD(pNewRunningThread->pStack + (1 << 2)));
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3304      	adds	r3, #4
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f383 8814 	msr	CONTROL, r3
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
 80005c8:	f3bf 8f6f 	isb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed. */
	__ISB();

	/* Reset SysTick Count */
	RTOS_systickCount = 0;
 80005cc:	4b09      	ldr	r3, [pc, #36]	; (80005f4 <RTOS_schedulerStart+0x70>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	f383 8811 	msr	BASEPRI, r3

	/* Enable all interrupts */
	__set_BASEPRI(0);

}
 80005dc:	bf00      	nop
 80005de:	3710      	adds	r7, #16
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	0800057d 	.word	0x0800057d
 80005e8:	20000058 	.word	0x20000058
 80005ec:	20000034 	.word	0x20000034
 80005f0:	20002174 	.word	0x20002174
 80005f4:	20002170 	.word	0x20002170

080005f8 <RTOS_SysTick_Handler>:
 * 	None
 * Return:
 * 	None
 */
void RTOS_SysTick_Handler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
 	/* Check for threads to be unblocked */
 	RTOS_threadUnblock();
 80005fc:	f000 f934 	bl	8000868 <RTOS_threadUnblock>

	/* Invoke a pendSV exception */
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000600:	4a06      	ldr	r2, [pc, #24]	; (800061c <RTOS_SysTick_Handler+0x24>)
 8000602:	4b06      	ldr	r3, [pc, #24]	; (800061c <RTOS_SysTick_Handler+0x24>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6053      	str	r3, [r2, #4]

    /* Increment SysTick Count */
    RTOS_systickCount++;
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <RTOS_SysTick_Handler+0x28>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	3301      	adds	r3, #1
 8000612:	4a03      	ldr	r2, [pc, #12]	; (8000620 <RTOS_SysTick_Handler+0x28>)
 8000614:	6013      	str	r3, [r2, #0]
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	e000ed00 	.word	0xe000ed00
 8000620:	20002170 	.word	0x20002170

08000624 <RTOS_threadReadyListsInit>:
 *  None
 * Return:
 * 	None
 */
void RTOS_threadReadyListsInit(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
	/* Initialize the ready lists */
	uint32_t i;
	for(i = 0; i < MAX_PRIORITY_LEVEL; i++)
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	e009      	b.n	8000644 <RTOS_threadReadyListsInit+0x20>
		RTOS_listInit(&RTOS_readyList[i]);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	011b      	lsls	r3, r3, #4
 8000634:	4a08      	ldr	r2, [pc, #32]	; (8000658 <RTOS_threadReadyListsInit+0x34>)
 8000636:	4413      	add	r3, r2
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff ff1c 	bl	8000476 <RTOS_listInit>
	for(i = 0; i < MAX_PRIORITY_LEVEL; i++)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3301      	adds	r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b0f      	cmp	r3, #15
 8000648:	d9f2      	bls.n	8000630 <RTOS_threadReadyListsInit+0xc>

	/* Initialize the delayed list */
	RTOS_listInit(&RTOS_delayList);
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <RTOS_threadReadyListsInit+0x38>)
 800064c:	f7ff ff13 	bl	8000476 <RTOS_listInit>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	2000205c 	.word	0x2000205c
 800065c:	2000215c 	.word	0x2000215c

08000660 <RTOS_threadCreate>:
 * 	priority -> The thread priority level
 * Return:
 * 	None
 */
void RTOS_threadCreate(RTOS_thread_t* pThread, RTOS_stack_t* pStack, void* pFunction, uint32_t priority)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	60f8      	str	r0, [r7, #12]
 8000668:	60b9      	str	r1, [r7, #8]
 800066a:	607a      	str	r2, [r7, #4]
 800066c:	603b      	str	r3, [r7, #0]
	ASSERT(pThread != NULL);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d101      	bne.n	8000678 <RTOS_threadCreate+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
 8000676:	e7fe      	b.n	8000676 <RTOS_threadCreate+0x16>
	ASSERT(pStack != NULL);
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d101      	bne.n	8000682 <RTOS_threadCreate+0x22>
 800067e:	b672      	cpsid	i
 8000680:	e7fe      	b.n	8000680 <RTOS_threadCreate+0x20>
	ASSERT(pFunction != NULL);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d101      	bne.n	800068c <RTOS_threadCreate+0x2c>
 8000688:	b672      	cpsid	i
 800068a:	e7fe      	b.n	800068a <RTOS_threadCreate+0x2a>
	ASSERT((priority < MAX_PRIORITY_LEVEL) && (priority >= 0));
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	2b0f      	cmp	r3, #15
 8000690:	d901      	bls.n	8000696 <RTOS_threadCreate+0x36>
 8000692:	b672      	cpsid	i
 8000694:	e7fe      	b.n	8000694 <RTOS_threadCreate+0x34>
	 * PC
	 * xPSR
	 */

	/* Initialize the stack pointer */
	pThread->pStack = (uint32_t)pStack->stack + MAX_STACK_SIZE * 8 - 18 * 4;
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	f503 53fd 	add.w	r3, r3, #8096	; 0x1fa0
 800069c:	3318      	adds	r3, #24
 800069e:	68fa      	ldr	r2, [r7, #12]
 80006a0:	6013      	str	r3, [r2, #0]

	/* Initialize EXC_RETURN (Return to thread mode using PSP) */
	MEM32WORD(pThread->pStack) = 0xFFFFFFFDUL;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	461a      	mov	r2, r3
 80006a8:	f06f 0302 	mvn.w	r3, #2
 80006ac:	6013      	str	r3, [r2, #0]

	/* Initialize the CONTROL Register (No FPU, PSP, Unprivileged mode)*/
	MEM32WORD(pThread->pStack + (1 << 2)) = 0x3;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	3304      	adds	r3, #4
 80006b4:	461a      	mov	r2, r3
 80006b6:	2303      	movs	r3, #3
 80006b8:	6013      	str	r3, [r2, #0]

	/* Initialize the program counter */
	MEM32WORD(pThread->pStack + (16 << 2)) = (uint32_t)pFunction;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	3340      	adds	r3, #64	; 0x40
 80006c0:	461a      	mov	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	6013      	str	r3, [r2, #0]

	/* Initialize the xPSR register to only Thumb mode*/
	MEM32WORD(pThread->pStack + (17 << 2)) = 0x01000000;
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	3344      	adds	r3, #68	; 0x44
 80006cc:	461a      	mov	r2, r3
 80006ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80006d2:	6013      	str	r3, [r2, #0]

	/* Set the priority level */
	pThread->priority = priority;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	683a      	ldr	r2, [r7, #0]
 80006d8:	605a      	str	r2, [r3, #4]

	/* Clear the delay amount */
	pThread->delay_systicks = 0;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]

	/* Set thread ID */
	pThread->threadId = numThreads;
 80006e0:	4b18      	ldr	r3, [pc, #96]	; (8000744 <RTOS_threadCreate+0xe4>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	619a      	str	r2, [r3, #24]
	numThreads++;
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <RTOS_threadCreate+0xe4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a15      	ldr	r2, [pc, #84]	; (8000744 <RTOS_threadCreate+0xe4>)
 80006f0:	6013      	str	r3, [r2, #0]

	/* Set the thread's list item thread pointer */
	pThread->listItem.pThread = pThread;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	615a      	str	r2, [r3, #20]

	/* Add the thread to the ready list */
	RTOS_listAppend(&RTOS_readyList[priority], &pThread->listItem);
 80006f8:	683b      	ldr	r3, [r7, #0]
 80006fa:	011b      	lsls	r3, r3, #4
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <RTOS_threadCreate+0xe8>)
 80006fe:	441a      	add	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	3308      	adds	r3, #8
 8000704:	4619      	mov	r1, r3
 8000706:	4610      	mov	r0, r2
 8000708:	f7ff fed3 	bl	80004b2 <RTOS_listAppend>

	/* Check if the new thread has a new highest priority */
	if(priority < currentTopPriority)
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <RTOS_threadCreate+0xec>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	683a      	ldr	r2, [r7, #0]
 8000712:	429a      	cmp	r2, r3
 8000714:	d202      	bcs.n	800071c <RTOS_threadCreate+0xbc>
	{
		currentTopPriority = priority;
 8000716:	4a0d      	ldr	r2, [pc, #52]	; (800074c <RTOS_threadCreate+0xec>)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	6013      	str	r3, [r2, #0]
	{

	}

	/* Check if the scheduler has started and the currently running thread has a lower priority */
	if((pCurrentlyRunningThread != NULL) && (priority < pCurrentlyRunningThread->priority))
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <RTOS_threadCreate+0xf0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d00b      	beq.n	800073c <RTOS_threadCreate+0xdc>
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <RTOS_threadCreate+0xf0>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	685a      	ldr	r2, [r3, #4]
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	429a      	cmp	r2, r3
 800072e:	d905      	bls.n	800073c <RTOS_threadCreate+0xdc>
	{
		/* Invoke a pendSV exception */
	    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000730:	4a08      	ldr	r2, [pc, #32]	; (8000754 <RTOS_threadCreate+0xf4>)
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <RTOS_threadCreate+0xf4>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073a:	6053      	str	r3, [r2, #4]
	else
	{

	}

}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000216c 	.word	0x2000216c
 8000748:	2000205c 	.word	0x2000205c
 800074c:	20000000 	.word	0x20000000
 8000750:	20002058 	.word	0x20002058
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <RTOS_threadGetRunning>:
 *  None
 * Return:
 * 	Pointer to the running thread
 */
RTOS_thread_t* RTOS_threadGetRunning(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
	return pCurrentlyRunningThread;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <RTOS_threadGetRunning+0x14>)
 800075e:	681b      	ldr	r3, [r3, #0]
}
 8000760:	4618      	mov	r0, r3
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20002058 	.word	0x20002058

08000770 <RTOS_threadSwitch>:
 *  None
 * Return:
 * 	None
 */
void RTOS_threadSwitch(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
	/* Check if the current top priority list became empty */
	while(RTOS_readyList[currentTopPriority].numListItems == 0)
 8000774:	e004      	b.n	8000780 <RTOS_threadSwitch+0x10>
	{
		currentTopPriority++;
 8000776:	4b22      	ldr	r3, [pc, #136]	; (8000800 <RTOS_threadSwitch+0x90>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	4a20      	ldr	r2, [pc, #128]	; (8000800 <RTOS_threadSwitch+0x90>)
 800077e:	6013      	str	r3, [r2, #0]
	while(RTOS_readyList[currentTopPriority].numListItems == 0)
 8000780:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <RTOS_threadSwitch+0x90>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <RTOS_threadSwitch+0x94>)
 8000786:	011b      	lsls	r3, r3, #4
 8000788:	4413      	add	r3, r2
 800078a:	330c      	adds	r3, #12
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d0f1      	beq.n	8000776 <RTOS_threadSwitch+0x6>
	}

	/* Get the next thread in the list */
	RTOS_readyList[currentTopPriority].pIndex = RTOS_readyList[currentTopPriority].pIndex->pNext;
 8000792:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <RTOS_threadSwitch+0x90>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a1a      	ldr	r2, [pc, #104]	; (8000800 <RTOS_threadSwitch+0x90>)
 8000798:	6812      	ldr	r2, [r2, #0]
 800079a:	491a      	ldr	r1, [pc, #104]	; (8000804 <RTOS_threadSwitch+0x94>)
 800079c:	0112      	lsls	r2, r2, #4
 800079e:	440a      	add	r2, r1
 80007a0:	6812      	ldr	r2, [r2, #0]
 80007a2:	6812      	ldr	r2, [r2, #0]
 80007a4:	4917      	ldr	r1, [pc, #92]	; (8000804 <RTOS_threadSwitch+0x94>)
 80007a6:	011b      	lsls	r3, r3, #4
 80007a8:	440b      	add	r3, r1
 80007aa:	601a      	str	r2, [r3, #0]

	/* Check if the current index is the end item */
	if(RTOS_readyList[currentTopPriority].pIndex == (RTOS_listItem_t*) &RTOS_readyList[currentTopPriority].endItem)
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <RTOS_threadSwitch+0x90>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a14      	ldr	r2, [pc, #80]	; (8000804 <RTOS_threadSwitch+0x94>)
 80007b2:	011b      	lsls	r3, r3, #4
 80007b4:	4413      	add	r3, r2
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b11      	ldr	r3, [pc, #68]	; (8000800 <RTOS_threadSwitch+0x90>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	011b      	lsls	r3, r3, #4
 80007be:	4911      	ldr	r1, [pc, #68]	; (8000804 <RTOS_threadSwitch+0x94>)
 80007c0:	440b      	add	r3, r1
 80007c2:	3304      	adds	r3, #4
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d10c      	bne.n	80007e2 <RTOS_threadSwitch+0x72>
	{
		/* Increment the index */
		RTOS_readyList[currentTopPriority].pIndex = RTOS_readyList[currentTopPriority].pIndex->pNext;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <RTOS_threadSwitch+0x90>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <RTOS_threadSwitch+0x90>)
 80007ce:	6812      	ldr	r2, [r2, #0]
 80007d0:	490c      	ldr	r1, [pc, #48]	; (8000804 <RTOS_threadSwitch+0x94>)
 80007d2:	0112      	lsls	r2, r2, #4
 80007d4:	440a      	add	r2, r1
 80007d6:	6812      	ldr	r2, [r2, #0]
 80007d8:	6812      	ldr	r2, [r2, #0]
 80007da:	490a      	ldr	r1, [pc, #40]	; (8000804 <RTOS_threadSwitch+0x94>)
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	440b      	add	r3, r1
 80007e0:	601a      	str	r2, [r3, #0]
	}

	pCurrentlyRunningThread = RTOS_readyList[currentTopPriority].pIndex->pThread;
 80007e2:	4b07      	ldr	r3, [pc, #28]	; (8000800 <RTOS_threadSwitch+0x90>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a07      	ldr	r2, [pc, #28]	; (8000804 <RTOS_threadSwitch+0x94>)
 80007e8:	011b      	lsls	r3, r3, #4
 80007ea:	4413      	add	r3, r2
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	4a05      	ldr	r2, [pc, #20]	; (8000808 <RTOS_threadSwitch+0x98>)
 80007f2:	6013      	str	r3, [r2, #0]

}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000000 	.word	0x20000000
 8000804:	2000205c 	.word	0x2000205c
 8000808:	20002058 	.word	0x20002058

0800080c <RTOS_threadDelay>:
 *  systicks -> Number of system ticks to be delayed
 * Return:
 * 	None
 */
void RTOS_threadDelay(uint32_t systicks)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	/* Remove the current thread from ready list */
	RTOS_listRemove(&RTOS_readyList[pCurrentlyRunningThread->priority], &pCurrentlyRunningThread->listItem);
 8000814:	4b10      	ldr	r3, [pc, #64]	; (8000858 <RTOS_threadDelay+0x4c>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	4a0f      	ldr	r2, [pc, #60]	; (800085c <RTOS_threadDelay+0x50>)
 800081e:	441a      	add	r2, r3
 8000820:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <RTOS_threadDelay+0x4c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	3308      	adds	r3, #8
 8000826:	4619      	mov	r1, r3
 8000828:	4610      	mov	r0, r2
 800082a:	f7ff fe73 	bl	8000514 <RTOS_listRemove>

	/* Set the delay amount */
	pCurrentlyRunningThread->delay_systicks = systicks;
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <RTOS_threadDelay+0x4c>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	61da      	str	r2, [r3, #28]

	/* Add the thread to the delayed list */
	RTOS_listAppend(&RTOS_delayList, &pCurrentlyRunningThread->listItem);
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <RTOS_threadDelay+0x4c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3308      	adds	r3, #8
 800083c:	4619      	mov	r1, r3
 800083e:	4808      	ldr	r0, [pc, #32]	; (8000860 <RTOS_threadDelay+0x54>)
 8000840:	f7ff fe37 	bl	80004b2 <RTOS_listAppend>

	/* Invoke a pendSV exception */
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000844:	4a07      	ldr	r2, [pc, #28]	; (8000864 <RTOS_threadDelay+0x58>)
 8000846:	4b07      	ldr	r3, [pc, #28]	; (8000864 <RTOS_threadDelay+0x58>)
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800084e:	6053      	str	r3, [r2, #4]
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20002058 	.word	0x20002058
 800085c:	2000205c 	.word	0x2000205c
 8000860:	2000215c 	.word	0x2000215c
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <RTOS_threadUnblock>:
 *  None
 * Return:
 * 	None
 */
void RTOS_threadUnblock(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
	/* Check for delayed threads */
	int i;
	RTOS_listItem_t* pCurrentItem = RTOS_delayList.pIndex;
 800086e:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <RTOS_threadUnblock+0x88>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < RTOS_delayList.numListItems + 1; i++)
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e030      	b.n	80008dc <RTOS_threadUnblock+0x74>
	{
		if(pCurrentItem != (RTOS_listItem_t*) &RTOS_delayList.endItem)
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	4a1d      	ldr	r2, [pc, #116]	; (80008f4 <RTOS_threadUnblock+0x8c>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d026      	beq.n	80008d0 <RTOS_threadUnblock+0x68>
		{
			RTOS_thread_t* pCurrentThread = pCurrentItem->pThread;
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	607b      	str	r3, [r7, #4]
			if(pCurrentThread->delay_systicks > 0)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	69db      	ldr	r3, [r3, #28]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d005      	beq.n	800089c <RTOS_threadUnblock+0x34>
			{
				pCurrentThread->delay_systicks--;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	1e5a      	subs	r2, r3, #1
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	61da      	str	r2, [r3, #28]
 800089a:	e019      	b.n	80008d0 <RTOS_threadUnblock+0x68>
			}
			else
			{
				/* Remove the current thread from delay list */
				RTOS_listRemove(&RTOS_delayList, pCurrentItem);
 800089c:	68b9      	ldr	r1, [r7, #8]
 800089e:	4814      	ldr	r0, [pc, #80]	; (80008f0 <RTOS_threadUnblock+0x88>)
 80008a0:	f7ff fe38 	bl	8000514 <RTOS_listRemove>

				/* Clear the delay amount */
				pCurrentThread->delay_systicks = 0;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]

				/* Check if the thread has a new highest priority */
				if(pCurrentThread->priority < currentTopPriority)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	685a      	ldr	r2, [r3, #4]
 80008ae:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <RTOS_threadUnblock+0x90>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d203      	bcs.n	80008be <RTOS_threadUnblock+0x56>
				{
					currentTopPriority = pCurrentThread->priority;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	4a0f      	ldr	r2, [pc, #60]	; (80008f8 <RTOS_threadUnblock+0x90>)
 80008bc:	6013      	str	r3, [r2, #0]
				{

				}

				/* Add the thread to the ready list */
				RTOS_listAppend(&RTOS_readyList[pCurrentThread->priority], pCurrentItem);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	4a0d      	ldr	r2, [pc, #52]	; (80008fc <RTOS_threadUnblock+0x94>)
 80008c6:	4413      	add	r3, r2
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fdf1 	bl	80004b2 <RTOS_listAppend>
			}
		}
		pCurrentItem = pCurrentItem->pNext;
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < RTOS_delayList.numListItems + 1; i++)
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	3301      	adds	r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <RTOS_threadUnblock+0x88>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	1c5a      	adds	r2, r3, #1
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8c8      	bhi.n	800087a <RTOS_threadUnblock+0x12>
	}
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	2000215c 	.word	0x2000215c
 80008f4:	20002160 	.word	0x20002160
 80008f8:	20000000 	.word	0x20000000
 80008fc:	2000205c 	.word	0x2000205c

08000900 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000900:	b480      	push	{r7}
 8000902:	b087      	sub	sp, #28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800090a:	2300      	movs	r3, #0
 800090c:	617b      	str	r3, [r7, #20]
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	e076      	b.n	8000a0a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800091c:	2201      	movs	r2, #1
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	693b      	ldr	r3, [r7, #16]
 8000934:	429a      	cmp	r2, r3
 8000936:	d165      	bne.n	8000a04 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	2103      	movs	r1, #3
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	43db      	mvns	r3, r3
 8000948:	401a      	ands	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	4619      	mov	r1, r3
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	005b      	lsls	r3, r3, #1
 800095c:	fa01 f303 	lsl.w	r3, r1, r3
 8000960:	431a      	orrs	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	791b      	ldrb	r3, [r3, #4]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d003      	beq.n	8000976 <GPIO_Init+0x76>
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	791b      	ldrb	r3, [r3, #4]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d12e      	bne.n	80009d4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	689a      	ldr	r2, [r3, #8]
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	005b      	lsls	r3, r3, #1
 800097e:	2103      	movs	r1, #3
 8000980:	fa01 f303 	lsl.w	r3, r1, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	401a      	ands	r2, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689a      	ldr	r2, [r3, #8]
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	795b      	ldrb	r3, [r3, #5]
 8000994:	4619      	mov	r1, r3
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	fa01 f303 	lsl.w	r3, r1, r3
 800099e:	431a      	orrs	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	685a      	ldr	r2, [r3, #4]
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	4619      	mov	r1, r3
 80009ae:	2301      	movs	r3, #1
 80009b0:	408b      	lsls	r3, r1
 80009b2:	43db      	mvns	r3, r3
 80009b4:	401a      	ands	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	683a      	ldr	r2, [r7, #0]
 80009c0:	7992      	ldrb	r2, [r2, #6]
 80009c2:	4611      	mov	r1, r2
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	b292      	uxth	r2, r2
 80009c8:	fa01 f202 	lsl.w	r2, r1, r2
 80009cc:	b292      	uxth	r2, r2
 80009ce:	431a      	orrs	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	68da      	ldr	r2, [r3, #12]
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	b29b      	uxth	r3, r3
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	2103      	movs	r1, #3
 80009e0:	fa01 f303 	lsl.w	r3, r1, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	401a      	ands	r2, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	68da      	ldr	r2, [r3, #12]
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	79db      	ldrb	r3, [r3, #7]
 80009f4:	4619      	mov	r1, r3
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	fa01 f303 	lsl.w	r3, r1, r3
 80009fe:	431a      	orrs	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	3301      	adds	r3, #1
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	2b0f      	cmp	r3, #15
 8000a0e:	d985      	bls.n	800091c <GPIO_Init+0x1c>
    }
  }
}
 8000a10:	bf00      	nop
 8000a12:	371c      	adds	r7, #28
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	695a      	ldr	r2, [r3, #20]
 8000a2c:	887b      	ldrh	r3, [r7, #2]
 8000a2e:	405a      	eors	r2, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	615a      	str	r2, [r3, #20]
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000a4c:	78fb      	ldrb	r3, [r7, #3]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d006      	beq.n	8000a60 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000a52:	490a      	ldr	r1, [pc, #40]	; (8000a7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000a5e:	e006      	b.n	8000a6e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000a60:	4906      	ldr	r1, [pc, #24]	; (8000a7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000a6e:	bf00      	nop
 8000a70:	370c      	adds	r7, #12
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800

08000a80 <func_1>:
	}
}


void func_1(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_ToggleBits(GPIOG, (1 << 13));
 8000a84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <func_1+0x18>)
 8000a8a:	f7ff ffc7 	bl	8000a1c <GPIO_ToggleBits>
		//ITM_PortPrintf(31, "11", 2UL);
		RTOS_SVC_threadDelay(500);
 8000a8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a92:	f7ff fbe7 	bl	8000264 <RTOS_SVC_threadDelay>
		GPIO_ToggleBits(GPIOG, (1 << 13));
 8000a96:	e7f5      	b.n	8000a84 <func_1+0x4>
 8000a98:	40021800 	.word	0x40021800

08000a9c <func_2>:
		//ITM_PortPrintf(31, "12", 2UL);
	}
}

void func_2(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_ToggleBits(GPIOG, (1 << 14));
 8000aa0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa4:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <func_2+0x18>)
 8000aa6:	f7ff ffb9 	bl	8000a1c <GPIO_ToggleBits>
		RTOS_SVC_threadDelay(1000);
 8000aaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aae:	f7ff fbd9 	bl	8000264 <RTOS_SVC_threadDelay>
		GPIO_ToggleBits(GPIOG, (1 << 14));
 8000ab2:	e7f5      	b.n	8000aa0 <func_2+0x4>
 8000ab4:	40021800 	.word	0x40021800

08000ab8 <main>:

RTOS_thread_t thread[2];
RTOS_stack_t stack[2];

int main(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000abe:	2101      	movs	r1, #1
 8000ac0:	2040      	movs	r0, #64	; 0x40
 8000ac2:	f7ff ffbd 	bl	8000a40 <RCC_AHB1PeriphClockCmd>
	GPIO_Init(GPIOG, &(GPIO_InitTypeDef){
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <main+0x48>)
 8000ac8:	463b      	mov	r3, r7
 8000aca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ace:	e883 0003 	stmia.w	r3, {r0, r1}
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480b      	ldr	r0, [pc, #44]	; (8000b04 <main+0x4c>)
 8000ad8:	f7ff ff12 	bl	8000900 <GPIO_Init>
			GPIO_OType_PP,
			GPIO_PuPd_NOPULL
	  });


	RTOS_init();
 8000adc:	f7ff fc4e 	bl	800037c <RTOS_init>

	RTOS_SVC_threadCreate(&thread[0], &stack[0], func_1, 1);
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	4a09      	ldr	r2, [pc, #36]	; (8000b08 <main+0x50>)
 8000ae4:	4909      	ldr	r1, [pc, #36]	; (8000b0c <main+0x54>)
 8000ae6:	480a      	ldr	r0, [pc, #40]	; (8000b10 <main+0x58>)
 8000ae8:	f7ff fbba 	bl	8000260 <RTOS_SVC_threadCreate>
	RTOS_SVC_threadCreate(&thread[1], &stack[1], func_2, 1);
 8000aec:	2301      	movs	r3, #1
 8000aee:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <main+0x5c>)
 8000af0:	4909      	ldr	r1, [pc, #36]	; (8000b18 <main+0x60>)
 8000af2:	480a      	ldr	r0, [pc, #40]	; (8000b1c <main+0x64>)
 8000af4:	f7ff fbb4 	bl	8000260 <RTOS_SVC_threadCreate>

	RTOS_SVC_schedulerStart();
 8000af8:	f7ff fbb0 	bl	800025c <RTOS_SVC_schedulerStart>

	while(1);
 8000afc:	e7fe      	b.n	8000afc <main+0x44>
 8000afe:	bf00      	nop
 8000b00:	08000e64 	.word	0x08000e64
 8000b04:	40021800 	.word	0x40021800
 8000b08:	08000a81 	.word	0x08000a81
 8000b0c:	200021b8 	.word	0x200021b8
 8000b10:	20002178 	.word	0x20002178
 8000b14:	08000a9d 	.word	0x08000a9d
 8000b18:	200041b8 	.word	0x200041b8
 8000b1c:	20002198 	.word	0x20002198

08000b20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b58 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b26:	e003      	b.n	8000b30 <LoopCopyDataInit>

08000b28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b2e:	3104      	adds	r1, #4

08000b30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b30:	480b      	ldr	r0, [pc, #44]	; (8000b60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b38:	d3f6      	bcc.n	8000b28 <CopyDataInit>
  ldr  r2, =_sbss
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b3c:	e002      	b.n	8000b44 <LoopFillZerobss>

08000b3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b40:	f842 3b04 	str.w	r3, [r2], #4

08000b44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b48:	d3f9      	bcc.n	8000b3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b4a:	f000 f82d 	bl	8000ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b4e:	f000 f959 	bl	8000e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b52:	f7ff ffb1 	bl	8000ab8 <main>
  bx  lr    
 8000b56:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b58:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000b5c:	08000e74 	.word	0x08000e74
  ldr  r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b64:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000b68:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000b6c:	200061b8 	.word	0x200061b8

08000b70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b70:	e7fe      	b.n	8000b70 <ADC_IRQHandler>

08000b72 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
}
 8000b76:	bf00      	nop
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <HardFault_Handler+0x4>

08000b86 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000b8a:	e7fe      	b.n	8000b8a <MemManage_Handler+0x4>

08000b8c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000b90:	e7fe      	b.n	8000b90 <BusFault_Handler+0x4>

08000b92 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000b96:	e7fe      	b.n	8000b96 <UsageFault_Handler+0x4>

08000b98 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bac:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <SystemInit+0x60>)
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <SystemInit+0x60>)
 8000bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000bbc:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <SystemInit+0x64>)
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <SystemInit+0x64>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <SystemInit+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000bce:	4a0f      	ldr	r2, [pc, #60]	; (8000c0c <SystemInit+0x64>)
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <SystemInit+0x64>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bdc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <SystemInit+0x64>)
 8000be0:	4a0b      	ldr	r2, [pc, #44]	; (8000c10 <SystemInit+0x68>)
 8000be2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000be4:	4a09      	ldr	r2, [pc, #36]	; (8000c0c <SystemInit+0x64>)
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <SystemInit+0x64>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <SystemInit+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000bf6:	f000 f889 	bl	8000d0c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000bfa:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <SystemInit+0x60>)
 8000bfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c00:	609a      	str	r2, [r3, #8]
#endif
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	e000ed00 	.word	0xe000ed00
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	24003010 	.word	0x24003010

08000c14 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b087      	sub	sp, #28
 8000c18:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	2302      	movs	r3, #2
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000c2e:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <SystemCoreClockUpdate+0xe4>)
 8000c30:	689b      	ldr	r3, [r3, #8]
 8000c32:	f003 030c 	and.w	r3, r3, #12
 8000c36:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	d007      	beq.n	8000c4e <SystemCoreClockUpdate+0x3a>
 8000c3e:	2b08      	cmp	r3, #8
 8000c40:	d009      	beq.n	8000c56 <SystemCoreClockUpdate+0x42>
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d13d      	bne.n	8000cc2 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <SystemCoreClockUpdate+0xe8>)
 8000c48:	4a2d      	ldr	r2, [pc, #180]	; (8000d00 <SystemCoreClockUpdate+0xec>)
 8000c4a:	601a      	str	r2, [r3, #0]
      break;
 8000c4c:	e03d      	b.n	8000cca <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000c4e:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <SystemCoreClockUpdate+0xe8>)
 8000c50:	4a2c      	ldr	r2, [pc, #176]	; (8000d04 <SystemCoreClockUpdate+0xf0>)
 8000c52:	601a      	str	r2, [r3, #0]
      break;
 8000c54:	e039      	b.n	8000cca <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000c56:	4b28      	ldr	r3, [pc, #160]	; (8000cf8 <SystemCoreClockUpdate+0xe4>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	0d9b      	lsrs	r3, r3, #22
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c62:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <SystemCoreClockUpdate+0xe4>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c6a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d00c      	beq.n	8000c8c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c72:	4a24      	ldr	r2, [pc, #144]	; (8000d04 <SystemCoreClockUpdate+0xf0>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4a1f      	ldr	r2, [pc, #124]	; (8000cf8 <SystemCoreClockUpdate+0xe4>)
 8000c7c:	6852      	ldr	r2, [r2, #4]
 8000c7e:	0992      	lsrs	r2, r2, #6
 8000c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c84:	fb02 f303 	mul.w	r3, r2, r3
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	e00b      	b.n	8000ca4 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000c8c:	4a1c      	ldr	r2, [pc, #112]	; (8000d00 <SystemCoreClockUpdate+0xec>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c94:	4a18      	ldr	r2, [pc, #96]	; (8000cf8 <SystemCoreClockUpdate+0xe4>)
 8000c96:	6852      	ldr	r2, [r2, #4]
 8000c98:	0992      	lsrs	r2, r2, #6
 8000c9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ca2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <SystemCoreClockUpdate+0xe4>)
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	0c1b      	lsrs	r3, r3, #16
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	3301      	adds	r3, #1
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000cb4:	697a      	ldr	r2, [r7, #20]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbc:	4a0f      	ldr	r2, [pc, #60]	; (8000cfc <SystemCoreClockUpdate+0xe8>)
 8000cbe:	6013      	str	r3, [r2, #0]
      break;
 8000cc0:	e003      	b.n	8000cca <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <SystemCoreClockUpdate+0xe8>)
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <SystemCoreClockUpdate+0xec>)
 8000cc6:	601a      	str	r2, [r3, #0]
      break;
 8000cc8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <SystemCoreClockUpdate+0xe4>)
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	091b      	lsrs	r3, r3, #4
 8000cd0:	f003 030f 	and.w	r3, r3, #15
 8000cd4:	4a0c      	ldr	r2, [pc, #48]	; (8000d08 <SystemCoreClockUpdate+0xf4>)
 8000cd6:	5cd3      	ldrb	r3, [r2, r3]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <SystemCoreClockUpdate+0xe8>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <SystemCoreClockUpdate+0xe8>)
 8000ce8:	6013      	str	r3, [r2, #0]
}
 8000cea:	bf00      	nop
 8000cec:	371c      	adds	r7, #28
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40023800 	.word	0x40023800
 8000cfc:	20000004 	.word	0x20000004
 8000d00:	00f42400 	.word	0x00f42400
 8000d04:	007a1200 	.word	0x007a1200
 8000d08:	20000008 	.word	0x20000008

08000d0c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	2300      	movs	r3, #0
 8000d18:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000d1a:	4a36      	ldr	r2, [pc, #216]	; (8000df4 <SetSysClock+0xe8>)
 8000d1c:	4b35      	ldr	r3, [pc, #212]	; (8000df4 <SetSysClock+0xe8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d24:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000d26:	4b33      	ldr	r3, [pc, #204]	; (8000df4 <SetSysClock+0xe8>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3301      	adds	r3, #1
 8000d34:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d103      	bne.n	8000d44 <SetSysClock+0x38>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d42:	d1f0      	bne.n	8000d26 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000d44:	4b2b      	ldr	r3, [pc, #172]	; (8000df4 <SetSysClock+0xe8>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000d50:	2301      	movs	r3, #1
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	e001      	b.n	8000d5a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d142      	bne.n	8000de6 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000d60:	4a24      	ldr	r2, [pc, #144]	; (8000df4 <SetSysClock+0xe8>)
 8000d62:	4b24      	ldr	r3, [pc, #144]	; (8000df4 <SetSysClock+0xe8>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8000d6c:	4a22      	ldr	r2, [pc, #136]	; (8000df8 <SetSysClock+0xec>)
 8000d6e:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <SetSysClock+0xec>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d76:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8000d78:	4a1e      	ldr	r2, [pc, #120]	; (8000df4 <SetSysClock+0xe8>)
 8000d7a:	4b1e      	ldr	r3, [pc, #120]	; (8000df4 <SetSysClock+0xe8>)
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8000d80:	4a1c      	ldr	r2, [pc, #112]	; (8000df4 <SetSysClock+0xe8>)
 8000d82:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <SetSysClock+0xe8>)
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d8a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8000d8c:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <SetSysClock+0xe8>)
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <SetSysClock+0xe8>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000d96:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8000d98:	4b16      	ldr	r3, [pc, #88]	; (8000df4 <SetSysClock+0xe8>)
 8000d9a:	4a18      	ldr	r2, [pc, #96]	; (8000dfc <SetSysClock+0xf0>)
 8000d9c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000d9e:	4a15      	ldr	r2, [pc, #84]	; (8000df4 <SetSysClock+0xe8>)
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <SetSysClock+0xe8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000da8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000daa:	bf00      	nop
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <SetSysClock+0xe8>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0f9      	beq.n	8000dac <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <SetSysClock+0xf4>)
 8000dba:	f240 7205 	movw	r2, #1797	; 0x705
 8000dbe:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000dc0:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <SetSysClock+0xe8>)
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <SetSysClock+0xe8>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	f023 0303 	bic.w	r3, r3, #3
 8000dca:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000dcc:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <SetSysClock+0xe8>)
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <SetSysClock+0xe8>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	f043 0302 	orr.w	r3, r3, #2
 8000dd6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8000dd8:	bf00      	nop
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <SetSysClock+0xe8>)
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	f003 030c 	and.w	r3, r3, #12
 8000de2:	2b08      	cmp	r3, #8
 8000de4:	d1f9      	bne.n	8000dda <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40007000 	.word	0x40007000
 8000dfc:	07405a19 	.word	0x07405a19
 8000e00:	40023c00 	.word	0x40023c00

08000e04 <__libc_init_array>:
 8000e04:	b570      	push	{r4, r5, r6, lr}
 8000e06:	4e0d      	ldr	r6, [pc, #52]	; (8000e3c <__libc_init_array+0x38>)
 8000e08:	4c0d      	ldr	r4, [pc, #52]	; (8000e40 <__libc_init_array+0x3c>)
 8000e0a:	1ba4      	subs	r4, r4, r6
 8000e0c:	10a4      	asrs	r4, r4, #2
 8000e0e:	2500      	movs	r5, #0
 8000e10:	42a5      	cmp	r5, r4
 8000e12:	d109      	bne.n	8000e28 <__libc_init_array+0x24>
 8000e14:	4e0b      	ldr	r6, [pc, #44]	; (8000e44 <__libc_init_array+0x40>)
 8000e16:	4c0c      	ldr	r4, [pc, #48]	; (8000e48 <__libc_init_array+0x44>)
 8000e18:	f000 f818 	bl	8000e4c <_init>
 8000e1c:	1ba4      	subs	r4, r4, r6
 8000e1e:	10a4      	asrs	r4, r4, #2
 8000e20:	2500      	movs	r5, #0
 8000e22:	42a5      	cmp	r5, r4
 8000e24:	d105      	bne.n	8000e32 <__libc_init_array+0x2e>
 8000e26:	bd70      	pop	{r4, r5, r6, pc}
 8000e28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e2c:	4798      	blx	r3
 8000e2e:	3501      	adds	r5, #1
 8000e30:	e7ee      	b.n	8000e10 <__libc_init_array+0xc>
 8000e32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e36:	4798      	blx	r3
 8000e38:	3501      	adds	r5, #1
 8000e3a:	e7f2      	b.n	8000e22 <__libc_init_array+0x1e>
 8000e3c:	08000e6c 	.word	0x08000e6c
 8000e40:	08000e6c 	.word	0x08000e6c
 8000e44:	08000e6c 	.word	0x08000e6c
 8000e48:	08000e70 	.word	0x08000e70

08000e4c <_init>:
 8000e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4e:	bf00      	nop
 8000e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e52:	bc08      	pop	{r3}
 8000e54:	469e      	mov	lr, r3
 8000e56:	4770      	bx	lr

08000e58 <_fini>:
 8000e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e5a:	bf00      	nop
 8000e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e5e:	bc08      	pop	{r3}
 8000e60:	469e      	mov	lr, r3
 8000e62:	4770      	bx	lr
