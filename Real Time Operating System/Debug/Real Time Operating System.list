
Real Time Operating System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000fd4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001180  08001180  00011180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001188  08001188  00011188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800118c  0800118c  0001118c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08001190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  7 .bss          000061b8  20000018  20000018  00020018  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  200061d0  200061d0  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000414f  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001071  00000000  00000000  00024197  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000004d0  00000000  00000000  00025208  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003d8  00000000  00000000  000256d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000020de  00000000  00000000  00025ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000019fb  00000000  00000000  00027b8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00029589  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000010ac  00000000  00000000  00029608  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001168 	.word	0x08001168

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08001168 	.word	0x08001168

080001ec <RTOS_SVC_Handler>:

 .text

 .type RTOS_SVC_Handler, %function
 RTOS_SVC_Handler:
 	TST LR, #4
 80001ec:	f01e 0f04 	tst.w	lr, #4
	ITE EQ
 80001f0:	bf0c      	ite	eq
	MRSEQ R0, MSP
 80001f2:	f3ef 8008 	mrseq	r0, MSP
	MRSNE R0, PSP
 80001f6:	f3ef 8009 	mrsne	r0, PSP
	LDR R1, =RTOS_SVC_excReturn
 80001fa:	4917      	ldr	r1, [pc, #92]	; (8000258 <RTOS_PendSV_Handler+0x4c>)
	STR LR, [R1]
 80001fc:	f8c1 e000 	str.w	lr, [r1]
	BL RTOS_SVC_Handler_Main
 8000200:	f000 f90c 	bl	800041c <RTOS_SVC_Handler_Main>
	LDR R1, =RTOS_SVC_excReturn
 8000204:	4914      	ldr	r1, [pc, #80]	; (8000258 <RTOS_PendSV_Handler+0x4c>)
	LDR LR, [R1]
 8000206:	f8d1 e000 	ldr.w	lr, [r1]
	BX LR
 800020a:	4770      	bx	lr

0800020c <RTOS_PendSV_Handler>:

 .type RTOS_PendSV_Handler, %function
 RTOS_PendSV_Handler:
 	/****************** Saving the current thread's context ********************/
 	/* Get PSP */
 	MRS R1, PSP
 800020c:	f3ef 8109 	mrs	r1, PSP
	/* Check if the currently running thread uses FPU
	 * If so so push FPU registers (s16 - s32)
	**/
	TST LR, 0x10	/* Test bit 5 in LR, if it is zero then FPU is enabled */
 8000210:	f01e 0f10 	tst.w	lr, #16
	IT	EQ	/* If zero flag is cleared */
 8000214:	bf08      	it	eq
	VSTMDBEQ R1!, {S16-S31}
 8000216:	ed21 8a10 	vstmdbeq	r1!, {s16-s31}
	/* Save EXC_RETURN into R2 */
	MOV	R2, LR
 800021a:	4672      	mov	r2, lr
	/* Save CONTROL into R3 */
	MRS R3, CONTROL
 800021c:	f3ef 8314 	mrs	r3, CONTROL
	/* Instruction Synchronization Barrier */
	ISB
 8000220:	f3bf 8f6f 	isb	sy
	/* Push {R2 -> R11} into the thread's stack*/
	STMDB R1!, {R2-R11}
 8000224:	e921 0ffc 	stmdb	r1!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
	/* Save the thread's stack pointer */
	BL RTOS_threadGetRunning
 8000228:	f000 fbf2 	bl	8000a10 <RTOS_threadGetRunning>
	STR R1, [R0]
 800022c:	6001      	str	r1, [r0, #0]

	/****************** Restoring the next thread's context ********************/
 	/* Get the next thread */
 	BL RTOS_threadSwitch
 800022e:	f000 fc27 	bl	8000a80 <RTOS_threadSwitch>
 	/* Set the process stack pointer to the thread's stack */
 	BL RTOS_threadGetRunning
 8000232:	f000 fbed 	bl	8000a10 <RTOS_threadGetRunning>
 	LDR R1, [R0]
 8000236:	6801      	ldr	r1, [r0, #0]
 	/* POP {R2 -> R11} from the thread's stack*/
 	LDMIA R1!, {R2-R11}
 8000238:	e8b1 0ffc 	ldmia.w	r1!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 	/* Move R3 into CONTROL */
 	MSR CONTROL, R3
 800023c:	f383 8814 	msr	CONTROL, r3
 	/* Instruction Synchronization Barrier */
 	ISB
 8000240:	f3bf 8f6f 	isb	sy
 	/* MOVE R2 into Link Register */
 	MOV LR, R2
 8000244:	4696      	mov	lr, r2
 	/* Check if the currently running thread uses FPU
	 * If so so pop FPU registers (s16 - s32)
	**/
	TST LR, 0x10	/* Test bit 5 in LR, if it is zero then FPU is enabled */
 8000246:	f01e 0f10 	tst.w	lr, #16
	IT	EQ	/* If zero flag is cleared */
 800024a:	bf08      	it	eq
	VLDMIAEQ R1!, {S16-S31}
 800024c:	ecb1 8a10 	vldmiaeq	r1!, {s16-s31}
	/* Save PSP */
	MSR PSP, R1
 8000250:	f381 8809 	msr	PSP, r1
	/* Return from interrupt */
	BX LR
 8000254:	4770      	bx	lr
 8000256:	0000      	.short	0x0000
	LDR R1, =RTOS_SVC_excReturn
 8000258:	20002174 	.word	0x20002174

0800025c <RTOS_SVC_schedulerStart>:

 .text

 .type RTOS_SVC_schedulerStart, %function
 RTOS_SVC_schedulerStart:
	SVC 0
 800025c:	df00      	svc	0
	BX LR
 800025e:	4770      	bx	lr

08000260 <RTOS_SVC_threadCreate>:

 .type RTOS_SVC_threadCreate, %function
 RTOS_SVC_threadCreate:
	SVC 1
 8000260:	df01      	svc	1
	BX LR
 8000262:	4770      	bx	lr

08000264 <RTOS_SVC_threadDelay>:

 .type RTOS_SVC_threadDelay, %function
 RTOS_SVC_threadDelay:
 	SVC 2
 8000264:	df02      	svc	2
 	BX LR
 8000266:	4770      	bx	lr

08000268 <RTOS_SVC_semaphoreInit>:

 .type RTOS_SVC_semaphoreInit, %function
 RTOS_SVC_semaphoreInit:
 	SVC 3
 8000268:	df03      	svc	3
 	BX LR
 800026a:	4770      	bx	lr

0800026c <RTOS_SVC_semaphoreWait>:

 .type RTOS_SVC_semaphoreWait, %function
 RTOS_SVC_semaphoreWait:
 	SVC 4
 800026c:	df04      	svc	4
 	BX LR
 800026e:	4770      	bx	lr

08000270 <RTOS_SVC_semaphoreSignal>:

 .type RTOS_SVC_semaphoreSignal, %function
 RTOS_SVC_semaphoreSignal:
 	SVC 5
 8000270:	df05      	svc	5
 	BX LR
 8000272:	4770      	bx	lr

08000274 <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f003 0307 	and.w	r3, r3, #7
 8000282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <NVIC_SetPriorityGrouping+0x44>)
 8000286:	68db      	ldr	r3, [r3, #12]
 8000288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 800028a:	68ba      	ldr	r2, [r7, #8]
 800028c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000290:	4013      	ands	r3, r2
 8000292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 800029c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002a6:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <NVIC_SetPriorityGrouping+0x44>)
 80002a8:	68bb      	ldr	r3, [r7, #8]
 80002aa:	60d3      	str	r3, [r2, #12]
}
 80002ac:	bf00      	nop
 80002ae:	3714      	adds	r7, #20
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80002c6:	4909      	ldr	r1, [pc, #36]	; (80002ec <NVIC_EnableIRQ+0x30>)
 80002c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002cc:	095b      	lsrs	r3, r3, #5
 80002ce:	79fa      	ldrb	r2, [r7, #7]
 80002d0:	f002 021f 	and.w	r2, r2, #31
 80002d4:	2001      	movs	r0, #1
 80002d6:	fa00 f202 	lsl.w	r2, r0, r2
 80002da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80002de:	bf00      	nop
 80002e0:	370c      	adds	r7, #12
 80002e2:	46bd      	mov	sp, r7
 80002e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	e000e100 	.word	0xe000e100

080002f0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	6039      	str	r1, [r7, #0]
 80002fa:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80002fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000300:	2b00      	cmp	r3, #0
 8000302:	da0b      	bge.n	800031c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000304:	490d      	ldr	r1, [pc, #52]	; (800033c <NVIC_SetPriority+0x4c>)
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	f003 030f 	and.w	r3, r3, #15
 800030c:	3b04      	subs	r3, #4
 800030e:	683a      	ldr	r2, [r7, #0]
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	0112      	lsls	r2, r2, #4
 8000314:	b2d2      	uxtb	r2, r2
 8000316:	440b      	add	r3, r1
 8000318:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800031a:	e009      	b.n	8000330 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800031c:	4908      	ldr	r1, [pc, #32]	; (8000340 <NVIC_SetPriority+0x50>)
 800031e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000322:	683a      	ldr	r2, [r7, #0]
 8000324:	b2d2      	uxtb	r2, r2
 8000326:	0112      	lsls	r2, r2, #4
 8000328:	b2d2      	uxtb	r2, r2
 800032a:	440b      	add	r3, r1
 800032c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000ed00 	.word	0xe000ed00
 8000340:	e000e100 	.word	0xe000e100

08000344 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	3b01      	subs	r3, #1
 8000350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000354:	d301      	bcc.n	800035a <SysTick_Config+0x16>
 8000356:	2301      	movs	r3, #1
 8000358:	e00f      	b.n	800037a <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 800035a:	4a0a      	ldr	r2, [pc, #40]	; (8000384 <SysTick_Config+0x40>)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3b01      	subs	r3, #1
 8000360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 8000362:	210f      	movs	r1, #15
 8000364:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000368:	f7ff ffc2 	bl	80002f0 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800036c:	4b05      	ldr	r3, [pc, #20]	; (8000384 <SysTick_Config+0x40>)
 800036e:	2200      	movs	r2, #0
 8000370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000372:	4b04      	ldr	r3, [pc, #16]	; (8000384 <SysTick_Config+0x40>)
 8000374:	2207      	movs	r2, #7
 8000376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000378:	2300      	movs	r3, #0
}
 800037a:	4618      	mov	r0, r3
 800037c:	3708      	adds	r7, #8
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	e000e010 	.word	0xe000e010

08000388 <RTOS_init>:
 * 	None
 * Return:
 * 	None
 */
void RTOS_init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800038e:	b672      	cpsid	i
	/* Disable interrupt requests during initialization */
	__disable_irq();

	/* Double word stack alignment */
	SCB->SCR |= SCB_CCR_STKALIGN_Msk;
 8000390:	4a1f      	ldr	r2, [pc, #124]	; (8000410 <RTOS_init+0x88>)
 8000392:	4b1f      	ldr	r3, [pc, #124]	; (8000410 <RTOS_init+0x88>)
 8000394:	691b      	ldr	r3, [r3, #16]
 8000396:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800039a:	6113      	str	r3, [r2, #16]

	/* Setup system clock */
	SystemCoreClockUpdate();
 800039c:	f000 fdc8 	bl	8000f30 <SystemCoreClockUpdate>

	/* Configure NVIC */
	NVIC_SetPriorityGrouping(3);
 80003a0:	2003      	movs	r0, #3
 80003a2:	f7ff ff67 	bl	8000274 <NVIC_SetPriorityGrouping>

	/* Configure SysTick */
	ASSERT(SysTick_Config(SystemCoreClock / SYSTICK_FREQUENCY) == 0);
 80003a6:	4b1b      	ldr	r3, [pc, #108]	; (8000414 <RTOS_init+0x8c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a1b      	ldr	r2, [pc, #108]	; (8000418 <RTOS_init+0x90>)
 80003ac:	fba2 2303 	umull	r2, r3, r2, r3
 80003b0:	099b      	lsrs	r3, r3, #6
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ffc6 	bl	8000344 <SysTick_Config>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <RTOS_init+0x3a>
 80003be:	b672      	cpsid	i
 80003c0:	e7fe      	b.n	80003c0 <RTOS_init+0x38>
	NVIC_SetPriority(SysTick_IRQn, 1);
 80003c2:	2101      	movs	r1, #1
 80003c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003c8:	f7ff ff92 	bl	80002f0 <NVIC_SetPriority>
	NVIC_EnableIRQ(SysTick_IRQn);
 80003cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003d0:	f7ff ff74 	bl	80002bc <NVIC_EnableIRQ>


	/* Enable SVC interrupt and set its priority */
	NVIC_SetPriority(SVCall_IRQn, 0);
 80003d4:	2100      	movs	r1, #0
 80003d6:	f06f 0004 	mvn.w	r0, #4
 80003da:	f7ff ff89 	bl	80002f0 <NVIC_SetPriority>
	NVIC_EnableIRQ(SVCall_IRQn);
 80003de:	f06f 0004 	mvn.w	r0, #4
 80003e2:	f7ff ff6b 	bl	80002bc <NVIC_EnableIRQ>

	/* Enable PendSV interrupt and set its priority */
	NVIC_SetPriority(PendSV_IRQn, 0xFF);
 80003e6:	21ff      	movs	r1, #255	; 0xff
 80003e8:	f06f 0001 	mvn.w	r0, #1
 80003ec:	f7ff ff80 	bl	80002f0 <NVIC_SetPriority>
	NVIC_EnableIRQ(PendSV_IRQn);
 80003f0:	f06f 0001 	mvn.w	r0, #1
 80003f4:	f7ff ff62 	bl	80002bc <NVIC_EnableIRQ>

	/* Initialize ready lists */
	RTOS_threadReadyListsInit();
 80003f8:	f000 fa70 	bl	80008dc <RTOS_threadReadyListsInit>
 80003fc:	2301      	movs	r3, #1
 80003fe:	607b      	str	r3, [r7, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8000406:	b662      	cpsie	i
	/* Disable all interrupts except SVC */
	__set_BASEPRI(1);

	/* Enable interrupts */
	__enable_irq();
}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	e000ed00 	.word	0xe000ed00
 8000414:	20000004 	.word	0x20000004
 8000418:	10624dd3 	.word	0x10624dd3

0800041c <RTOS_SVC_Handler_Main>:
 * 	svc_args -> The supervisor calls arguments passed to the supervisor call
 * Return:
 * 	None
 */
void RTOS_SVC_Handler_Main(uint32_t* svc_args)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
	 * Stack contains:
	 *  r0, r1, r2, r3, r12, r14, the return address and xPSR
	 * First argument (r0) is svc_args[0]
	 */
	uint32_t svc_number;
	svc_number = ((int8_t*)svc_args[6])[-2];
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	3318      	adds	r3, #24
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	3b02      	subs	r3, #2
 800042c:	f993 3000 	ldrsb.w	r3, [r3]
 8000430:	60fb      	str	r3, [r7, #12]

	switch(svc_number)
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	2b05      	cmp	r3, #5
 8000436:	d840      	bhi.n	80004ba <RTOS_SVC_Handler_Main+0x9e>
 8000438:	a201      	add	r2, pc, #4	; (adr r2, 8000440 <RTOS_SVC_Handler_Main+0x24>)
 800043a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800043e:	bf00      	nop
 8000440:	08000459 	.word	0x08000459
 8000444:	0800045f 	.word	0x0800045f
 8000448:	08000481 	.word	0x08000481
 800044c:	0800048d 	.word	0x0800048d
 8000450:	080004a3 	.word	0x080004a3
 8000454:	080004af 	.word	0x080004af
	{
		case 0:
			/* Start the scheduler */
			RTOS_schedulerStart();
 8000458:	f000 f95c 	bl	8000714 <RTOS_schedulerStart>
			break;
 800045c:	e02f      	b.n	80004be <RTOS_SVC_Handler_Main+0xa2>
		case 1:
			/* Create a thread */
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4618      	mov	r0, r3
							(RTOS_stack_t*)svc_args[1],
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	3304      	adds	r3, #4
 8000468:	681b      	ldr	r3, [r3, #0]
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 800046a:	4619      	mov	r1, r3
							(void *)svc_args[2],
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3308      	adds	r3, #8
 8000470:	681b      	ldr	r3, [r3, #0]
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 8000472:	461a      	mov	r2, r3
							(uint32_t)svc_args[3]);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	330c      	adds	r3, #12
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f000 fa4d 	bl	8000918 <RTOS_threadCreate>
			break;
 800047e:	e01e      	b.n	80004be <RTOS_SVC_Handler_Main+0xa2>
		case 2:
			RTOS_threadDelay((uint32_t) svc_args[0]);
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4618      	mov	r0, r3
 8000486:	f000 fb49 	bl	8000b1c <RTOS_threadDelay>
			break;
 800048a:	e018      	b.n	80004be <RTOS_SVC_Handler_Main+0xa2>
		case 3:
			RTOS_semaphoreInit((RTOS_semaphore_t*) svc_args[0], (int32_t)svc_args[1]);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	461a      	mov	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	3304      	adds	r3, #4
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4619      	mov	r1, r3
 800049a:	4610      	mov	r0, r2
 800049c:	f000 f98a 	bl	80007b4 <RTOS_semaphoreInit>
			break;
 80004a0:	e00d      	b.n	80004be <RTOS_SVC_Handler_Main+0xa2>
		case 4:
			RTOS_semaphoreWait((RTOS_semaphore_t*) svc_args[0]);
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 f994 	bl	80007d4 <RTOS_semaphoreWait>
			break;
 80004ac:	e007      	b.n	80004be <RTOS_SVC_Handler_Main+0xa2>
		case 5:
			RTOS_semaphoreSignal((RTOS_semaphore_t*) svc_args[0]);
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4618      	mov	r0, r3
 80004b4:	f000 f9c8 	bl	8000848 <RTOS_semaphoreSignal>
			break;
 80004b8:	e001      	b.n	80004be <RTOS_SVC_Handler_Main+0xa2>
  __ASM volatile ("cpsid i" : : : "memory");
 80004ba:	b672      	cpsid	i
		/* Unsupported supervisor call */
		default:
			ASSERT(0)
 80004bc:	e7fe      	b.n	80004bc <RTOS_SVC_Handler_Main+0xa0>
			break;
	}
}
 80004be:	bf00      	nop
 80004c0:	3710      	adds	r7, #16
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop

080004c8 <RTOS_FIFOInit>:
 *  pFIFO -> Pointer to the FIFO queue
 * Return:
 * 	None
 */
void RTOS_FIFOInit(RTOS_FIFO_t* pFIFO)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	ASSERT(pFIFO != NULL);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d101      	bne.n	80004da <RTOS_FIFOInit+0x12>
 80004d6:	b672      	cpsid	i
 80004d8:	e7fe      	b.n	80004d8 <RTOS_FIFOInit+0x10>

	/* Set the the indices as end item */
	pFIFO->pPut = (RTOS_listItem_t*) &(pFIFO->endItem);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	f103 0208 	add.w	r2, r3, #8
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	601a      	str	r2, [r3, #0]
	pFIFO->pGet = (RTOS_listItem_t*) &(pFIFO->endItem);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f103 0208 	add.w	r2, r3, #8
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	605a      	str	r2, [r3, #4]

	/* Set the next and previous of the end item as itself */
	pFIFO->endItem.pNext = (RTOS_listItem_t*) &(pFIFO->endItem);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f103 0208 	add.w	r2, r3, #8
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	609a      	str	r2, [r3, #8]
	pFIFO->endItem.pPrev = (RTOS_listItem_t*) &(pFIFO->endItem);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f103 0208 	add.w	r2, r3, #8
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	60da      	str	r2, [r3, #12]

	/* Set the number of items in the list to zero */
	pFIFO->numFIFOItems = 0;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2200      	movs	r2, #0
 8000506:	611a      	str	r2, [r3, #16]
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <RTOS_FIFOAppend>:
 *  pFIFO -> Pointer to the FIFO queue
 * Return:
 * 	None
 */
void RTOS_FIFOAppend(RTOS_FIFO_t* pFIFO, RTOS_listItem_t* pListItem)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	6039      	str	r1, [r7, #0]
	ASSERT(pFIFO != NULL);
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d101      	bne.n	8000528 <RTOS_FIFOAppend+0x14>
 8000524:	b672      	cpsid	i
 8000526:	e7fe      	b.n	8000526 <RTOS_FIFOAppend+0x12>
	ASSERT(pListItem != NULL);
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d101      	bne.n	8000532 <RTOS_FIFOAppend+0x1e>
 800052e:	b672      	cpsid	i
 8000530:	e7fe      	b.n	8000530 <RTOS_FIFOAppend+0x1c>

	/* Make the next of the new item the next of the current index item of list */
	pListItem->pNext = pFIFO->pPut->pNext;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	681a      	ldr	r2, [r3, #0]
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	601a      	str	r2, [r3, #0]
	/* Make the previous of the new item the current index item of the list */
	pListItem->pPrev = pFIFO->pPut;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	605a      	str	r2, [r3, #4]
	/* Make the previous of the item that was the next the new item */
	pListItem->pNext->pPrev = pListItem;
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	683a      	ldr	r2, [r7, #0]
 800054a:	605a      	str	r2, [r3, #4]
	/* Make the next item of the current index item the new list item */
	pFIFO->pPut->pNext = pListItem;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	601a      	str	r2, [r3, #0]
	/* Update the current index to the new item */
	pFIFO->pPut = pListItem;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	601a      	str	r2, [r3, #0]
	/* Set the list of the new item as the FIFO */
	pListItem->pList = pFIFO;
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	609a      	str	r2, [r3, #8]
	/* Increment the number of items in the FIFO */
	pFIFO->numFIFOItems++;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	691b      	ldr	r3, [r3, #16]
 8000564:	1c5a      	adds	r2, r3, #1
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	611a      	str	r2, [r3, #16]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <RTOS_FIFORemove>:
 *  pFIFO -> Pointer to the FIFO queue
 * Return:
 * 	FIFO queue removed item
 */
RTOS_listItem_t* RTOS_FIFORemove(RTOS_FIFO_t* pFIFO)
{
 8000576:	b480      	push	{r7}
 8000578:	b085      	sub	sp, #20
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
	ASSERT(pFIFO != NULL);
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d101      	bne.n	8000588 <RTOS_FIFORemove+0x12>
 8000584:	b672      	cpsid	i
 8000586:	e7fe      	b.n	8000586 <RTOS_FIFORemove+0x10>
	ASSERT(pFIFO->numFIFOItems > 0);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	691b      	ldr	r3, [r3, #16]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d101      	bne.n	8000594 <RTOS_FIFORemove+0x1e>
 8000590:	b672      	cpsid	i
 8000592:	e7fe      	b.n	8000592 <RTOS_FIFORemove+0x1c>

	// Do not remove end item
	if(pFIFO->pGet == (RTOS_listItem_t*) &(pFIFO->endItem))
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	685a      	ldr	r2, [r3, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	3308      	adds	r3, #8
 800059c:	429a      	cmp	r2, r3
 800059e:	d104      	bne.n	80005aa <RTOS_FIFORemove+0x34>
	{
		pFIFO->pGet = pFIFO->pGet->pNext;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	605a      	str	r2, [r3, #4]
	else
	{

	}

	RTOS_listItem_t* pListItem = pFIFO->pGet;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	60fb      	str	r3, [r7, #12]

	/* Make the next of previous item the next item */
	pListItem->pPrev->pNext = pListItem->pNext;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	68fa      	ldr	r2, [r7, #12]
 80005b6:	6812      	ldr	r2, [r2, #0]
 80005b8:	601a      	str	r2, [r3, #0]
	/* Make the previous of the next item the previous item */
	pListItem->pNext->pPrev = pListItem->pPrev;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	68fa      	ldr	r2, [r7, #12]
 80005c0:	6852      	ldr	r2, [r2, #4]
 80005c2:	605a      	str	r2, [r3, #4]

	pFIFO->pGet = pFIFO->pGet->pNext;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	605a      	str	r2, [r3, #4]

	pListItem->pList = NULL;
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]

	pFIFO->numFIFOItems--;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	691b      	ldr	r3, [r3, #16]
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	611a      	str	r2, [r3, #16]

	/* Handle the case where the FIFO became empty */
	if(pFIFO->numFIFOItems == 0)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	691b      	ldr	r3, [r3, #16]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d108      	bne.n	80005f8 <RTOS_FIFORemove+0x82>
	{
		pFIFO->pPut = (RTOS_listItem_t*) &(pFIFO->endItem);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f103 0208 	add.w	r2, r3, #8
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	601a      	str	r2, [r3, #0]
		pFIFO->pGet = pFIFO->pPut;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	605a      	str	r2, [r3, #4]
	else
	{

	}

	return pListItem;
 80005f8:	68fb      	ldr	r3, [r7, #12]

}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <RTOS_listInit>:
 * 	pList -> The RTOS list
 * Return:
 * 	None
 */
void RTOS_listInit(RTOS_list_t* pList)
{
 8000606:	b480      	push	{r7}
 8000608:	b083      	sub	sp, #12
 800060a:	af00      	add	r7, sp, #0
 800060c:	6078      	str	r0, [r7, #4]
	ASSERT(pList != NULL);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d101      	bne.n	8000618 <RTOS_listInit+0x12>
 8000614:	b672      	cpsid	i
 8000616:	e7fe      	b.n	8000616 <RTOS_listInit+0x10>

	/* Set the the current index as end item */
	pList->pIndex = (RTOS_listItem_t*) &(pList->endItem);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	1d1a      	adds	r2, r3, #4
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	601a      	str	r2, [r3, #0]

	/* Set the next and previous of the end item as itself */
	pList->endItem.pNext = (RTOS_listItem_t*) &(pList->endItem);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	1d1a      	adds	r2, r3, #4
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	605a      	str	r2, [r3, #4]
	pList->endItem.pPrev = (RTOS_listItem_t*) &(pList->endItem);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	1d1a      	adds	r2, r3, #4
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	609a      	str	r2, [r3, #8]

	/* Set the number of items in the list to zero */
	pList->numListItems = 0;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr

08000642 <RTOS_listAppend>:
 * 	pListItem -> The RTOS list item to be inserted
 * Return:
 * 	None
 */
void RTOS_listAppend(RTOS_list_t* pList, RTOS_listItem_t* pListItem)
{
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
 800064a:	6039      	str	r1, [r7, #0]
	ASSERT(pList != NULL);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d101      	bne.n	8000656 <RTOS_listAppend+0x14>
 8000652:	b672      	cpsid	i
 8000654:	e7fe      	b.n	8000654 <RTOS_listAppend+0x12>
	ASSERT(pListItem != NULL);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d101      	bne.n	8000660 <RTOS_listAppend+0x1e>
 800065c:	b672      	cpsid	i
 800065e:	e7fe      	b.n	800065e <RTOS_listAppend+0x1c>

	/* Make the next of the new item the next of the current index item of list */
	pListItem->pNext = pList->pIndex->pNext;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	681a      	ldr	r2, [r3, #0]
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	601a      	str	r2, [r3, #0]
	/* Make the previous of the new item the current index item of the list */
	pListItem->pPrev = pList->pIndex;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681a      	ldr	r2, [r3, #0]
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	605a      	str	r2, [r3, #4]
	/* Make the previous of the item that was the next the new item */
	pListItem->pNext->pPrev = pListItem;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	683a      	ldr	r2, [r7, #0]
 8000678:	605a      	str	r2, [r3, #4]
	/* Make the next item of the current index item the new list item */
	pList->pIndex->pNext = pListItem;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	601a      	str	r2, [r3, #0]
	/* Update the current index to the new item */
	pList->pIndex = pListItem;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	683a      	ldr	r2, [r7, #0]
 8000686:	601a      	str	r2, [r3, #0]
	/* Set the list of the new item as the list */
	pListItem->pList = pList;
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	687a      	ldr	r2, [r7, #4]
 800068c:	609a      	str	r2, [r3, #8]
	/* Increment the number of items in the list */
	pList->numListItems++;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	1c5a      	adds	r2, r3, #1
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	60da      	str	r2, [r3, #12]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr

080006a4 <RTOS_listRemove>:
 * 	pListItem -> The RTOS list item to be removed
 * Return:
 * 	None
 */
void RTOS_listRemove(RTOS_listItem_t* pListItem)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	ASSERT(pListItem != NULL);
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d101      	bne.n	80006b6 <RTOS_listRemove+0x12>
 80006b2:	b672      	cpsid	i
 80006b4:	e7fe      	b.n	80006b4 <RTOS_listRemove+0x10>
	RTOS_list_t* pList = pListItem->pList;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	60fb      	str	r3, [r7, #12]
	ASSERT(pListItem != (RTOS_listItem_t*) &pList->endItem);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	1d1a      	adds	r2, r3, #4
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d101      	bne.n	80006ca <RTOS_listRemove+0x26>
 80006c6:	b672      	cpsid	i
 80006c8:	e7fe      	b.n	80006c8 <RTOS_listRemove+0x24>

	/* Make the next of previous item the next item */
	pListItem->pPrev->pNext = pListItem->pNext;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	685b      	ldr	r3, [r3, #4]
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	6812      	ldr	r2, [r2, #0]
 80006d2:	601a      	str	r2, [r3, #0]
	/* Make the previous of the next item the previous item */
	pListItem->pNext->pPrev = pListItem->pPrev;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	6852      	ldr	r2, [r2, #4]
 80006dc:	605a      	str	r2, [r3, #4]
	/* Check if the removed item is the index of the list */
	if(pListItem == pList->pIndex)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d103      	bne.n	80006f0 <RTOS_listRemove+0x4c>
	{
		/* Make the previous item the new index */
		pList->pIndex = pListItem->pPrev;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	685a      	ldr	r2, [r3, #4]
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	601a      	str	r2, [r3, #0]
	}
	else
	{

	}
	pListItem->pList = NULL;
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
	/* Increment the number of items in the list */
	pList->numListItems--;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	1e5a      	subs	r2, r3, #1
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	60da      	str	r2, [r3, #12]
}
 8000700:	bf00      	nop
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <RTOS_idleThreadFunc>:
 * 	None
 * Return:
 * 	None
 */
static void RTOS_idleThreadFunc(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
	while(1);
 8000710:	e7fe      	b.n	8000710 <RTOS_idleThreadFunc+0x4>
	...

08000714 <RTOS_schedulerStart>:
 * 	None
 * Return:
 * 	None
 */
void RTOS_schedulerStart(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
	/* Create the idle thread */
	RTOS_threadCreate(&RTOS_idleThread, &RTOS_idleThreadStack, RTOS_idleThreadFunc, MAX_PRIORITY_LEVEL - 1);
 800071a:	230f      	movs	r3, #15
 800071c:	4a15      	ldr	r2, [pc, #84]	; (8000774 <RTOS_schedulerStart+0x60>)
 800071e:	4916      	ldr	r1, [pc, #88]	; (8000778 <RTOS_schedulerStart+0x64>)
 8000720:	4816      	ldr	r0, [pc, #88]	; (800077c <RTOS_schedulerStart+0x68>)
 8000722:	f000 f8f9 	bl	8000918 <RTOS_threadCreate>

	/* Switch to the top priority ready thread */
	RTOS_threadSwitch();
 8000726:	f000 f9ab 	bl	8000a80 <RTOS_threadSwitch>

	/* Get the new ready thread */
	RTOS_thread_t* pNewRunningThread = RTOS_threadGetRunning();
 800072a:	f000 f971 	bl	8000a10 <RTOS_threadGetRunning>
 800072e:	60f8      	str	r0, [r7, #12]

	/* Set the exception return value */
	RTOS_SVC_excReturn = MEM32WORD(pNewRunningThread->pStack);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <RTOS_schedulerStart+0x6c>)
 8000738:	6013      	str	r3, [r2, #0]

	/* Set the Process Stack Pointer */
	__set_PSP(pNewRunningThread->pStack + 10 * 4);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	3328      	adds	r3, #40	; 0x28
 8000740:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	f383 8809 	msr	PSP, r3

	/* Set the control register */
	__set_CONTROL(MEM32WORD(pNewRunningThread->pStack + (1 << 2)));
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3304      	adds	r3, #4
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f383 8814 	msr	CONTROL, r3
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
 8000758:	f3bf 8f6f 	isb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed. */
	__ISB();

	/* Reset SysTick Count */
	RTOS_systickCount = 0;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <RTOS_schedulerStart+0x70>)
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	f383 8811 	msr	BASEPRI, r3

	/* Enable all interrupts */
	__set_BASEPRI(0);

}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	0800070d 	.word	0x0800070d
 8000778:	20000058 	.word	0x20000058
 800077c:	20000034 	.word	0x20000034
 8000780:	20002174 	.word	0x20002174
 8000784:	20002170 	.word	0x20002170

08000788 <RTOS_SysTick_Handler>:
 * 	None
 * Return:
 * 	None
 */
void RTOS_SysTick_Handler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
 	/* Check for threads to be unblocked */
 	RTOS_threadUnblock();
 800078c:	f000 f9ec 	bl	8000b68 <RTOS_threadUnblock>

	/* Invoke a pendSV exception */
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000790:	4a06      	ldr	r2, [pc, #24]	; (80007ac <RTOS_SysTick_Handler+0x24>)
 8000792:	4b06      	ldr	r3, [pc, #24]	; (80007ac <RTOS_SysTick_Handler+0x24>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079a:	6053      	str	r3, [r2, #4]

    /* Increment SysTick Count */
    RTOS_systickCount++;
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <RTOS_SysTick_Handler+0x28>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	3301      	adds	r3, #1
 80007a2:	4a03      	ldr	r2, [pc, #12]	; (80007b0 <RTOS_SysTick_Handler+0x28>)
 80007a4:	6013      	str	r3, [r2, #0]
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	e000ed00 	.word	0xe000ed00
 80007b0:	20002170 	.word	0x20002170

080007b4 <RTOS_semaphoreInit>:
 *  value -> Value to which the semaphore will be initialized
 * Return:
 * 	None
 */
void RTOS_semaphoreInit(RTOS_semaphore_t* pSemaphore, int32_t value)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]
	/* Initialize the semaphores' FIFO */
	RTOS_FIFOInit(&pSemaphore->semaphoreFIFO);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fe81 	bl	80004c8 <RTOS_FIFOInit>
	/* Set the semaphores' value */
	pSemaphore->value = value;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	615a      	str	r2, [r3, #20]
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <RTOS_semaphoreWait>:
 * Return:
 * 	None
 */

void RTOS_semaphoreWait(RTOS_semaphore_t* pSemaphore)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08a      	sub	sp, #40	; 0x28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
	/* Load the semaphore value */
	int32_t value = (int32_t)__LDREXW((uint32_t*) &pSemaphore->value);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3314      	adds	r3, #20
 80007e0:	613b      	str	r3, [r7, #16]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007e2:	693b      	ldr	r3, [r7, #16]
 80007e4:	e853 3f00 	ldrex	r3, [r3]
 80007e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
	/* Decrement the semaphore value */
	value --;
 80007ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f0:	3b01      	subs	r3, #1
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
	// Acquire the semaphore
	if( __STREXW(value,(uint32_t*) &pSemaphore->value) == 0)
 80007f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3314      	adds	r3, #20
 80007fa:	61fa      	str	r2, [r7, #28]
 80007fc:	61bb      	str	r3, [r7, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007fe:	69b9      	ldr	r1, [r7, #24]
 8000800:	69fa      	ldr	r2, [r7, #28]
 8000802:	e841 2300 	strex	r3, r2, [r1]
 8000806:	617b      	str	r3, [r7, #20]
   return(result);
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d102      	bne.n	8000814 <RTOS_semaphoreWait+0x40>
	{
		/* Check if the semaphore value is bigger than or equal zero */
		if(value >= 0)
 800080e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000810:	2b00      	cmp	r3, #0
 8000812:	da13      	bge.n	800083c <RTOS_semaphoreWait+0x68>
	else
	{

	}

	RTOS_listItem_t* runningItem = &(RTOS_threadGetRunning()->listItem);
 8000814:	f000 f8fc 	bl	8000a10 <RTOS_threadGetRunning>
 8000818:	4603      	mov	r3, r0
 800081a:	3308      	adds	r3, #8
 800081c:	623b      	str	r3, [r7, #32]

	/* Remove the thread from the ready list */
	RTOS_listRemove(runningItem);
 800081e:	6a38      	ldr	r0, [r7, #32]
 8000820:	f7ff ff40 	bl	80006a4 <RTOS_listRemove>

	/* Add the thread to the semaphores' FIFO */
	RTOS_FIFOAppend(&pSemaphore->semaphoreFIFO, runningItem);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	6a39      	ldr	r1, [r7, #32]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fe73 	bl	8000514 <RTOS_FIFOAppend>

	/* Invoke a pendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800082e:	4a05      	ldr	r2, [pc, #20]	; (8000844 <RTOS_semaphoreWait+0x70>)
 8000830:	4b04      	ldr	r3, [pc, #16]	; (8000844 <RTOS_semaphoreWait+0x70>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6053      	str	r3, [r2, #4]
 800083a:	e000      	b.n	800083e <RTOS_semaphoreWait+0x6a>
			return;
 800083c:	bf00      	nop
}
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <RTOS_semaphoreSignal>:
 *  pSemaphore -> Pointer to the semaphore
 * Return:
 * 	None
 */
void RTOS_semaphoreSignal(RTOS_semaphore_t* pSemaphore)
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b08b      	sub	sp, #44	; 0x2c
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	/* Load the semaphore value */
	int32_t value = (int32_t)__LDREXW((uint32_t*) &pSemaphore->value);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3314      	adds	r3, #20
 8000854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	e853 3f00 	ldrex	r3, [r3]
 800085c:	60bb      	str	r3, [r7, #8]
   return(result);
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
	/* Increment the semaphore value */
	value ++;
 8000862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000864:	3301      	adds	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
	// Acquire the semaphore
	if( __STREXW(value,(uint32_t*) &pSemaphore->value) == 0)
 8000868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	3314      	adds	r3, #20
 800086e:	61ba      	str	r2, [r7, #24]
 8000870:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000872:	6979      	ldr	r1, [r7, #20]
 8000874:	69ba      	ldr	r2, [r7, #24]
 8000876:	e841 2300 	strex	r3, r2, [r1]
 800087a:	613b      	str	r3, [r7, #16]
   return(result);
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d126      	bne.n	80008d0 <RTOS_semaphoreSignal+0x88>
	{
		/* Check if the semaphore value is less than or equal zero */
		if(value <= 0)
 8000882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000884:	2b00      	cmp	r3, #0
 8000886:	dc23      	bgt.n	80008d0 <RTOS_semaphoreSignal+0x88>
		{
			/* Remove a process from the FIFO */
			RTOS_listItem_t* pRemovedItem = RTOS_FIFORemove(&pSemaphore->semaphoreFIFO);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fe73 	bl	8000576 <RTOS_FIFORemove>
 8000890:	6238      	str	r0, [r7, #32]
			RTOS_thread_t* pRemovedThread = pRemovedItem->pThread;
 8000892:	6a3b      	ldr	r3, [r7, #32]
 8000894:	68db      	ldr	r3, [r3, #12]
 8000896:	61fb      	str	r3, [r7, #28]

			/* Place this thread in the ready list */
			RTOS_listAppend(RTOS_threadGetList(pRemovedThread->priority), pRemovedItem);
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f8c3 	bl	8000a28 <RTOS_threadGetList>
 80008a2:	4603      	mov	r3, r0
 80008a4:	6a39      	ldr	r1, [r7, #32]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff fecb 	bl	8000642 <RTOS_listAppend>

			/* Check if the thread has a new highest priority */
			if(pRemovedThread->priority < RTOS_threadGetTopPriority())
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	685c      	ldr	r4, [r3, #4]
 80008b0:	f000 f8da 	bl	8000a68 <RTOS_threadGetTopPriority>
 80008b4:	4603      	mov	r3, r0
 80008b6:	429c      	cmp	r4, r3
 80008b8:	d20a      	bcs.n	80008d0 <RTOS_semaphoreSignal+0x88>
			{
				/* Set the new top priority */
				RTOS_threadSetTopPriority(pRemovedThread->priority);
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 f8c2 	bl	8000a48 <RTOS_threadSetTopPriority>
				/* Invoke a pendSV exception */
				SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80008c4:	4a04      	ldr	r2, [pc, #16]	; (80008d8 <RTOS_semaphoreSignal+0x90>)
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <RTOS_semaphoreSignal+0x90>)
 80008c8:	685b      	ldr	r3, [r3, #4]
 80008ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ce:	6053      	str	r3, [r2, #4]
		else
		{

		}
	}
}
 80008d0:	bf00      	nop
 80008d2:	372c      	adds	r7, #44	; 0x2c
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <RTOS_threadReadyListsInit>:
 *  None
 * Return:
 * 	None
 */
void RTOS_threadReadyListsInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
	/* Initialize the ready lists */
	uint32_t i;
	for(i = 0; i < MAX_PRIORITY_LEVEL; i++)
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
 80008e6:	e009      	b.n	80008fc <RTOS_threadReadyListsInit+0x20>
		RTOS_listInit(&RTOS_readyList[i]);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	011b      	lsls	r3, r3, #4
 80008ec:	4a08      	ldr	r2, [pc, #32]	; (8000910 <RTOS_threadReadyListsInit+0x34>)
 80008ee:	4413      	add	r3, r2
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff fe88 	bl	8000606 <RTOS_listInit>
	for(i = 0; i < MAX_PRIORITY_LEVEL; i++)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3301      	adds	r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b0f      	cmp	r3, #15
 8000900:	d9f2      	bls.n	80008e8 <RTOS_threadReadyListsInit+0xc>

	/* Initialize the delayed list */
	RTOS_listInit(&RTOS_delayList);
 8000902:	4804      	ldr	r0, [pc, #16]	; (8000914 <RTOS_threadReadyListsInit+0x38>)
 8000904:	f7ff fe7f 	bl	8000606 <RTOS_listInit>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	2000205c 	.word	0x2000205c
 8000914:	2000215c 	.word	0x2000215c

08000918 <RTOS_threadCreate>:
 * 	priority -> The thread priority level
 * Return:
 * 	None
 */
void RTOS_threadCreate(RTOS_thread_t* pThread, RTOS_stack_t* pStack, void* pFunction, uint32_t priority)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
 8000924:	603b      	str	r3, [r7, #0]
	ASSERT(pThread != NULL);
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d101      	bne.n	8000930 <RTOS_threadCreate+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800092c:	b672      	cpsid	i
 800092e:	e7fe      	b.n	800092e <RTOS_threadCreate+0x16>
	ASSERT(pStack != NULL);
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d101      	bne.n	800093a <RTOS_threadCreate+0x22>
 8000936:	b672      	cpsid	i
 8000938:	e7fe      	b.n	8000938 <RTOS_threadCreate+0x20>
	ASSERT(pFunction != NULL);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d101      	bne.n	8000944 <RTOS_threadCreate+0x2c>
 8000940:	b672      	cpsid	i
 8000942:	e7fe      	b.n	8000942 <RTOS_threadCreate+0x2a>
	ASSERT((priority < MAX_PRIORITY_LEVEL) && (priority >= 0));
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	2b0f      	cmp	r3, #15
 8000948:	d901      	bls.n	800094e <RTOS_threadCreate+0x36>
 800094a:	b672      	cpsid	i
 800094c:	e7fe      	b.n	800094c <RTOS_threadCreate+0x34>
	 * PC
	 * xPSR
	 */

	/* Initialize the stack pointer */
	pThread->pStack = (uint32_t)pStack->stack + MAX_STACK_SIZE * 8 - 18 * 4;
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	f503 53fd 	add.w	r3, r3, #8096	; 0x1fa0
 8000954:	3318      	adds	r3, #24
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	6013      	str	r3, [r2, #0]

	/* Initialize EXC_RETURN (Return to thread mode using PSP) */
	MEM32WORD(pThread->pStack) = 0xFFFFFFFDUL;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	f06f 0302 	mvn.w	r3, #2
 8000964:	6013      	str	r3, [r2, #0]

	/* Initialize the CONTROL Register (No FPU, PSP, Unprivileged mode)*/
	MEM32WORD(pThread->pStack + (1 << 2)) = 0x3;
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	3304      	adds	r3, #4
 800096c:	461a      	mov	r2, r3
 800096e:	2303      	movs	r3, #3
 8000970:	6013      	str	r3, [r2, #0]

	/* Initialize the program counter */
	MEM32WORD(pThread->pStack + (16 << 2)) = (uint32_t)pFunction;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3340      	adds	r3, #64	; 0x40
 8000978:	461a      	mov	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6013      	str	r3, [r2, #0]

	/* Initialize the xPSR register to only Thumb mode*/
	MEM32WORD(pThread->pStack + (17 << 2)) = 0x01000000;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3344      	adds	r3, #68	; 0x44
 8000984:	461a      	mov	r2, r3
 8000986:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800098a:	6013      	str	r3, [r2, #0]

	/* Set the priority level */
	pThread->priority = priority;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	683a      	ldr	r2, [r7, #0]
 8000990:	605a      	str	r2, [r3, #4]

	/* Clear the delay amount */
	pThread->delay_systicks = 0;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	2200      	movs	r2, #0
 8000996:	61da      	str	r2, [r3, #28]

	/* Set thread ID */
	pThread->threadId = numThreads;
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <RTOS_threadCreate+0xe4>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	619a      	str	r2, [r3, #24]
	numThreads++;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <RTOS_threadCreate+0xe4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	3301      	adds	r3, #1
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <RTOS_threadCreate+0xe4>)
 80009a8:	6013      	str	r3, [r2, #0]

	/* Set the thread's list item thread pointer */
	pThread->listItem.pThread = pThread;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	615a      	str	r2, [r3, #20]

	/* Add the thread to the ready list */
	RTOS_listAppend(&RTOS_readyList[priority], &pThread->listItem);
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	011b      	lsls	r3, r3, #4
 80009b4:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <RTOS_threadCreate+0xe8>)
 80009b6:	441a      	add	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	3308      	adds	r3, #8
 80009bc:	4619      	mov	r1, r3
 80009be:	4610      	mov	r0, r2
 80009c0:	f7ff fe3f 	bl	8000642 <RTOS_listAppend>

	/* Check if the new thread has a new highest priority */
	if(priority < currentTopPriority)
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <RTOS_threadCreate+0xec>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	683a      	ldr	r2, [r7, #0]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	d202      	bcs.n	80009d4 <RTOS_threadCreate+0xbc>
	{
		currentTopPriority = priority;
 80009ce:	4a0d      	ldr	r2, [pc, #52]	; (8000a04 <RTOS_threadCreate+0xec>)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	6013      	str	r3, [r2, #0]
	{

	}

	/* Check if the scheduler has started and the currently running thread has a lower priority */
	if((pCurrentlyRunningThread != NULL) && (priority < pCurrentlyRunningThread->priority))
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <RTOS_threadCreate+0xf0>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d00b      	beq.n	80009f4 <RTOS_threadCreate+0xdc>
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <RTOS_threadCreate+0xf0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	685a      	ldr	r2, [r3, #4]
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	d905      	bls.n	80009f4 <RTOS_threadCreate+0xdc>
	{
		/* Invoke a pendSV exception */
	    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80009e8:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <RTOS_threadCreate+0xf4>)
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <RTOS_threadCreate+0xf4>)
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f2:	6053      	str	r3, [r2, #4]
	else
	{

	}

}
 80009f4:	bf00      	nop
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	2000216c 	.word	0x2000216c
 8000a00:	2000205c 	.word	0x2000205c
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20002058 	.word	0x20002058
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <RTOS_threadGetRunning>:
 *  None
 * Return:
 * 	Pointer to the running thread
 */
RTOS_thread_t* RTOS_threadGetRunning(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
	return pCurrentlyRunningThread;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <RTOS_threadGetRunning+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20002058 	.word	0x20002058

08000a28 <RTOS_threadGetList>:
 *  priority -> Required Priority
 * Return:
 * 	Pointer to the the list
 */
RTOS_list_t* RTOS_threadGetList(uint32_t priority)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	return &RTOS_readyList[priority];
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	011b      	lsls	r3, r3, #4
 8000a34:	4a03      	ldr	r2, [pc, #12]	; (8000a44 <RTOS_threadGetList+0x1c>)
 8000a36:	4413      	add	r3, r2
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	2000205c 	.word	0x2000205c

08000a48 <RTOS_threadSetTopPriority>:
 *  priority -> The new top priority
 * Return:
 * 	Current top priority in the system
 */
void RTOS_threadSetTopPriority(uint32_t priority)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	currentTopPriority = priority;
 8000a50:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <RTOS_threadSetTopPriority+0x1c>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000000 	.word	0x20000000

08000a68 <RTOS_threadGetTopPriority>:
 *  None
 * Return:
 * 	Current top priority in the system
 */
uint32_t RTOS_threadGetTopPriority(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
	return currentTopPriority;
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <RTOS_threadGetTopPriority+0x14>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	20000000 	.word	0x20000000

08000a80 <RTOS_threadSwitch>:
 *  None
 * Return:
 * 	None
 */
void RTOS_threadSwitch(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
	/* Check if the current top priority list became empty */
	while(RTOS_readyList[currentTopPriority].numListItems == 0)
 8000a84:	e004      	b.n	8000a90 <RTOS_threadSwitch+0x10>
	{
		currentTopPriority++;
 8000a86:	4b22      	ldr	r3, [pc, #136]	; (8000b10 <RTOS_threadSwitch+0x90>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	4a20      	ldr	r2, [pc, #128]	; (8000b10 <RTOS_threadSwitch+0x90>)
 8000a8e:	6013      	str	r3, [r2, #0]
	while(RTOS_readyList[currentTopPriority].numListItems == 0)
 8000a90:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <RTOS_threadSwitch+0x90>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a1f      	ldr	r2, [pc, #124]	; (8000b14 <RTOS_threadSwitch+0x94>)
 8000a96:	011b      	lsls	r3, r3, #4
 8000a98:	4413      	add	r3, r2
 8000a9a:	330c      	adds	r3, #12
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f1      	beq.n	8000a86 <RTOS_threadSwitch+0x6>
	}

	/* Get the next thread in the list */
	RTOS_readyList[currentTopPriority].pIndex = RTOS_readyList[currentTopPriority].pIndex->pNext;
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <RTOS_threadSwitch+0x90>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a1a      	ldr	r2, [pc, #104]	; (8000b10 <RTOS_threadSwitch+0x90>)
 8000aa8:	6812      	ldr	r2, [r2, #0]
 8000aaa:	491a      	ldr	r1, [pc, #104]	; (8000b14 <RTOS_threadSwitch+0x94>)
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	440a      	add	r2, r1
 8000ab0:	6812      	ldr	r2, [r2, #0]
 8000ab2:	6812      	ldr	r2, [r2, #0]
 8000ab4:	4917      	ldr	r1, [pc, #92]	; (8000b14 <RTOS_threadSwitch+0x94>)
 8000ab6:	011b      	lsls	r3, r3, #4
 8000ab8:	440b      	add	r3, r1
 8000aba:	601a      	str	r2, [r3, #0]

	/* Check if the current index is the end item */
	if(RTOS_readyList[currentTopPriority].pIndex == (RTOS_listItem_t*) &RTOS_readyList[currentTopPriority].endItem)
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <RTOS_threadSwitch+0x90>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <RTOS_threadSwitch+0x94>)
 8000ac2:	011b      	lsls	r3, r3, #4
 8000ac4:	4413      	add	r3, r2
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <RTOS_threadSwitch+0x90>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	011b      	lsls	r3, r3, #4
 8000ace:	4911      	ldr	r1, [pc, #68]	; (8000b14 <RTOS_threadSwitch+0x94>)
 8000ad0:	440b      	add	r3, r1
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d10c      	bne.n	8000af2 <RTOS_threadSwitch+0x72>
	{
		/* Increment the index */
		RTOS_readyList[currentTopPriority].pIndex = RTOS_readyList[currentTopPriority].pIndex->pNext;
 8000ad8:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <RTOS_threadSwitch+0x90>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a0c      	ldr	r2, [pc, #48]	; (8000b10 <RTOS_threadSwitch+0x90>)
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	490c      	ldr	r1, [pc, #48]	; (8000b14 <RTOS_threadSwitch+0x94>)
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	440a      	add	r2, r1
 8000ae6:	6812      	ldr	r2, [r2, #0]
 8000ae8:	6812      	ldr	r2, [r2, #0]
 8000aea:	490a      	ldr	r1, [pc, #40]	; (8000b14 <RTOS_threadSwitch+0x94>)
 8000aec:	011b      	lsls	r3, r3, #4
 8000aee:	440b      	add	r3, r1
 8000af0:	601a      	str	r2, [r3, #0]
	}

	pCurrentlyRunningThread = RTOS_readyList[currentTopPriority].pIndex->pThread;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <RTOS_threadSwitch+0x90>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <RTOS_threadSwitch+0x94>)
 8000af8:	011b      	lsls	r3, r3, #4
 8000afa:	4413      	add	r3, r2
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	4a05      	ldr	r2, [pc, #20]	; (8000b18 <RTOS_threadSwitch+0x98>)
 8000b02:	6013      	str	r3, [r2, #0]

}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000000 	.word	0x20000000
 8000b14:	2000205c 	.word	0x2000205c
 8000b18:	20002058 	.word	0x20002058

08000b1c <RTOS_threadDelay>:
 *  systicks -> Number of system ticks to be delayed
 * Return:
 * 	None
 */
void RTOS_threadDelay(uint32_t systicks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	/* Remove the current thread from ready list */
	RTOS_listRemove(&pCurrentlyRunningThread->listItem);
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <RTOS_threadDelay+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3308      	adds	r3, #8
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f7ff fdba 	bl	80006a4 <RTOS_listRemove>

	/* Set the delay amount */
	pCurrentlyRunningThread->delay_systicks = systicks;
 8000b30:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <RTOS_threadDelay+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	61da      	str	r2, [r3, #28]

	/* Add the thread to the delayed list */
	RTOS_listAppend(&RTOS_delayList, &pCurrentlyRunningThread->listItem);
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <RTOS_threadDelay+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	3308      	adds	r3, #8
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <RTOS_threadDelay+0x44>)
 8000b42:	f7ff fd7e 	bl	8000642 <RTOS_listAppend>

	/* Invoke a pendSV exception */
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000b46:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <RTOS_threadDelay+0x48>)
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <RTOS_threadDelay+0x48>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b50:	6053      	str	r3, [r2, #4]
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20002058 	.word	0x20002058
 8000b60:	2000215c 	.word	0x2000215c
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <RTOS_threadUnblock>:
 *  None
 * Return:
 * 	None
 */
void RTOS_threadUnblock(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
	/* Check for delayed threads */
	int i;
	RTOS_listItem_t* pCurrentItem = RTOS_delayList.pIndex;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <RTOS_threadUnblock+0x88>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < RTOS_delayList.numListItems + 1; i++)
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	e02f      	b.n	8000bda <RTOS_threadUnblock+0x72>
	{
		if(pCurrentItem != (RTOS_listItem_t*) &RTOS_delayList.endItem)
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	4a1d      	ldr	r2, [pc, #116]	; (8000bf4 <RTOS_threadUnblock+0x8c>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d025      	beq.n	8000bce <RTOS_threadUnblock+0x66>
		{
			RTOS_thread_t* pCurrentThread = pCurrentItem->pThread;
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	607b      	str	r3, [r7, #4]
			if(pCurrentThread->delay_systicks > 0)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	69db      	ldr	r3, [r3, #28]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d005      	beq.n	8000b9c <RTOS_threadUnblock+0x34>
			{
				pCurrentThread->delay_systicks--;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	69db      	ldr	r3, [r3, #28]
 8000b94:	1e5a      	subs	r2, r3, #1
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	61da      	str	r2, [r3, #28]
 8000b9a:	e018      	b.n	8000bce <RTOS_threadUnblock+0x66>
			}
			else
			{
				/* Remove the current thread from delay list */
				RTOS_listRemove(pCurrentItem);
 8000b9c:	68b8      	ldr	r0, [r7, #8]
 8000b9e:	f7ff fd81 	bl	80006a4 <RTOS_listRemove>

				/* Clear the delay amount */
				pCurrentThread->delay_systicks = 0;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]

				/* Check if the thread has a new highest priority */
				if(pCurrentThread->priority < currentTopPriority)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	685a      	ldr	r2, [r3, #4]
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <RTOS_threadUnblock+0x90>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	d203      	bcs.n	8000bbc <RTOS_threadUnblock+0x54>
				{
					currentTopPriority = pCurrentThread->priority;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	4a0f      	ldr	r2, [pc, #60]	; (8000bf8 <RTOS_threadUnblock+0x90>)
 8000bba:	6013      	str	r3, [r2, #0]
				{

				}

				/* Add the thread to the ready list */
				RTOS_listAppend(&RTOS_readyList[pCurrentThread->priority], pCurrentItem);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	011b      	lsls	r3, r3, #4
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <RTOS_threadUnblock+0x94>)
 8000bc4:	4413      	add	r3, r2
 8000bc6:	68b9      	ldr	r1, [r7, #8]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fd3a 	bl	8000642 <RTOS_listAppend>
			}
		}
		pCurrentItem = pCurrentItem->pNext;
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < RTOS_delayList.numListItems + 1; i++)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <RTOS_threadUnblock+0x88>)
 8000bdc:	68db      	ldr	r3, [r3, #12]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d8c9      	bhi.n	8000b7a <RTOS_threadUnblock+0x12>
	}
}
 8000be6:	bf00      	nop
 8000be8:	3710      	adds	r7, #16
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	2000215c 	.word	0x2000215c
 8000bf4:	20002160 	.word	0x20002160
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	2000205c 	.word	0x2000205c

08000c00 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b087      	sub	sp, #28
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
 8000c1a:	e076      	b.n	8000d0a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d165      	bne.n	8000d04 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	2103      	movs	r1, #3
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	401a      	ands	r2, r3
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	791b      	ldrb	r3, [r3, #4]
 8000c56:	4619      	mov	r1, r3
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c60:	431a      	orrs	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	791b      	ldrb	r3, [r3, #4]
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d003      	beq.n	8000c76 <GPIO_Init+0x76>
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	791b      	ldrb	r3, [r3, #4]
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d12e      	bne.n	8000cd4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	689a      	ldr	r2, [r3, #8]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2103      	movs	r1, #3
 8000c80:	fa01 f303 	lsl.w	r3, r1, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	401a      	ands	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689a      	ldr	r2, [r3, #8]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	795b      	ldrb	r3, [r3, #5]
 8000c94:	4619      	mov	r1, r3
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	431a      	orrs	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	4619      	mov	r1, r3
 8000cae:	2301      	movs	r3, #1
 8000cb0:	408b      	lsls	r3, r1
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	401a      	ands	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	7992      	ldrb	r2, [r2, #6]
 8000cc2:	4611      	mov	r1, r2
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	b292      	uxth	r2, r2
 8000cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ccc:	b292      	uxth	r2, r2
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2103      	movs	r1, #3
 8000ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	79db      	ldrb	r3, [r3, #7]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfe:	431a      	orrs	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	3301      	adds	r3, #1
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	2b0f      	cmp	r3, #15
 8000d0e:	d985      	bls.n	8000c1c <GPIO_Init+0x1c>
    }
  }
}
 8000d10:	bf00      	nop
 8000d12:	371c      	adds	r7, #28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr

08000d1c <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	695a      	ldr	r2, [r3, #20]
 8000d2c:	887b      	ldrh	r3, [r7, #2]
 8000d2e:	405a      	eors	r2, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	615a      	str	r2, [r3, #20]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d4c:	78fb      	ldrb	r3, [r7, #3]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d006      	beq.n	8000d60 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000d52:	490a      	ldr	r1, [pc, #40]	; (8000d7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000d5e:	e006      	b.n	8000d6e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000d60:	4906      	ldr	r1, [pc, #24]	; (8000d7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	40023800 	.word	0x40023800

08000d80 <func_1>:
RTOS_thread_t thread[2];
RTOS_stack_t stack[2];
RTOS_semaphore_t semaphore;

void func_1(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_ToggleBits(GPIOG, (1 << 13));
 8000d84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <func_1+0x20>)
 8000d8a:	f7ff ffc7 	bl	8000d1c <GPIO_ToggleBits>
		RTOS_SVC_threadDelay(500);
 8000d8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d92:	f7ff fa67 	bl	8000264 <RTOS_SVC_threadDelay>
		RTOS_SVC_semaphoreSignal(&semaphore);
 8000d96:	4803      	ldr	r0, [pc, #12]	; (8000da4 <func_1+0x24>)
 8000d98:	f7ff fa6a 	bl	8000270 <RTOS_SVC_semaphoreSignal>
		GPIO_ToggleBits(GPIOG, (1 << 13));
 8000d9c:	e7f2      	b.n	8000d84 <func_1+0x4>
 8000d9e:	bf00      	nop
 8000da0:	40021800 	.word	0x40021800
 8000da4:	20002178 	.word	0x20002178

08000da8 <func_2>:
	}
}

void func_2(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	while(1)
	{
		GPIO_ToggleBits(GPIOG, (1 << 14));
 8000dac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db0:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <func_2+0x18>)
 8000db2:	f7ff ffb3 	bl	8000d1c <GPIO_ToggleBits>
		RTOS_SVC_semaphoreWait(&semaphore);
 8000db6:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <func_2+0x1c>)
 8000db8:	f7ff fa58 	bl	800026c <RTOS_SVC_semaphoreWait>
		GPIO_ToggleBits(GPIOG, (1 << 14));
 8000dbc:	e7f6      	b.n	8000dac <func_2+0x4>
 8000dbe:	bf00      	nop
 8000dc0:	40021800 	.word	0x40021800
 8000dc4:	20002178 	.word	0x20002178

08000dc8 <main>:
	}
}

int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8000dce:	2101      	movs	r1, #1
 8000dd0:	2040      	movs	r0, #64	; 0x40
 8000dd2:	f7ff ffb5 	bl	8000d40 <RCC_AHB1PeriphClockCmd>
	GPIO_Init(GPIOG, &(GPIO_InitTypeDef){
 8000dd6:	4a10      	ldr	r2, [pc, #64]	; (8000e18 <main+0x50>)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dde:	e883 0003 	stmia.w	r3, {r0, r1}
 8000de2:	463b      	mov	r3, r7
 8000de4:	4619      	mov	r1, r3
 8000de6:	480d      	ldr	r0, [pc, #52]	; (8000e1c <main+0x54>)
 8000de8:	f7ff ff0a 	bl	8000c00 <GPIO_Init>
			GPIO_OType_PP,
			GPIO_PuPd_NOPULL
	  });


	RTOS_init();
 8000dec:	f7ff facc 	bl	8000388 <RTOS_init>

	RTOS_SVC_threadCreate(&thread[0], &stack[0], func_1, 1);
 8000df0:	2301      	movs	r3, #1
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <main+0x58>)
 8000df4:	490b      	ldr	r1, [pc, #44]	; (8000e24 <main+0x5c>)
 8000df6:	480c      	ldr	r0, [pc, #48]	; (8000e28 <main+0x60>)
 8000df8:	f7ff fa32 	bl	8000260 <RTOS_SVC_threadCreate>
	RTOS_SVC_threadCreate(&thread[1], &stack[1], func_2, 1);
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <main+0x64>)
 8000e00:	490b      	ldr	r1, [pc, #44]	; (8000e30 <main+0x68>)
 8000e02:	480c      	ldr	r0, [pc, #48]	; (8000e34 <main+0x6c>)
 8000e04:	f7ff fa2c 	bl	8000260 <RTOS_SVC_threadCreate>

	RTOS_SVC_semaphoreInit(&semaphore, 0);
 8000e08:	2100      	movs	r1, #0
 8000e0a:	480b      	ldr	r0, [pc, #44]	; (8000e38 <main+0x70>)
 8000e0c:	f7ff fa2c 	bl	8000268 <RTOS_SVC_semaphoreInit>

	RTOS_SVC_schedulerStart();
 8000e10:	f7ff fa24 	bl	800025c <RTOS_SVC_schedulerStart>

	while(1);
 8000e14:	e7fe      	b.n	8000e14 <main+0x4c>
 8000e16:	bf00      	nop
 8000e18:	08001180 	.word	0x08001180
 8000e1c:	40021800 	.word	0x40021800
 8000e20:	08000d81 	.word	0x08000d81
 8000e24:	200021d0 	.word	0x200021d0
 8000e28:	20002190 	.word	0x20002190
 8000e2c:	08000da9 	.word	0x08000da9
 8000e30:	200041d0 	.word	0x200041d0
 8000e34:	200021b0 	.word	0x200021b0
 8000e38:	20002178 	.word	0x20002178

08000e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e74 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e42:	e003      	b.n	8000e4c <LoopCopyDataInit>

08000e44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e4a:	3104      	adds	r1, #4

08000e4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e4c:	480b      	ldr	r0, [pc, #44]	; (8000e7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e54:	d3f6      	bcc.n	8000e44 <CopyDataInit>
  ldr  r2, =_sbss
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e58:	e002      	b.n	8000e60 <LoopFillZerobss>

08000e5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e5c:	f842 3b04 	str.w	r3, [r2], #4

08000e60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e64:	d3f9      	bcc.n	8000e5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e66:	f000 f82d 	bl	8000ec4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f000 f959 	bl	8001120 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6e:	f7ff ffab 	bl	8000dc8 <main>
  bx  lr    
 8000e72:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e74:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000e78:	08001190 	.word	0x08001190
  ldr  r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e80:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000e84:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000e88:	200061d0 	.word	0x200061d0

08000e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC_IRQHandler>

08000e8e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <HardFault_Handler+0x4>

08000ea2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <MemManage_Handler+0x4>

08000ea8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <BusFault_Handler+0x4>

08000eae <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <UsageFault_Handler+0x4>

08000eb4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4a16      	ldr	r2, [pc, #88]	; (8000f24 <SystemInit+0x60>)
 8000eca:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <SystemInit+0x60>)
 8000ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ed8:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <SystemInit+0x64>)
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <SystemInit+0x64>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ee4:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <SystemInit+0x64>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000eea:	4a0f      	ldr	r2, [pc, #60]	; (8000f28 <SystemInit+0x64>)
 8000eec:	4b0e      	ldr	r3, [pc, #56]	; (8000f28 <SystemInit+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <SystemInit+0x64>)
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <SystemInit+0x68>)
 8000efe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000f00:	4a09      	ldr	r2, [pc, #36]	; (8000f28 <SystemInit+0x64>)
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <SystemInit+0x64>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <SystemInit+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000f12:	f000 f889 	bl	8001028 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f16:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <SystemInit+0x60>)
 8000f18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f1c:	609a      	str	r2, [r3, #8]
#endif
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	24003010 	.word	0x24003010

08000f30 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	2302      	movs	r3, #2
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	2302      	movs	r3, #2
 8000f48:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000f4a:	4b32      	ldr	r3, [pc, #200]	; (8001014 <SystemCoreClockUpdate+0xe4>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	f003 030c 	and.w	r3, r3, #12
 8000f52:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	2b04      	cmp	r3, #4
 8000f58:	d007      	beq.n	8000f6a <SystemCoreClockUpdate+0x3a>
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d009      	beq.n	8000f72 <SystemCoreClockUpdate+0x42>
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d13d      	bne.n	8000fde <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000f62:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <SystemCoreClockUpdate+0xe8>)
 8000f64:	4a2d      	ldr	r2, [pc, #180]	; (800101c <SystemCoreClockUpdate+0xec>)
 8000f66:	601a      	str	r2, [r3, #0]
      break;
 8000f68:	e03d      	b.n	8000fe6 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000f6a:	4b2b      	ldr	r3, [pc, #172]	; (8001018 <SystemCoreClockUpdate+0xe8>)
 8000f6c:	4a2c      	ldr	r2, [pc, #176]	; (8001020 <SystemCoreClockUpdate+0xf0>)
 8000f6e:	601a      	str	r2, [r3, #0]
      break;
 8000f70:	e039      	b.n	8000fe6 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <SystemCoreClockUpdate+0xe4>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	0d9b      	lsrs	r3, r3, #22
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <SystemCoreClockUpdate+0xe4>)
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f86:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00c      	beq.n	8000fa8 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000f8e:	4a24      	ldr	r2, [pc, #144]	; (8001020 <SystemCoreClockUpdate+0xf0>)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f96:	4a1f      	ldr	r2, [pc, #124]	; (8001014 <SystemCoreClockUpdate+0xe4>)
 8000f98:	6852      	ldr	r2, [r2, #4]
 8000f9a:	0992      	lsrs	r2, r2, #6
 8000f9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	e00b      	b.n	8000fc0 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000fa8:	4a1c      	ldr	r2, [pc, #112]	; (800101c <SystemCoreClockUpdate+0xec>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb0:	4a18      	ldr	r2, [pc, #96]	; (8001014 <SystemCoreClockUpdate+0xe4>)
 8000fb2:	6852      	ldr	r2, [r2, #4]
 8000fb4:	0992      	lsrs	r2, r2, #6
 8000fb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000fba:	fb02 f303 	mul.w	r3, r2, r3
 8000fbe:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <SystemCoreClockUpdate+0xe4>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	0c1b      	lsrs	r3, r3, #16
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	3301      	adds	r3, #1
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd8:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <SystemCoreClockUpdate+0xe8>)
 8000fda:	6013      	str	r3, [r2, #0]
      break;
 8000fdc:	e003      	b.n	8000fe6 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <SystemCoreClockUpdate+0xe8>)
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <SystemCoreClockUpdate+0xec>)
 8000fe2:	601a      	str	r2, [r3, #0]
      break;
 8000fe4:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <SystemCoreClockUpdate+0xe4>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	091b      	lsrs	r3, r3, #4
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <SystemCoreClockUpdate+0xf4>)
 8000ff2:	5cd3      	ldrb	r3, [r2, r3]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <SystemCoreClockUpdate+0xe8>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8001002:	4a05      	ldr	r2, [pc, #20]	; (8001018 <SystemCoreClockUpdate+0xe8>)
 8001004:	6013      	str	r3, [r2, #0]
}
 8001006:	bf00      	nop
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	20000004 	.word	0x20000004
 800101c:	00f42400 	.word	0x00f42400
 8001020:	007a1200 	.word	0x007a1200
 8001024:	20000008 	.word	0x20000008

08001028 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001036:	4a36      	ldr	r2, [pc, #216]	; (8001110 <SetSysClock+0xe8>)
 8001038:	4b35      	ldr	r3, [pc, #212]	; (8001110 <SetSysClock+0xe8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001042:	4b33      	ldr	r3, [pc, #204]	; (8001110 <SetSysClock+0xe8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3301      	adds	r3, #1
 8001050:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d103      	bne.n	8001060 <SetSysClock+0x38>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800105e:	d1f0      	bne.n	8001042 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001060:	4b2b      	ldr	r3, [pc, #172]	; (8001110 <SetSysClock+0xe8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d002      	beq.n	8001072 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800106c:	2301      	movs	r3, #1
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	e001      	b.n	8001076 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d142      	bne.n	8001102 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800107c:	4a24      	ldr	r2, [pc, #144]	; (8001110 <SetSysClock+0xe8>)
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <SetSysClock+0xe8>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001086:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001088:	4a22      	ldr	r2, [pc, #136]	; (8001114 <SetSysClock+0xec>)
 800108a:	4b22      	ldr	r3, [pc, #136]	; (8001114 <SetSysClock+0xec>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001092:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001094:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <SetSysClock+0xe8>)
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <SetSysClock+0xe8>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800109c:	4a1c      	ldr	r2, [pc, #112]	; (8001110 <SetSysClock+0xe8>)
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <SetSysClock+0xe8>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80010a8:	4a19      	ldr	r2, [pc, #100]	; (8001110 <SetSysClock+0xe8>)
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <SetSysClock+0xe8>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80010b2:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <SetSysClock+0xe8>)
 80010b6:	4a18      	ldr	r2, [pc, #96]	; (8001118 <SetSysClock+0xf0>)
 80010b8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80010ba:	4a15      	ldr	r2, [pc, #84]	; (8001110 <SetSysClock+0xe8>)
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <SetSysClock+0xe8>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010c4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80010c6:	bf00      	nop
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <SetSysClock+0xe8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f9      	beq.n	80010c8 <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <SetSysClock+0xf4>)
 80010d6:	f240 7205 	movw	r2, #1797	; 0x705
 80010da:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80010dc:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <SetSysClock+0xe8>)
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <SetSysClock+0xe8>)
 80010e0:	689b      	ldr	r3, [r3, #8]
 80010e2:	f023 0303 	bic.w	r3, r3, #3
 80010e6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80010e8:	4a09      	ldr	r2, [pc, #36]	; (8001110 <SetSysClock+0xe8>)
 80010ea:	4b09      	ldr	r3, [pc, #36]	; (8001110 <SetSysClock+0xe8>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f043 0302 	orr.w	r3, r3, #2
 80010f2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 80010f4:	bf00      	nop
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <SetSysClock+0xe8>)
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f003 030c 	and.w	r3, r3, #12
 80010fe:	2b08      	cmp	r3, #8
 8001100:	d1f9      	bne.n	80010f6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40007000 	.word	0x40007000
 8001118:	07405a19 	.word	0x07405a19
 800111c:	40023c00 	.word	0x40023c00

08001120 <__libc_init_array>:
 8001120:	b570      	push	{r4, r5, r6, lr}
 8001122:	4e0d      	ldr	r6, [pc, #52]	; (8001158 <__libc_init_array+0x38>)
 8001124:	4c0d      	ldr	r4, [pc, #52]	; (800115c <__libc_init_array+0x3c>)
 8001126:	1ba4      	subs	r4, r4, r6
 8001128:	10a4      	asrs	r4, r4, #2
 800112a:	2500      	movs	r5, #0
 800112c:	42a5      	cmp	r5, r4
 800112e:	d109      	bne.n	8001144 <__libc_init_array+0x24>
 8001130:	4e0b      	ldr	r6, [pc, #44]	; (8001160 <__libc_init_array+0x40>)
 8001132:	4c0c      	ldr	r4, [pc, #48]	; (8001164 <__libc_init_array+0x44>)
 8001134:	f000 f818 	bl	8001168 <_init>
 8001138:	1ba4      	subs	r4, r4, r6
 800113a:	10a4      	asrs	r4, r4, #2
 800113c:	2500      	movs	r5, #0
 800113e:	42a5      	cmp	r5, r4
 8001140:	d105      	bne.n	800114e <__libc_init_array+0x2e>
 8001142:	bd70      	pop	{r4, r5, r6, pc}
 8001144:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001148:	4798      	blx	r3
 800114a:	3501      	adds	r5, #1
 800114c:	e7ee      	b.n	800112c <__libc_init_array+0xc>
 800114e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001152:	4798      	blx	r3
 8001154:	3501      	adds	r5, #1
 8001156:	e7f2      	b.n	800113e <__libc_init_array+0x1e>
 8001158:	08001188 	.word	0x08001188
 800115c:	08001188 	.word	0x08001188
 8001160:	08001188 	.word	0x08001188
 8001164:	0800118c 	.word	0x0800118c

08001168 <_init>:
 8001168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800116a:	bf00      	nop
 800116c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800116e:	bc08      	pop	{r3}
 8001170:	469e      	mov	lr, r3
 8001172:	4770      	bx	lr

08001174 <_fini>:
 8001174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001176:	bf00      	nop
 8001178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800117a:	bc08      	pop	{r3}
 800117c:	469e      	mov	lr, r3
 800117e:	4770      	bx	lr
