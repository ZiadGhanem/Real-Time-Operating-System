
Real Time Operating System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018c4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08001a70  08001a70  00011a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a84  08001a84  00011a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a88  08001a88  00011a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  08001a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
  7 .bss          00003244  20000020  20000020  00020020  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  20003264  20003264  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000a71d  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c13  00000000  00000000  0002a769  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000570  00000000  00000000  0002c380  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000448  00000000  00000000  0002c8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002ffa  00000000  00000000  0002cd38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000204f  00000000  00000000  0002fd32  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00031d81  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000012a0  00000000  00000000  00031e00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000020 	.word	0x20000020
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001a58 	.word	0x08001a58

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000024 	.word	0x20000024
 80001e8:	08001a58 	.word	0x08001a58

080001ec <RTOS_SVC_Handler>:

 .text

 .type RTOS_SVC_Handler, %function
 RTOS_SVC_Handler:
 	TST LR, #4
 80001ec:	f01e 0f04 	tst.w	lr, #4
	ITE EQ
 80001f0:	bf0c      	ite	eq
	MRSEQ R0, MSP
 80001f2:	f3ef 8008 	mrseq	r0, MSP
	MRSNE R0, PSP
 80001f6:	f3ef 8009 	mrsne	r0, PSP
	LDR R1, =RTOS_SVC_excReturn
 80001fa:	491b      	ldr	r1, [pc, #108]	; (8000268 <RTOS_PendSV_Handler+0x5c>)
	STR LR, [R1]
 80001fc:	f8c1 e000 	str.w	lr, [r1]
	BL RTOS_SVC_Handler_Main
 8000200:	f000 f928 	bl	8000454 <RTOS_SVC_Handler_Main>
	LDR R1, =RTOS_SVC_excReturn
 8000204:	4918      	ldr	r1, [pc, #96]	; (8000268 <RTOS_PendSV_Handler+0x5c>)
	LDR LR, [R1]
 8000206:	f8d1 e000 	ldr.w	lr, [r1]
	BX LR
 800020a:	4770      	bx	lr

0800020c <RTOS_PendSV_Handler>:

 .type RTOS_PendSV_Handler, %function
 RTOS_PendSV_Handler:
 	/****************** Saving the current task's context ********************/
 	/* Get PSP */
 	MRS R1, PSP
 800020c:	f3ef 8109 	mrs	r1, PSP
	/* Check if the currently running task uses FPU
	 * If so so push FPU registers (s16 - s32)
	**/
	TST LR, 0x10	/* Test bit 5 in LR, if it is zero then FPU is enabled */
 8000210:	f01e 0f10 	tst.w	lr, #16
	IT	EQ	/* If zero flag is cleared */
 8000214:	bf08      	it	eq
	VSTMDBEQ R1!, {S16-S31}
 8000216:	ed21 8a10 	vstmdbeq	r1!, {s16-s31}
	/* Save EXC_RETURN into R2 */
	MOV	R2, LR
 800021a:	4672      	mov	r2, lr
	/* Save CONTROL into R3 */
	MRS R3, CONTROL
 800021c:	f3ef 8314 	mrs	r3, CONTROL
	/* Instruction Synchronization Barrier */
	ISB
 8000220:	f3bf 8f6f 	isb	sy
	/* Push {R2 -> R11} into the task's stack*/
	STMDB R1!, {R2-R11}
 8000224:	e921 0ffc 	stmdb	r1!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
	/* Save the task's stack pointer */
	BL RTOS_taskGetRunning
 8000228:	f000 ffcc 	bl	80011c4 <RTOS_taskGetRunning>
	STR R1, [R0]
 800022c:	6001      	str	r1, [r0, #0]

	/****************** Switch tasks ********************/
	/* Disable all interrupts excepts SVC as PendSV can be interrupted */
	MOV R0, #1
 800022e:	f04f 0001 	mov.w	r0, #1
	MSR BASEPRI, R1
 8000232:	f381 8811 	msr	BASEPRI, r1
 	/* Get the next task */
 	BL RTOS_taskSwitch
 8000236:	f001 f82d 	bl	8001294 <RTOS_taskSwitch>
 	/* Enable all interrupts */
	MOV R0, #0
 800023a:	f04f 0000 	mov.w	r0, #0
	MSR BASEPRI, R0
 800023e:	f380 8811 	msr	BASEPRI, r0
 	/* Set the process stack pointer to the task's stack */
 	BL RTOS_taskGetRunning
 8000242:	f000 ffbf 	bl	80011c4 <RTOS_taskGetRunning>

	/****************** Restoring the next task's context ********************/
 	LDR R1, [R0]
 8000246:	6801      	ldr	r1, [r0, #0]
 	/* POP {R2 -> R11} from the task's stack*/
 	LDMIA R1!, {R2-R11}
 8000248:	e8b1 0ffc 	ldmia.w	r1!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 	/* Move R3 into CONTROL */
 	MSR CONTROL, R3
 800024c:	f383 8814 	msr	CONTROL, r3
 	/* Instruction Synchronization Barrier */
 	ISB
 8000250:	f3bf 8f6f 	isb	sy
 	/* MOVE R2 into Link Register */
 	MOV LR, R2
 8000254:	4696      	mov	lr, r2
 	/* Check if the currently running task uses FPU
	 * If so so pop FPU registers (s16 - s32)
	**/
	TST LR, 0x10	/* Test bit 5 in LR, if it is zero then FPU is enabled */
 8000256:	f01e 0f10 	tst.w	lr, #16
	IT	EQ	/* If zero flag is cleared */
 800025a:	bf08      	it	eq
	VLDMIAEQ R1!, {S16-S31}
 800025c:	ecb1 8a10 	vldmiaeq	r1!, {s16-s31}
	/* Save PSP */
	MSR PSP, R1
 8000260:	f381 8809 	msr	PSP, r1
	/* Return from interrupt */
	BX LR
 8000264:	4770      	bx	lr
 8000266:	0000      	.short	0x0000
	LDR R1, =RTOS_SVC_excReturn
 8000268:	20001194 	.word	0x20001194

0800026c <RTOS_SVC_schedulerStart>:

 .text

 .type RTOS_SVC_schedulerStart, %function
 RTOS_SVC_schedulerStart:
	SVC 0
 800026c:	df00      	svc	0
	BX LR
 800026e:	4770      	bx	lr

08000270 <RTOS_SVC_taskCreate>:

 .type RTOS_SVC_taskCreate, %function
 RTOS_SVC_taskCreate:
	SVC 1
 8000270:	df01      	svc	1
	BX LR
 8000272:	4770      	bx	lr

08000274 <RTOS_SVC_taskDelay>:

 .type RTOS_SVC_taskDelay, %function
 RTOS_SVC_taskDelay:
 	SVC 2
 8000274:	df02      	svc	2
 	BX LR
 8000276:	4770      	bx	lr

08000278 <RTOS_SVC_taskTerminate>:

 .type RTOS_SVC_taskTerminate, %function
 RTOS_SVC_taskTerminate:
 	SVC 3
 8000278:	df03      	svc	3
 	BX LR
 800027a:	4770      	bx	lr

0800027c <RTOS_SVC_semaphoreInit>:

 .type RTOS_SVC_semaphoreInit, %function
 RTOS_SVC_semaphoreInit:
 	SVC 4
 800027c:	df04      	svc	4
 	BX LR
 800027e:	4770      	bx	lr

08000280 <RTOS_SVC_semaphoreWait>:

 .type RTOS_SVC_semaphoreWait, %function
 RTOS_SVC_semaphoreWait:
 	SVC 5
 8000280:	df05      	svc	5
 	BX LR
 8000282:	4770      	bx	lr

08000284 <RTOS_SVC_semaphoreSignal>:

 .type RTOS_SVC_semaphoreSignal, %function
 RTOS_SVC_semaphoreSignal:
 	SVC 6
 8000284:	df06      	svc	6
 	BX LR
 8000286:	4770      	bx	lr

08000288 <RTOS_SVC_mutexInit>:

 .type RTOS_SVC_mutexInit, %function
 RTOS_SVC_mutexInit:
 	SVC 7
 8000288:	df07      	svc	7
 	BX LR
 800028a:	4770      	bx	lr

0800028c <RTOS_SVC_mutexLock>:

 .type RTOS_SVC_mutexLock, %function
 RTOS_SVC_mutexLock:
 	SVC 8
 800028c:	df08      	svc	8
 	BX LR
 800028e:	4770      	bx	lr

08000290 <RTOS_SVC_mutexUnlock>:

 .type RTOS_SVC_mutexUnlock, %function
 RTOS_SVC_mutexUnlock:
 	SVC 9
 8000290:	df09      	svc	9
 	BX LR
 8000292:	4770      	bx	lr

08000294 <RTOS_SVC_spinInit>:

 .type RTOS_SVC_spinInit, %function
 RTOS_SVC_spinInit:
 	SVC 10
 8000294:	df0a      	svc	10
 	BX LR
 8000296:	4770      	bx	lr

08000298 <RTOS_SVC_spinLock>:

 .type RTOS_SVC_spinLock, %function
 RTOS_SVC_spinLock:
 	SVC 11
 8000298:	df0b      	svc	11
 	BX LR
 800029a:	4770      	bx	lr

0800029c <RTOS_SVC_spinUnlock>:

 .type RTOS_SVC_spinUnlock, %function
 RTOS_SVC_spinUnlock:
 	SVC 12
 800029c:	df0c      	svc	12
 	BX LR
 800029e:	4770      	bx	lr

080002a0 <RTOS_SVC_mailBoxInit>:

 .type RTOS_SVC_mailBoxInit, %function
 RTOS_SVC_mailBoxInit:
 	SVC 13
 80002a0:	df0d      	svc	13
 	BX LR
 80002a2:	4770      	bx	lr

080002a4 <RTOS_SVC_mailBoxSend>:

 .type RTOS_SVC_mailBoxSend, %function
 RTOS_SVC_mailBoxSend:
 	SVC 14
 80002a4:	df0e      	svc	14
 	BX LR
 80002a6:	4770      	bx	lr

080002a8 <RTOS_SVC_mailBoxReceive>:

 .type RTOS_SVC_mailBoxReceive, %function
 RTOS_SVC_mailBoxReceive:
 	SVC 15
 80002a8:	df0f      	svc	15
 	BX LR
 80002aa:	4770      	bx	lr

080002ac <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f003 0307 	and.w	r3, r3, #7
 80002ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <NVIC_SetPriorityGrouping+0x44>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80002c2:	68ba      	ldr	r2, [r7, #8]
 80002c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c8:	4013      	ands	r3, r2
 80002ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 80002d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002de:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <NVIC_SetPriorityGrouping+0x44>)
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	60d3      	str	r3, [r2, #12]
}
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80002fe:	4909      	ldr	r1, [pc, #36]	; (8000324 <NVIC_EnableIRQ+0x30>)
 8000300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000304:	095b      	lsrs	r3, r3, #5
 8000306:	79fa      	ldrb	r2, [r7, #7]
 8000308:	f002 021f 	and.w	r2, r2, #31
 800030c:	2001      	movs	r0, #1
 800030e:	fa00 f202 	lsl.w	r2, r0, r2
 8000312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	e000e100 	.word	0xe000e100

08000328 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	6039      	str	r1, [r7, #0]
 8000332:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000338:	2b00      	cmp	r3, #0
 800033a:	da0b      	bge.n	8000354 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800033c:	490d      	ldr	r1, [pc, #52]	; (8000374 <NVIC_SetPriority+0x4c>)
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	f003 030f 	and.w	r3, r3, #15
 8000344:	3b04      	subs	r3, #4
 8000346:	683a      	ldr	r2, [r7, #0]
 8000348:	b2d2      	uxtb	r2, r2
 800034a:	0112      	lsls	r2, r2, #4
 800034c:	b2d2      	uxtb	r2, r2
 800034e:	440b      	add	r3, r1
 8000350:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000352:	e009      	b.n	8000368 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000354:	4908      	ldr	r1, [pc, #32]	; (8000378 <NVIC_SetPriority+0x50>)
 8000356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035a:	683a      	ldr	r2, [r7, #0]
 800035c:	b2d2      	uxtb	r2, r2
 800035e:	0112      	lsls	r2, r2, #4
 8000360:	b2d2      	uxtb	r2, r2
 8000362:	440b      	add	r3, r1
 8000364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	e000ed00 	.word	0xe000ed00
 8000378:	e000e100 	.word	0xe000e100

0800037c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3b01      	subs	r3, #1
 8000388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800038c:	d301      	bcc.n	8000392 <SysTick_Config+0x16>
 800038e:	2301      	movs	r3, #1
 8000390:	e00f      	b.n	80003b2 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <SysTick_Config+0x40>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	3b01      	subs	r3, #1
 8000398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800039a:	210f      	movs	r1, #15
 800039c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003a0:	f7ff ffc2 	bl	8000328 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <SysTick_Config+0x40>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003aa:	4b04      	ldr	r3, [pc, #16]	; (80003bc <SysTick_Config+0x40>)
 80003ac:	2207      	movs	r2, #7
 80003ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80003b0:	2300      	movs	r3, #0
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	e000e010 	.word	0xe000e010

080003c0 <RTOS_init>:
 * 	None
 * Return:
 * 	None
 */
void RTOS_init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c6:	b672      	cpsid	i
	/* Disable interrupt requests during initialization */
	__disable_irq();

	/* Double word stack alignment */
	SCB->SCR |= SCB_CCR_STKALIGN_Msk;
 80003c8:	4a1f      	ldr	r2, [pc, #124]	; (8000448 <RTOS_init+0x88>)
 80003ca:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <RTOS_init+0x88>)
 80003cc:	691b      	ldr	r3, [r3, #16]
 80003ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003d2:	6113      	str	r3, [r2, #16]

	/* Setup system clock */
	SystemCoreClockUpdate();
 80003d4:	f001 fa18 	bl	8001808 <SystemCoreClockUpdate>

	/* Configure NVIC */
	NVIC_SetPriorityGrouping(3);
 80003d8:	2003      	movs	r0, #3
 80003da:	f7ff ff67 	bl	80002ac <NVIC_SetPriorityGrouping>

	/* Configure SysTick */
	ASSERT(SysTick_Config(SystemCoreClock / SYSTICK_FREQUENCY) == 0);
 80003de:	4b1b      	ldr	r3, [pc, #108]	; (800044c <RTOS_init+0x8c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a1b      	ldr	r2, [pc, #108]	; (8000450 <RTOS_init+0x90>)
 80003e4:	fba2 2303 	umull	r2, r3, r2, r3
 80003e8:	099b      	lsrs	r3, r3, #6
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ffc6 	bl	800037c <SysTick_Config>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <RTOS_init+0x3a>
 80003f6:	b672      	cpsid	i
 80003f8:	e7fe      	b.n	80003f8 <RTOS_init+0x38>
	NVIC_SetPriority(SysTick_IRQn, 1);
 80003fa:	2101      	movs	r1, #1
 80003fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000400:	f7ff ff92 	bl	8000328 <NVIC_SetPriority>
	NVIC_EnableIRQ(SysTick_IRQn);
 8000404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000408:	f7ff ff74 	bl	80002f4 <NVIC_EnableIRQ>


	/* Enable SVC interrupt and set its priority */
	NVIC_SetPriority(SVCall_IRQn, 0);
 800040c:	2100      	movs	r1, #0
 800040e:	f06f 0004 	mvn.w	r0, #4
 8000412:	f7ff ff89 	bl	8000328 <NVIC_SetPriority>
	NVIC_EnableIRQ(SVCall_IRQn);
 8000416:	f06f 0004 	mvn.w	r0, #4
 800041a:	f7ff ff6b 	bl	80002f4 <NVIC_EnableIRQ>

	/* Enable PendSV interrupt and set its priority */
	NVIC_SetPriority(PendSV_IRQn, 0xFF);
 800041e:	21ff      	movs	r1, #255	; 0xff
 8000420:	f06f 0001 	mvn.w	r0, #1
 8000424:	f7ff ff80 	bl	8000328 <NVIC_SetPriority>
	NVIC_EnableIRQ(PendSV_IRQn);
 8000428:	f06f 0001 	mvn.w	r0, #1
 800042c:	f7ff ff62 	bl	80002f4 <NVIC_EnableIRQ>

	/* Initialize ready lists */
	RTOS_taskListsInit();
 8000430:	f000 fdca 	bl	8000fc8 <RTOS_taskListsInit>
 8000434:	2301      	movs	r3, #1
 8000436:	607b      	str	r3, [r7, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 800043e:	b662      	cpsie	i
	/* Disable all interrupts except SVC */
	__set_BASEPRI(1);

	/* Enable interrupts */
	__enable_irq();
}
 8000440:	bf00      	nop
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	e000ed00 	.word	0xe000ed00
 800044c:	20000008 	.word	0x20000008
 8000450:	10624dd3 	.word	0x10624dd3

08000454 <RTOS_SVC_Handler_Main>:
 * 	svc_args -> The supervisor calls arguments passed to the supervisor call
 * Return:
 * 	None
 */
void RTOS_SVC_Handler_Main(uint32_t* svc_args)
{
 8000454:	b590      	push	{r4, r7, lr}
 8000456:	b087      	sub	sp, #28
 8000458:	af02      	add	r7, sp, #8
 800045a:	6078      	str	r0, [r7, #4]
	 * Stack contains:
	 *  r0, r1, r2, r3, r12, r14, the return address and xPSR
	 * First argument (r0) is svc_args[0]
	 */
	uint32_t svc_number;
	svc_number = ((int8_t*)svc_args[6])[-2];
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3318      	adds	r3, #24
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	3b02      	subs	r3, #2
 8000464:	f993 3000 	ldrsb.w	r3, [r3]
 8000468:	60bb      	str	r3, [r7, #8]
	RTOS_returnStatus returnStatus;

	switch(svc_number)
 800046a:	68bb      	ldr	r3, [r7, #8]
 800046c:	2b12      	cmp	r3, #18
 800046e:	f200 80f1 	bhi.w	8000654 <RTOS_SVC_Handler_Main+0x200>
 8000472:	a201      	add	r2, pc, #4	; (adr r2, 8000478 <RTOS_SVC_Handler_Main+0x24>)
 8000474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000478:	080004c5 	.word	0x080004c5
 800047c:	080004cb 	.word	0x080004cb
 8000480:	080004f7 	.word	0x080004f7
 8000484:	08000503 	.word	0x08000503
 8000488:	0800050f 	.word	0x0800050f
 800048c:	08000525 	.word	0x08000525
 8000490:	0800053f 	.word	0x0800053f
 8000494:	0800054b 	.word	0x0800054b
 8000498:	08000561 	.word	0x08000561
 800049c:	0800057b 	.word	0x0800057b
 80004a0:	08000587 	.word	0x08000587
 80004a4:	0800059d 	.word	0x0800059d
 80004a8:	080005ad 	.word	0x080005ad
 80004ac:	080005b9 	.word	0x080005b9
 80004b0:	080005d9 	.word	0x080005d9
 80004b4:	080005f9 	.word	0x080005f9
 80004b8:	08000619 	.word	0x08000619
 80004bc:	0800062f 	.word	0x0800062f
 80004c0:	08000649 	.word	0x08000649
	{
		case 0:
			/* Start the scheduler */
			RTOS_schedulerStart();
 80004c4:	f000 fc00 	bl	8000cc8 <RTOS_schedulerStart>
			break;
 80004c8:	e0c6      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		case 1:
			/* Create a task */
			RTOS_taskCreate((RTOS_task_t*)svc_args[0],
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4618      	mov	r0, r3
							(RTOS_stack_t*)svc_args[1],
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	3304      	adds	r3, #4
 80004d4:	681b      	ldr	r3, [r3, #0]
			RTOS_taskCreate((RTOS_task_t*)svc_args[0],
 80004d6:	4619      	mov	r1, r3
							(uint32_t) svc_args[2],
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	3308      	adds	r3, #8
			RTOS_taskCreate((RTOS_task_t*)svc_args[0],
 80004dc:	681a      	ldr	r2, [r3, #0]
							(void *)svc_args[3],
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	330c      	adds	r3, #12
 80004e2:	681b      	ldr	r3, [r3, #0]
			RTOS_taskCreate((RTOS_task_t*)svc_args[0],
 80004e4:	461c      	mov	r4, r3
							(uint32_t) svc_args[8]);
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	3320      	adds	r3, #32
			RTOS_taskCreate((RTOS_task_t*)svc_args[0],
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	4623      	mov	r3, r4
 80004f0:	f000 fd88 	bl	8001004 <RTOS_taskCreate>
			break;
 80004f4:	e0b0      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		case 2:
			/* Delay a task by blocking it for a specific time delay */
			RTOS_taskDelay((uint32_t) svc_args[0]);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 ff26 	bl	800134c <RTOS_taskDelay>
			break;
 8000500:	e0aa      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		case 3:
			/* Remove a task from the system */
			RTOS_taskTerminate((RTOS_task_t*) svc_args[0]);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4618      	mov	r0, r3
 8000508:	f000 ff60 	bl	80013cc <RTOS_taskTerminate>
			break;
 800050c:	e0a4      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		/* Semaphore */
		case 4:
			RTOS_semaphoreInit((RTOS_semaphore_t*) svc_args[0], (int32_t)svc_args[1]);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	461a      	mov	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	3304      	adds	r3, #4
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4619      	mov	r1, r3
 800051c:	4610      	mov	r0, r2
 800051e:	f000 fc33 	bl	8000d88 <RTOS_semaphoreInit>
			break;
 8000522:	e099      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		case 5:
			returnStatus = RTOS_semaphoreWait((RTOS_semaphore_t*) svc_args[0], (uint32_t) svc_args[1]);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	461a      	mov	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	3304      	adds	r3, #4
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4619      	mov	r1, r3
 8000532:	4610      	mov	r0, r2
 8000534:	f000 fc3e 	bl	8000db4 <RTOS_semaphoreWait>
 8000538:	4603      	mov	r3, r0
 800053a:	73fb      	strb	r3, [r7, #15]
			break;
 800053c:	e08c      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		case 6:
			RTOS_semaphoreSignal((RTOS_semaphore_t*) svc_args[0]);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fca0 	bl	8000e88 <RTOS_semaphoreSignal>
			break;
 8000548:	e086      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		/* Mutex */
		case 7:
			RTOS_mutexInit((RTOS_mutex_t*) svc_args[0], (int32_t)svc_args[1]);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	461a      	mov	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	3304      	adds	r3, #4
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4619      	mov	r1, r3
 8000558:	4610      	mov	r0, r2
 800055a:	f000 fb05 	bl	8000b68 <RTOS_mutexInit>
			break;
 800055e:	e07b      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		case 8:
			returnStatus = RTOS_mutexLock((RTOS_mutex_t*) svc_args[0], (uint32_t) svc_args[1]);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	461a      	mov	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	3304      	adds	r3, #4
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4619      	mov	r1, r3
 800056e:	4610      	mov	r0, r2
 8000570:	f000 fb18 	bl	8000ba4 <RTOS_mutexLock>
 8000574:	4603      	mov	r3, r0
 8000576:	73fb      	strb	r3, [r7, #15]
			break;
 8000578:	e06e      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		case 9:
			RTOS_mutexUnlock((RTOS_mutex_t*) svc_args[0]);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fb78 	bl	8000c74 <RTOS_mutexUnlock>
			break;
 8000584:	e068      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		/* SpinLock */
		case 10:
			RTOS_spinInit((RTOS_spinLock_t*) svc_args[0], (int32_t)svc_args[1]);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3304      	adds	r3, #4
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4619      	mov	r1, r3
 8000594:	4610      	mov	r0, r2
 8000596:	f000 fcb3 	bl	8000f00 <RTOS_spinInit>
			break;
 800059a:	e05d      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		case 11:
			returnStatus = RTOS_spinLock((RTOS_spinLock_t*) svc_args[0]);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fcc8 	bl	8000f36 <RTOS_spinLock>
 80005a6:	4603      	mov	r3, r0
 80005a8:	73fb      	strb	r3, [r7, #15]
			break;
 80005aa:	e055      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		case 12:
			RTOS_spinUnlock((RTOS_spinLock_t*) svc_args[0]);
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fcfa 	bl	8000faa <RTOS_spinUnlock>
			break;
 80005b6:	e04f      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		/* MailBox */
		case 13:
			RTOS_mailBoxInit((RTOS_mailBox_t*) svc_args[0], (void*) svc_args[1], (uint32_t) svc_args[2], (uint32_t) svc_args[3]);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4618      	mov	r0, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	3304      	adds	r3, #4
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3308      	adds	r3, #8
 80005ca:	681a      	ldr	r2, [r3, #0]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	330c      	adds	r3, #12
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f000 fa0b 	bl	80009ec <RTOS_mailBoxInit>
			break;
 80005d6:	e03f      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		case 14:
			returnStatus = RTOS_mailBoxSend((RTOS_mailBox_t*) svc_args[0], (void*) svc_args[1], (uint32_t) svc_args[2]);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	3304      	adds	r3, #4
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	3308      	adds	r3, #8
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	461a      	mov	r2, r3
 80005ee:	f000 fa3d 	bl	8000a6c <RTOS_mailBoxSend>
 80005f2:	4603      	mov	r3, r0
 80005f4:	73fb      	strb	r3, [r7, #15]
			break;
 80005f6:	e02f      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		case 15:
			returnStatus = RTOS_mailBoxReceive((RTOS_mailBox_t*)  svc_args[0], (void*) svc_args[1], (uint32_t) svc_args[2]);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3304      	adds	r3, #4
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4619      	mov	r1, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3308      	adds	r3, #8
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	f000 fa6c 	bl	8000aea <RTOS_mailBoxReceive>
 8000612:	4603      	mov	r3, r0
 8000614:	73fb      	strb	r3, [r7, #15]
			break;
 8000616:	e01f      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		/* Binary Semaphore */
		case 16:
			RTOS_bSemaphoreInit((RTOS_bSemaphore_t*) svc_args[0], (int32_t)svc_args[1]);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	3304      	adds	r3, #4
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	4610      	mov	r0, r2
 8000628:	f000 f872 	bl	8000710 <RTOS_bSemaphoreInit>
			break;
 800062c:	e014      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		case 17:
			returnStatus = RTOS_bSemaphoreWait((RTOS_bSemaphore_t*) svc_args[0], (uint32_t) svc_args[1]);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	461a      	mov	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3304      	adds	r3, #4
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4619      	mov	r1, r3
 800063c:	4610      	mov	r0, r2
 800063e:	f000 f885 	bl	800074c <RTOS_bSemaphoreWait>
 8000642:	4603      	mov	r3, r0
 8000644:	73fb      	strb	r3, [r7, #15]
			break;
 8000646:	e007      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
		case 18:
			RTOS_bSemaphoreSignal((RTOS_bSemaphore_t*) svc_args[0]);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f8e5 	bl	800081c <RTOS_bSemaphoreSignal>
			break;
 8000652:	e001      	b.n	8000658 <RTOS_SVC_Handler_Main+0x204>
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
		/* Unsupported supervisor call */
		default:
			ASSERT(0)
 8000656:	e7fe      	b.n	8000656 <RTOS_SVC_Handler_Main+0x202>
			break;
	}

	switch(svc_number)
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	3b05      	subs	r3, #5
 800065c:	2b0c      	cmp	r3, #12
 800065e:	d852      	bhi.n	8000706 <RTOS_SVC_Handler_Main+0x2b2>
 8000660:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <RTOS_SVC_Handler_Main+0x214>)
 8000662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000666:	bf00      	nop
 8000668:	0800069d 	.word	0x0800069d
 800066c:	08000707 	.word	0x08000707
 8000670:	08000707 	.word	0x08000707
 8000674:	0800069d 	.word	0x0800069d
 8000678:	08000707 	.word	0x08000707
 800067c:	08000707 	.word	0x08000707
 8000680:	080006c3 	.word	0x080006c3
 8000684:	08000707 	.word	0x08000707
 8000688:	08000707 	.word	0x08000707
 800068c:	080006e1 	.word	0x080006e1
 8000690:	080006e1 	.word	0x080006e1
 8000694:	08000707 	.word	0x08000707
 8000698:	0800069d 	.word	0x0800069d
		/* For semaphores, mutex*/
		case 5:
		case 8:
		case 17:
			/* If we failed to acquire the synchronization tool */
			if(returnStatus == RTOS_DELAY)
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10b      	bne.n	80006ba <RTOS_SVC_Handler_Main+0x266>
			{
				 /* Attempt to acquire it the next time by decrementing the PC */
				svc_args[6] -= 2;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3318      	adds	r3, #24
 80006a6:	687a      	ldr	r2, [r7, #4]
 80006a8:	3218      	adds	r2, #24
 80006aa:	6812      	ldr	r2, [r2, #0]
 80006ac:	3a02      	subs	r2, #2
 80006ae:	601a      	str	r2, [r3, #0]
				/* Do not wait the next time */
				svc_args[1] = 0;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	3304      	adds	r3, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
			}
			else
			{
				svc_args[0] = returnStatus;
			}
			break;
 80006b8:	e025      	b.n	8000706 <RTOS_SVC_Handler_Main+0x2b2>
				svc_args[0] = returnStatus;
 80006ba:	7bfa      	ldrb	r2, [r7, #15]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	601a      	str	r2, [r3, #0]
			break;
 80006c0:	e021      	b.n	8000706 <RTOS_SVC_Handler_Main+0x2b2>

		/* For spinlocks */
		case 11:
			if(returnStatus == RTOS_DELAY)
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d107      	bne.n	80006d8 <RTOS_SVC_Handler_Main+0x284>
			{
				 /* Attempt to acquire it again next time by decrementing the PC */
				svc_args[6] -= 2;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3318      	adds	r3, #24
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	3218      	adds	r2, #24
 80006d0:	6812      	ldr	r2, [r2, #0]
 80006d2:	3a02      	subs	r2, #2
 80006d4:	601a      	str	r2, [r3, #0]
			}
			else
			{
				svc_args[0] = returnStatus;
			}
			break;
 80006d6:	e016      	b.n	8000706 <RTOS_SVC_Handler_Main+0x2b2>
				svc_args[0] = returnStatus;
 80006d8:	7bfa      	ldrb	r2, [r7, #15]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	601a      	str	r2, [r3, #0]
			break;
 80006de:	e012      	b.n	8000706 <RTOS_SVC_Handler_Main+0x2b2>

		/* For mailbox */
		case 14:
		case 15:
			/* If we failed to use the mailbox */
			if(returnStatus == RTOS_DELAY)
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d10b      	bne.n	80006fe <RTOS_SVC_Handler_Main+0x2aa>
			{
				 /* Attempt to use it the next time by decrementing the PC */
				svc_args[6] -= 2;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3318      	adds	r3, #24
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	3218      	adds	r2, #24
 80006ee:	6812      	ldr	r2, [r2, #0]
 80006f0:	3a02      	subs	r2, #2
 80006f2:	601a      	str	r2, [r3, #0]
				/* Do not wait the next time */
				svc_args[2] = 0;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	3308      	adds	r3, #8
 80006f8:	2200      	movs	r2, #0
 80006fa:	601a      	str	r2, [r3, #0]
			}
			else
			{
				svc_args[0] = returnStatus;
			}
			break;
 80006fc:	e002      	b.n	8000704 <RTOS_SVC_Handler_Main+0x2b0>
				svc_args[0] = returnStatus;
 80006fe:	7bfa      	ldrb	r2, [r7, #15]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	601a      	str	r2, [r3, #0]
			break;
 8000704:	bf00      	nop
	}
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	bd90      	pop	{r4, r7, pc}
 800070e:	bf00      	nop

08000710 <RTOS_bSemaphoreInit>:
 *  value -> Value to which the binary semaphore will be initialized
 * Return:
 * 	None
 */
void RTOS_bSemaphoreInit(RTOS_bSemaphore_t* pBSemaphore, uint32_t value)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	ASSERT(pBSemaphore != NULL);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d101      	bne.n	8000724 <RTOS_bSemaphoreInit+0x14>
 8000720:	b672      	cpsid	i
 8000722:	e7fe      	b.n	8000722 <RTOS_bSemaphoreInit+0x12>
	ASSERT((value == RTOS_BSEMAPHORE_USED) || (value == RTOS_BSEMAPHORE_FREE));
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d004      	beq.n	8000734 <RTOS_bSemaphoreInit+0x24>
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	2b01      	cmp	r3, #1
 800072e:	d001      	beq.n	8000734 <RTOS_bSemaphoreInit+0x24>
 8000730:	b672      	cpsid	i
 8000732:	e7fe      	b.n	8000732 <RTOS_bSemaphoreInit+0x22>
	/* Initialize the binary semaphore list */
	RTOS_listInit(&pBSemaphore->bSemaphoreList);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f896 	bl	8000868 <RTOS_listInit>
	/* Set the binary semaphore value */
	pBSemaphore->value = value;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	683a      	ldr	r2, [r7, #0]
 8000740:	611a      	str	r2, [r3, #16]
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <RTOS_bSemaphoreWait>:
 * Return:
 * 	States whether the binary semaphore was acquired successfully or not
 */

RTOS_returnStatus RTOS_bSemaphoreWait(RTOS_bSemaphore_t* pBSemaphore, uint32_t waitTicks)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
	uint8_t terminate = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t value;
	RTOS_returnStatus returnStatus = RTOS_FAIL;
 800075c:	2300      	movs	r3, #0
 800075e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Keep trying */
	while(!terminate)
 8000762:	e024      	b.n	80007ae <RTOS_bSemaphoreWait+0x62>
	{
		/* Load the binary semaphore value */
		value = __LDREXW(&pBSemaphore->value);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	3310      	adds	r3, #16
 8000768:	61bb      	str	r3, [r7, #24]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800076a:	69bb      	ldr	r3, [r7, #24]
 800076c:	e853 3f00 	ldrex	r3, [r3]
 8000770:	617b      	str	r3, [r7, #20]
   return(result);
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	623b      	str	r3, [r7, #32]
		/* Check if the binary semaphore can be acquired */
		if(value == RTOS_BSEMAPHORE_FREE)
 8000776:	6a3b      	ldr	r3, [r7, #32]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d115      	bne.n	80007a8 <RTOS_bSemaphoreWait+0x5c>
		{
			/* Attempt to store the binary semaphore */
			if( __STREXW(RTOS_BSEMAPHORE_USED, &pBSemaphore->value) == 0)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3310      	adds	r3, #16
 8000780:	2200      	movs	r2, #0
 8000782:	613a      	str	r2, [r7, #16]
 8000784:	60fb      	str	r3, [r7, #12]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000786:	68f9      	ldr	r1, [r7, #12]
 8000788:	693a      	ldr	r2, [r7, #16]
 800078a:	e841 2300 	strex	r3, r2, [r1]
 800078e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d10b      	bne.n	80007ae <RTOS_bSemaphoreWait+0x62>
  __ASM volatile ("dmb");
 8000796:	f3bf 8f5f 	dmb	sy
			{
				/* Data Memory Barrier */
				__DMB();
				/* Set the binary semaphore as acquired */
				returnStatus = RTOS_SUCCESS;
 800079a:	2302      	movs	r3, #2
 800079c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				/* End loop */
				terminate = 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80007a6:	e002      	b.n	80007ae <RTOS_bSemaphoreWait+0x62>
			}
		}
		else
		{
			/* End loop */
			terminate = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(!terminate)
 80007ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d0d6      	beq.n	8000764 <RTOS_bSemaphoreWait+0x18>
		}
	}


	/* If the binary semaphore was not acquired successfully */
	if(returnStatus == RTOS_FAIL && waitTicks > 0)
 80007b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d126      	bne.n	800080c <RTOS_bSemaphoreWait+0xc0>
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d023      	beq.n	800080c <RTOS_bSemaphoreWait+0xc0>
	{
		/* Get the currently running task */
		RTOS_task_t* pTask = RTOS_taskGetRunning();
 80007c4:	f000 fcfe 	bl	80011c4 <RTOS_taskGetRunning>
 80007c8:	61f8      	str	r0, [r7, #28]
		/* Remove the task from the ready list */
		RTOS_listRemove(& pTask->listItem);
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	3308      	adds	r3, #8
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f8d8 	bl	8000984 <RTOS_listRemove>
		/* Set the items ordering value for the binary semaphore list */
		pTask->eventListItem.orderValue = pTask->priority;
 80007d4:	69fb      	ldr	r3, [r7, #28]
 80007d6:	685a      	ldr	r2, [r3, #4]
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
		/* Add the task to the binary semaphore list */
		RTOS_listInsert(&pBSemaphore->bSemaphoreList, & pTask->eventListItem);
 80007dc:	687a      	ldr	r2, [r7, #4]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	331c      	adds	r3, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	4610      	mov	r0, r2
 80007e6:	f000 f88e 	bl	8000906 <RTOS_listInsert>

		if(waitTicks != RTOS_WAITFOREVER)
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80007f0:	d003      	beq.n	80007fa <RTOS_bSemaphoreWait+0xae>
		{
			/* Add the task to timer's list */
			RTOS_taskAddToTimerList(pTask, waitTicks);
 80007f2:	6839      	ldr	r1, [r7, #0]
 80007f4:	69f8      	ldr	r0, [r7, #28]
 80007f6:	f000 fd2d 	bl	8001254 <RTOS_taskAddToTimerList>
		}
		else
		{

		}
		returnStatus = RTOS_DELAY;
 80007fa:	2301      	movs	r3, #1
 80007fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Invoke a pendSV exception */
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000800:	4a05      	ldr	r2, [pc, #20]	; (8000818 <RTOS_bSemaphoreWait+0xcc>)
 8000802:	4b05      	ldr	r3, [pc, #20]	; (8000818 <RTOS_bSemaphoreWait+0xcc>)
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080a:	6053      	str	r3, [r2, #4]
	else
	{

	}

	return returnStatus;
 800080c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 8000810:	4618      	mov	r0, r3
 8000812:	3728      	adds	r7, #40	; 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <RTOS_bSemaphoreSignal>:
 *  pBSemaphore -> Pointer to the binary semaphore
 * Return:
 * 	None
 */
void RTOS_bSemaphoreSignal(RTOS_bSemaphore_t* pBSemaphore)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b084      	sub	sp, #16
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
 8000824:	f3bf 8f5f 	dmb	sy
	/* Data Memory Barrier */
	__DMB();
	/* Unlock the binary semaphore */
	pBSemaphore->value = RTOS_BSEMAPHORE_FREE;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2201      	movs	r2, #1
 800082c:	611a      	str	r2, [r3, #16]
	/* Check if any tasks are blocked */
	if(pBSemaphore->bSemaphoreList.numListItems > 0)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d014      	beq.n	8000860 <RTOS_bSemaphoreSignal+0x44>
	{
		/* Remove a task from the binary semaphore list */
		RTOS_task_t* pTask = pBSemaphore->bSemaphoreList.endItem.pPrev->pTask;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	689b      	ldr	r3, [r3, #8]
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	60fb      	str	r3, [r7, #12]
		RTOS_listRemove(& pTask->eventListItem);
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	331c      	adds	r3, #28
 8000842:	4618      	mov	r0, r3
 8000844:	f000 f89e 	bl	8000984 <RTOS_listRemove>
		/* Check if the task was delayed then remove it from delay list */
		if(pTask->listItem.pList != NULL)
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	691b      	ldr	r3, [r3, #16]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d004      	beq.n	800085a <RTOS_bSemaphoreSignal+0x3e>
		{
			RTOS_listRemove(& pTask->listItem);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	3308      	adds	r3, #8
 8000854:	4618      	mov	r0, r3
 8000856:	f000 f895 	bl	8000984 <RTOS_listRemove>
		else
		{

		}
		/* Place this task in the ready list */
		RTOS_taskAddToReadyList(pTask);
 800085a:	68f8      	ldr	r0, [r7, #12]
 800085c:	f000 fcbe 	bl	80011dc <RTOS_taskAddToReadyList>
	}
	else
	{

	}
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}

08000868 <RTOS_listInit>:
 * 	pList -> The RTOS list
 * Return:
 * 	None
 */
void RTOS_listInit(RTOS_list_t* pList)
{
 8000868:	b480      	push	{r7}
 800086a:	b083      	sub	sp, #12
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	ASSERT(pList != NULL);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d101      	bne.n	800087a <RTOS_listInit+0x12>
 8000876:	b672      	cpsid	i
 8000878:	e7fe      	b.n	8000878 <RTOS_listInit+0x10>

	/* Set the the current index as end item */
	pList->pIndex = (RTOS_listItem_t*) &(pList->endItem);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	1d1a      	adds	r2, r3, #4
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	601a      	str	r2, [r3, #0]

	/* Set the next and previous of the end item as itself */
	pList->endItem.pNext = (RTOS_listItem_t*) &(pList->endItem);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	1d1a      	adds	r2, r3, #4
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	605a      	str	r2, [r3, #4]
	pList->endItem.pPrev = (RTOS_listItem_t*) &(pList->endItem);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	1d1a      	adds	r2, r3, #4
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	609a      	str	r2, [r3, #8]

	/* Set the number of items in the list to zero */
	pList->numListItems = 0;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2200      	movs	r2, #0
 8000896:	60da      	str	r2, [r3, #12]
}
 8000898:	bf00      	nop
 800089a:	370c      	adds	r7, #12
 800089c:	46bd      	mov	sp, r7
 800089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a2:	4770      	bx	lr

080008a4 <RTOS_listInsertEnd>:
 * 	pListItem -> The RTOS list item to be inserted
 * Return:
 * 	None
 */
void RTOS_listInsertEnd(RTOS_list_t* pList, RTOS_listItem_t* pListItem)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
	ASSERT(pList != NULL);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d101      	bne.n	80008b8 <RTOS_listInsertEnd+0x14>
 80008b4:	b672      	cpsid	i
 80008b6:	e7fe      	b.n	80008b6 <RTOS_listInsertEnd+0x12>
	ASSERT(pListItem != NULL);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d101      	bne.n	80008c2 <RTOS_listInsertEnd+0x1e>
 80008be:	b672      	cpsid	i
 80008c0:	e7fe      	b.n	80008c0 <RTOS_listInsertEnd+0x1c>

	/* Make the next of the new item the next of the current index item of list */
	pListItem->pNext = pList->pIndex->pNext;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	601a      	str	r2, [r3, #0]
	/* Make the previous of the new item the current index item of the list */
	pListItem->pPrev = pList->pIndex;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	605a      	str	r2, [r3, #4]
	/* Make the previous of the item that was the next the new item */
	pListItem->pNext->pPrev = pListItem;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	683a      	ldr	r2, [r7, #0]
 80008da:	605a      	str	r2, [r3, #4]
	/* Make the next item of the current index item the new list item */
	pList->pIndex->pNext = pListItem;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	601a      	str	r2, [r3, #0]
	/* Update the current index to the new item */
	pList->pIndex = pListItem;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	683a      	ldr	r2, [r7, #0]
 80008e8:	601a      	str	r2, [r3, #0]
	/* Set the list of the new item as the list */
	pListItem->pList = pList;
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	609a      	str	r2, [r3, #8]
	/* Increment the number of items in the list */
	pList->numListItems++;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	68db      	ldr	r3, [r3, #12]
 80008f4:	1c5a      	adds	r2, r3, #1
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	60da      	str	r2, [r3, #12]
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <RTOS_listInsert>:
 * 	pListItem -> The RTOS list item to be inserted
 * Return:
 * 	None
 */
void RTOS_listInsert(RTOS_list_t* pList, RTOS_listItem_t* pListItem)
{
 8000906:	b480      	push	{r7}
 8000908:	b085      	sub	sp, #20
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	6039      	str	r1, [r7, #0]
	ASSERT(pList != NULL);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d101      	bne.n	800091a <RTOS_listInsert+0x14>
 8000916:	b672      	cpsid	i
 8000918:	e7fe      	b.n	8000918 <RTOS_listInsert+0x12>
	ASSERT(pListItem != NULL);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d101      	bne.n	8000924 <RTOS_listInsert+0x1e>
 8000920:	b672      	cpsid	i
 8000922:	e7fe      	b.n	8000922 <RTOS_listInsert+0x1c>

	/* Start with the first item in the list */
	RTOS_listItem_t* pCurrentItem = (RTOS_listItem_t*) &pList->endItem;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3304      	adds	r3, #4
 8000928:	60fb      	str	r3, [r7, #12]
	 * Lazy evaluation prevents the second condition from being
	 * tested in case the next item was the end item as it doesn't
	 * have pTask
	 */
	 /* Not less than or equal so the task waiting the most gets executed first */
	while((pCurrentItem->pNext != (RTOS_listItem_t*) &pList->endItem) &&
 800092a:	e002      	b.n	8000932 <RTOS_listInsert+0x2c>
	(pListItem->orderValue < pCurrentItem->pNext->orderValue))
	{
		pCurrentItem = pCurrentItem->pNext;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	60fb      	str	r3, [r7, #12]
	while((pCurrentItem->pNext != (RTOS_listItem_t*) &pList->endItem) &&
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3304      	adds	r3, #4
 800093a:	429a      	cmp	r2, r3
 800093c:	d006      	beq.n	800094c <RTOS_listInsert+0x46>
	(pListItem->orderValue < pCurrentItem->pNext->orderValue))
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	691a      	ldr	r2, [r3, #16]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	691b      	ldr	r3, [r3, #16]
	while((pCurrentItem->pNext != (RTOS_listItem_t*) &pList->endItem) &&
 8000948:	429a      	cmp	r2, r3
 800094a:	d3ef      	bcc.n	800092c <RTOS_listInsert+0x26>
	}

	/* Make the next of the new item the next of the current index item of list */
	pListItem->pNext = pCurrentItem->pNext;
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	601a      	str	r2, [r3, #0]
	/* Make the previous of the new item the current index item of the list */
	pListItem->pPrev = pCurrentItem;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	605a      	str	r2, [r3, #4]
	/* Make the previous of the item that was the next the new item */
	pListItem->pNext->pPrev = pListItem;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	683a      	ldr	r2, [r7, #0]
 8000960:	605a      	str	r2, [r3, #4]
	/* Make the next item of the current index item the new list item */
	pCurrentItem->pNext = pListItem;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	683a      	ldr	r2, [r7, #0]
 8000966:	601a      	str	r2, [r3, #0]
	/* Set the list of the new item as the list */
	pListItem->pList = pList;
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	609a      	str	r2, [r3, #8]
	/* Increment the number of items in the list */
	pList->numListItems++;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	1c5a      	adds	r2, r3, #1
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	60da      	str	r2, [r3, #12]
}
 8000978:	bf00      	nop
 800097a:	3714      	adds	r7, #20
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <RTOS_listRemove>:
 * 	pListItem -> The RTOS list item to be removed
 * Return:
 * 	None
 */
void RTOS_listRemove(RTOS_listItem_t* pListItem)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	ASSERT(pListItem != NULL);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d101      	bne.n	8000996 <RTOS_listRemove+0x12>
 8000992:	b672      	cpsid	i
 8000994:	e7fe      	b.n	8000994 <RTOS_listRemove+0x10>
	RTOS_list_t* pList = pListItem->pList;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	60fb      	str	r3, [r7, #12]
	ASSERT(pListItem != (RTOS_listItem_t*) &pList->endItem);
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	1d1a      	adds	r2, r3, #4
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	429a      	cmp	r2, r3
 80009a4:	d101      	bne.n	80009aa <RTOS_listRemove+0x26>
 80009a6:	b672      	cpsid	i
 80009a8:	e7fe      	b.n	80009a8 <RTOS_listRemove+0x24>

	/* Make the next of previous item the next item */
	pListItem->pPrev->pNext = pListItem->pNext;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	6812      	ldr	r2, [r2, #0]
 80009b2:	601a      	str	r2, [r3, #0]
	/* Make the previous of the next item the previous item */
	pListItem->pNext->pPrev = pListItem->pPrev;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	6852      	ldr	r2, [r2, #4]
 80009bc:	605a      	str	r2, [r3, #4]
	/* Check if the removed item is the index of the list */
	if(pListItem == pList->pIndex)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d103      	bne.n	80009d0 <RTOS_listRemove+0x4c>
	{
		/* Make the previous item the new index */
		pList->pIndex = pListItem->pPrev;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685a      	ldr	r2, [r3, #4]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	601a      	str	r2, [r3, #0]
	else
	{

	}
	/* Make the list of the item NULL */
	pListItem->pList = NULL;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
	/* Increment the number of items in the list */
	pList->numListItems--;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	1e5a      	subs	r2, r3, #1
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	60da      	str	r2, [r3, #12]
}
 80009e0:	bf00      	nop
 80009e2:	3714      	adds	r7, #20
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <RTOS_mailBoxInit>:

#include "rtos_mailbox.h"


void RTOS_mailBoxInit(RTOS_mailBox_t* pMailBox, void* pBuffer, uint32_t bufferCapacity, uint32_t messageSize)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
 80009f8:	603b      	str	r3, [r7, #0]
	ASSERT(pMailBox != NULL);
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d101      	bne.n	8000a04 <RTOS_mailBoxInit+0x18>
 8000a00:	b672      	cpsid	i
 8000a02:	e7fe      	b.n	8000a02 <RTOS_mailBoxInit+0x16>
	ASSERT(pBuffer != NULL);
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d101      	bne.n	8000a0e <RTOS_mailBoxInit+0x22>
 8000a0a:	b672      	cpsid	i
 8000a0c:	e7fe      	b.n	8000a0c <RTOS_mailBoxInit+0x20>
	ASSERT(bufferCapacity > 0);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d101      	bne.n	8000a18 <RTOS_mailBoxInit+0x2c>
 8000a14:	b672      	cpsid	i
 8000a16:	e7fe      	b.n	8000a16 <RTOS_mailBoxInit+0x2a>
	ASSERT(messageSize > 0);
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d101      	bne.n	8000a22 <RTOS_mailBoxInit+0x36>
 8000a1e:	b672      	cpsid	i
 8000a20:	e7fe      	b.n	8000a20 <RTOS_mailBoxInit+0x34>

	/* Initialize the MailBox */
	pMailBox->pBuffer = (uint32_t)pBuffer;
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	601a      	str	r2, [r3, #0]
	/* To ensure message size alignment */
	pMailBox->bufferCapacity = (bufferCapacity / messageSize) * messageSize;
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a30:	683a      	ldr	r2, [r7, #0]
 8000a32:	fb02 f203 	mul.w	r2, r2, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	605a      	str	r2, [r3, #4]
	pMailBox->messageSize = messageSize;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	683a      	ldr	r2, [r7, #0]
 8000a3e:	609a      	str	r2, [r3, #8]
	pMailBox->readIndex = 0;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
	pMailBox->writeIndex = 0;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
	//RTOS_semaphoreInit(& pMailBox->mailBoxSemaphore, 1);
	RTOS_semaphoreInit(& pMailBox->emptySpacesSemaphore, bufferCapacity);
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	3328      	adds	r3, #40	; 0x28
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f000 f998 	bl	8000d88 <RTOS_semaphoreInit>
	RTOS_semaphoreInit(& pMailBox->usedSpacesSemaphore, 0);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	333c      	adds	r3, #60	; 0x3c
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 f992 	bl	8000d88 <RTOS_semaphoreInit>
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <RTOS_mailBoxSend>:
RTOS_returnStatus RTOS_mailBoxSend(RTOS_mailBox_t* pMailBox, void* pBuffer, uint32_t waitTicks)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	60b9      	str	r1, [r7, #8]
 8000a76:	607a      	str	r2, [r7, #4]
	ASSERT(pMailBox != NULL);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d101      	bne.n	8000a82 <RTOS_mailBoxSend+0x16>
 8000a7e:	b672      	cpsid	i
 8000a80:	e7fe      	b.n	8000a80 <RTOS_mailBoxSend+0x14>
	ASSERT(pBuffer != NULL);
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d101      	bne.n	8000a8c <RTOS_mailBoxSend+0x20>
 8000a88:	b672      	cpsid	i
 8000a8a:	e7fe      	b.n	8000a8a <RTOS_mailBoxSend+0x1e>

	RTOS_returnStatus returnStatus;
	/* If buffer is full, block the process */
	returnStatus = RTOS_semaphoreWait(& pMailBox->emptySpacesSemaphore, waitTicks);
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	3328      	adds	r3, #40	; 0x28
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	4618      	mov	r0, r3
 8000a94:	f000 f98e 	bl	8000db4 <RTOS_semaphoreWait>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	75fb      	strb	r3, [r7, #23]

	if(returnStatus == RTOS_SUCCESS)
 8000a9c:	7dfb      	ldrb	r3, [r7, #23]
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d11e      	bne.n	8000ae0 <RTOS_mailBoxSend+0x74>
	{
		/* The mailbox is a shared resource so we need to protect it*/
		//RTOS_semaphoreWait(& pMailBox->mailBoxSemaphore, waitTicks);
		/* Copy the data into the mailbox buffer */
		memcpy((void*)(pMailBox->pBuffer + pMailBox->writeIndex), pBuffer, pMailBox->messageSize);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	691b      	ldr	r3, [r3, #16]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4618      	mov	r0, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	689b      	ldr	r3, [r3, #8]
 8000ab2:	461a      	mov	r2, r3
 8000ab4:	68b9      	ldr	r1, [r7, #8]
 8000ab6:	f000 ffc3 	bl	8001a40 <memcpy>
		/* Increment the write index, If we reached the end of the buffer then reset in the index */
		pMailBox->writeIndex = (pMailBox->writeIndex + pMailBox->messageSize) % pMailBox->bufferCapacity;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	691a      	ldr	r2, [r3, #16]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	68fa      	ldr	r2, [r7, #12]
 8000ac6:	6852      	ldr	r2, [r2, #4]
 8000ac8:	fbb3 f1f2 	udiv	r1, r3, r2
 8000acc:	fb02 f201 	mul.w	r2, r2, r1
 8000ad0:	1a9a      	subs	r2, r3, r2
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
		/* Release the mailbox semaphore */
		//RTOS_semaphoreSignal(& pMailBox->mailBoxSemaphore);
		/* Increment the used spaces in the mailbox */
		RTOS_semaphoreSignal(& pMailBox->usedSpacesSemaphore);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	333c      	adds	r3, #60	; 0x3c
 8000ada:	4618      	mov	r0, r3
 8000adc:	f000 f9d4 	bl	8000e88 <RTOS_semaphoreSignal>
	}

	return returnStatus;
 8000ae0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <RTOS_mailBoxReceive>:

RTOS_returnStatus RTOS_mailBoxReceive(RTOS_mailBox_t* pMailBox, void* pBuffer, uint32_t waitTicks)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b086      	sub	sp, #24
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
	ASSERT(pMailBox != NULL);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <RTOS_mailBoxReceive+0x16>
 8000afc:	b672      	cpsid	i
 8000afe:	e7fe      	b.n	8000afe <RTOS_mailBoxReceive+0x14>
	ASSERT(pBuffer != NULL);
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <RTOS_mailBoxReceive+0x20>
 8000b06:	b672      	cpsid	i
 8000b08:	e7fe      	b.n	8000b08 <RTOS_mailBoxReceive+0x1e>

	RTOS_returnStatus returnStatus;
	/* If the mailbox is empty, block the process */
	returnStatus = RTOS_semaphoreWait(& pMailBox->usedSpacesSemaphore, waitTicks);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	333c      	adds	r3, #60	; 0x3c
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	4618      	mov	r0, r3
 8000b12:	f000 f94f 	bl	8000db4 <RTOS_semaphoreWait>
 8000b16:	4603      	mov	r3, r0
 8000b18:	75fb      	strb	r3, [r7, #23]

	if(returnStatus == RTOS_SUCCESS)
 8000b1a:	7dfb      	ldrb	r3, [r7, #23]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d11e      	bne.n	8000b5e <RTOS_mailBoxReceive+0x74>
	{
		/* The mailbox is a shared resource so we need to protect it*/
		//RTOS_semaphoreWait(& pMailBox->mailBoxSemaphore, waitTicks);
		/* Copy the data from the mailbox buffer */
		memcpy(pBuffer, (void*)(pMailBox->pBuffer + pMailBox->readIndex), pMailBox->messageSize);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	689b      	ldr	r3, [r3, #8]
 8000b30:	461a      	mov	r2, r3
 8000b32:	68b8      	ldr	r0, [r7, #8]
 8000b34:	f000 ff84 	bl	8001a40 <memcpy>
		/* Increment the read index, If we reached the end of the buffer then reset the index */
		pMailBox->readIndex = (pMailBox->readIndex + pMailBox->messageSize) % pMailBox->bufferCapacity;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	4413      	add	r3, r2
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	6852      	ldr	r2, [r2, #4]
 8000b46:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b4a:	fb02 f201 	mul.w	r2, r2, r1
 8000b4e:	1a9a      	subs	r2, r3, r2
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	60da      	str	r2, [r3, #12]
		/* Release the mailbox semaphore */
		//RTOS_semaphoreSignal(& pMailBox->mailBoxSemaphore);
		/* Increment the empty spaces in the mailbox */
		RTOS_semaphoreSignal(& pMailBox->emptySpacesSemaphore);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	3328      	adds	r3, #40	; 0x28
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f000 f995 	bl	8000e88 <RTOS_semaphoreSignal>
	}

	return returnStatus;
 8000b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <RTOS_mutexInit>:
 *  value -> Value to which the mutex will be initialized
 * Return:
 * 	None
 */
void RTOS_mutexInit(RTOS_mutex_t* pMutex, uint32_t value)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
	ASSERT(pMutex != NULL);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d101      	bne.n	8000b7c <RTOS_mutexInit+0x14>
 8000b78:	b672      	cpsid	i
 8000b7a:	e7fe      	b.n	8000b7a <RTOS_mutexInit+0x12>
	ASSERT((value == RTOS_MUTEX_USED) || (value == RTOS_MUTEX_FREE));
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d004      	beq.n	8000b8c <RTOS_mutexInit+0x24>
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d001      	beq.n	8000b8c <RTOS_mutexInit+0x24>
 8000b88:	b672      	cpsid	i
 8000b8a:	e7fe      	b.n	8000b8a <RTOS_mutexInit+0x22>
	/* Initialize the mutex list */
	RTOS_listInit(&pMutex->mutexList);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff fe6a 	bl	8000868 <RTOS_listInit>
	/* Set the mutex value */
	pMutex->value = value;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	611a      	str	r2, [r3, #16]
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
	...

08000ba4 <RTOS_mutexLock>:
 * Return:
 * 	States whether the mutex was acquired successfully or not
 */

RTOS_returnStatus RTOS_mutexLock(RTOS_mutex_t* pMutex, uint32_t waitTicks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
 8000bac:	6039      	str	r1, [r7, #0]
	uint8_t terminate = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t value;
	RTOS_returnStatus returnStatus = RTOS_FAIL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Keep trying */
	while(!terminate)
 8000bba:	e024      	b.n	8000c06 <RTOS_mutexLock+0x62>
	{
		/* Load the mutex value */
		value = __LDREXW(&pMutex->value);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3310      	adds	r3, #16
 8000bc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	e853 3f00 	ldrex	r3, [r3]
 8000bc8:	617b      	str	r3, [r7, #20]
   return(result);
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	623b      	str	r3, [r7, #32]
		/* Check if the mutex can be acquired */
		if(value == RTOS_MUTEX_FREE)
 8000bce:	6a3b      	ldr	r3, [r7, #32]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d115      	bne.n	8000c00 <RTOS_mutexLock+0x5c>
		{
			/* Attempt to store the mutex */
			if( __STREXW(RTOS_MUTEX_USED, &pMutex->value) == 0)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3310      	adds	r3, #16
 8000bd8:	2200      	movs	r2, #0
 8000bda:	613a      	str	r2, [r7, #16]
 8000bdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000bde:	68f9      	ldr	r1, [r7, #12]
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	e841 2300 	strex	r3, r2, [r1]
 8000be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d10b      	bne.n	8000c06 <RTOS_mutexLock+0x62>
  __ASM volatile ("dmb");
 8000bee:	f3bf 8f5f 	dmb	sy
			{
				/* Data Memory Barrier */
				__DMB();
				/* Set the mutex as acquired */
				returnStatus = RTOS_SUCCESS;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				/* End loop */
				terminate = 1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bfe:	e002      	b.n	8000c06 <RTOS_mutexLock+0x62>
			}
		}
		else
		{
			/* End loop */
			terminate = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(!terminate)
 8000c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d0d6      	beq.n	8000bbc <RTOS_mutexLock+0x18>
		}
	}


	/* If the mutex was not acquired successfully */
	if(returnStatus == RTOS_FAIL && waitTicks > 0)
 8000c0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d126      	bne.n	8000c64 <RTOS_mutexLock+0xc0>
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d023      	beq.n	8000c64 <RTOS_mutexLock+0xc0>
	{
		/* Get the currently running task */
		RTOS_task_t* pTask = RTOS_taskGetRunning();
 8000c1c:	f000 fad2 	bl	80011c4 <RTOS_taskGetRunning>
 8000c20:	61f8      	str	r0, [r7, #28]
		/* Remove the task from the ready list */
		RTOS_listRemove(& pTask->listItem);
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3308      	adds	r3, #8
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff feac 	bl	8000984 <RTOS_listRemove>
		/* Set the items ordering value for the mutex list */
		pTask->eventListItem.orderValue = pTask->priority;
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	62da      	str	r2, [r3, #44]	; 0x2c
		/* Add the task to the mutex list */
		RTOS_listInsert(&pMutex->mutexList, & pTask->eventListItem);
 8000c34:	687a      	ldr	r2, [r7, #4]
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	331c      	adds	r3, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4610      	mov	r0, r2
 8000c3e:	f7ff fe62 	bl	8000906 <RTOS_listInsert>

		if(waitTicks != RTOS_WAITFOREVER)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c48:	d003      	beq.n	8000c52 <RTOS_mutexLock+0xae>
		{
			/* Add the task to timer's list */
			RTOS_taskAddToTimerList(pTask, waitTicks);
 8000c4a:	6839      	ldr	r1, [r7, #0]
 8000c4c:	69f8      	ldr	r0, [r7, #28]
 8000c4e:	f000 fb01 	bl	8001254 <RTOS_taskAddToTimerList>
		}
		else
		{

		}
		returnStatus = RTOS_DELAY;
 8000c52:	2301      	movs	r3, #1
 8000c54:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Invoke a pendSV exception */
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000c58:	4a05      	ldr	r2, [pc, #20]	; (8000c70 <RTOS_mutexLock+0xcc>)
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <RTOS_mutexLock+0xcc>)
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c62:	6053      	str	r3, [r2, #4]
	else
	{

	}

	return returnStatus;
 8000c64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <RTOS_mutexUnlock>:
 *  pMutex -> Pointer to the mutex
 * Return:
 * 	None
 */
void RTOS_mutexUnlock(RTOS_mutex_t* pMutex)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	f3bf 8f5f 	dmb	sy
	/* Data Memory Barrier */
	__DMB();
	/* Unlock the mutex */
	pMutex->value = RTOS_MUTEX_FREE;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2201      	movs	r2, #1
 8000c84:	611a      	str	r2, [r3, #16]
	/* Check if any tasks are blocked */
	if(pMutex->mutexList.numListItems > 0)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d014      	beq.n	8000cb8 <RTOS_mutexUnlock+0x44>
	{
		/* Remove a task from the mutex list */
		RTOS_task_t* pTask = pMutex->mutexList.endItem.pPrev->pTask;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	689b      	ldr	r3, [r3, #8]
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60fb      	str	r3, [r7, #12]
		RTOS_listRemove(& pTask->eventListItem);
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	331c      	adds	r3, #28
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fe72 	bl	8000984 <RTOS_listRemove>
		/* Check if the task was delayed then remove it from delay list */
		if(pTask->listItem.pList != NULL)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	691b      	ldr	r3, [r3, #16]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d004      	beq.n	8000cb2 <RTOS_mutexUnlock+0x3e>
		{
			RTOS_listRemove(& pTask->listItem);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	3308      	adds	r3, #8
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fe69 	bl	8000984 <RTOS_listRemove>
		else
		{

		}
		/* Place this task in the ready list */
		RTOS_taskAddToReadyList(pTask);
 8000cb2:	68f8      	ldr	r0, [r7, #12]
 8000cb4:	f000 fa92 	bl	80011dc <RTOS_taskAddToReadyList>
	}
	else
	{

	}
}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <RTOS_idleTaskFunc>:
 * 	None
 * Return:
 * 	None
 */
static void RTOS_idleTaskFunc(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
	while(1);
 8000cc4:	e7fe      	b.n	8000cc4 <RTOS_idleTaskFunc+0x4>
	...

08000cc8 <RTOS_schedulerStart>:
 * 	None
 * Return:
 * 	None
 */
void RTOS_schedulerStart(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af02      	add	r7, sp, #8
	/* Create the idle task */
	RTOS_taskCreate(&RTOS_idleTask, RTOS_idleTaskStack, IDLE_TASK_STACK_SIZE, RTOS_idleTaskFunc, MAX_PRIORITY_LEVEL - 1);
 8000cce:	230f      	movs	r3, #15
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	4b17      	ldr	r3, [pc, #92]	; (8000d30 <RTOS_schedulerStart+0x68>)
 8000cd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd8:	4916      	ldr	r1, [pc, #88]	; (8000d34 <RTOS_schedulerStart+0x6c>)
 8000cda:	4817      	ldr	r0, [pc, #92]	; (8000d38 <RTOS_schedulerStart+0x70>)
 8000cdc:	f000 f992 	bl	8001004 <RTOS_taskCreate>

	/* Switch to the top priority ready task */
	RTOS_taskSwitch();
 8000ce0:	f000 fad8 	bl	8001294 <RTOS_taskSwitch>

	/* Get the new ready task */
	RTOS_task_t* pNewRunningTask = RTOS_taskGetRunning();
 8000ce4:	f000 fa6e 	bl	80011c4 <RTOS_taskGetRunning>
 8000ce8:	60f8      	str	r0, [r7, #12]

	/* Set the exception return value */
	RTOS_SVC_excReturn = MEM32WORD(pNewRunningTask->pStack);
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <RTOS_schedulerStart+0x74>)
 8000cf2:	6013      	str	r3, [r2, #0]

	/* Set the Process Stack Pointer */
	__set_PSP(pNewRunningTask->pStack + 10 * 4);
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3328      	adds	r3, #40	; 0x28
 8000cfa:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	f383 8809 	msr	PSP, r3

	/* Set the control register */
	__set_CONTROL(MEM32WORD(pNewRunningTask->pStack + (1 << 2)));
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	3304      	adds	r3, #4
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb");
 8000d12:	f3bf 8f6f 	isb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed. */
	__ISB();

	/* Reset SysTick Count */
	RTOS_systickCount = 0;
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <RTOS_schedulerStart+0x78>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	f383 8811 	msr	BASEPRI, r3

	/* Enable all interrupts */
	__set_BASEPRI(0);

}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	08000cc1 	.word	0x08000cc1
 8000d34:	20000078 	.word	0x20000078
 8000d38:	2000003c 	.word	0x2000003c
 8000d3c:	20001194 	.word	0x20001194
 8000d40:	20001190 	.word	0x20001190

08000d44 <RTOS_SysTick_Handler>:
 * 	None
 * Return:
 * 	None
 */
void RTOS_SysTick_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
 	/* Check for delayed tasks to be unblocked */
 	RTOS_taskDelayCheck();
 8000d48:	f000 fb20 	bl	800138c <RTOS_taskDelayCheck>

	/* Invoke a pendSV exception */
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <RTOS_SysTick_Handler+0x24>)
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <RTOS_SysTick_Handler+0x24>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d56:	6053      	str	r3, [r2, #4]

    /* Increment SysTick Count */
    RTOS_systickCount++;
 8000d58:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <RTOS_SysTick_Handler+0x28>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4a03      	ldr	r2, [pc, #12]	; (8000d6c <RTOS_SysTick_Handler+0x28>)
 8000d60:	6013      	str	r3, [r2, #0]
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000ed00 	.word	0xe000ed00
 8000d6c:	20001190 	.word	0x20001190

08000d70 <RTOS_schedulerGetSystickCount>:
 * 	None
 * Return:
 * 	None
 */
uint32_t RTOS_schedulerGetSystickCount(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
	return RTOS_systickCount;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <RTOS_schedulerGetSystickCount+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20001190 	.word	0x20001190

08000d88 <RTOS_semaphoreInit>:
 *  value -> Value to which the semaphore will be initialized
 * Return:
 * 	None
 */
void RTOS_semaphoreInit(RTOS_semaphore_t* pSemaphore, uint32_t value)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
	ASSERT(pSemaphore != 0);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d101      	bne.n	8000d9c <RTOS_semaphoreInit+0x14>
  __ASM volatile ("cpsid i" : : : "memory");
 8000d98:	b672      	cpsid	i
 8000d9a:	e7fe      	b.n	8000d9a <RTOS_semaphoreInit+0x12>
	/* Initialize the semaphores list */
	RTOS_listInit(&pSemaphore->semaphoreList);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fd62 	bl	8000868 <RTOS_listInit>
	/* Set the semaphores' value */
	pSemaphore->value = value;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	611a      	str	r2, [r3, #16]
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <RTOS_semaphoreWait>:
 * Return:
 * 	States whether the semaphore was acquired successfully or not
 */

RTOS_returnStatus RTOS_semaphoreWait(RTOS_semaphore_t* pSemaphore, uint32_t waitTicks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
	uint8_t terminate = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t value;
	RTOS_returnStatus returnStatus = RTOS_FAIL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Keep trying*/
	while(!terminate)
 8000dca:	e025      	b.n	8000e18 <RTOS_semaphoreWait+0x64>
	{
		/* Load the semaphore value */
		value = __LDREXW(&pSemaphore->value);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3310      	adds	r3, #16
 8000dd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	e853 3f00 	ldrex	r3, [r3]
 8000dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	623b      	str	r3, [r7, #32]
		/* Check if the semaphore can be acquired */
		if(value > 0)
 8000dde:	6a3b      	ldr	r3, [r7, #32]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d016      	beq.n	8000e12 <RTOS_semaphoreWait+0x5e>
		{
			/* Decrement the semaphore value and attempt to store the semaphore */
			if( __STREXW(value - 1, &pSemaphore->value) == 0)
 8000de4:	6a3b      	ldr	r3, [r7, #32]
 8000de6:	1e5a      	subs	r2, r3, #1
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3310      	adds	r3, #16
 8000dec:	613a      	str	r2, [r7, #16]
 8000dee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000df0:	68f9      	ldr	r1, [r7, #12]
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	e841 2300 	strex	r3, r2, [r1]
 8000df8:	60bb      	str	r3, [r7, #8]
   return(result);
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10b      	bne.n	8000e18 <RTOS_semaphoreWait+0x64>
  __ASM volatile ("dmb");
 8000e00:	f3bf 8f5f 	dmb	sy
			{
				/* Data Memory Barrier */
				__DMB();
				/* Set the semaphore as acquired */
				returnStatus = RTOS_SUCCESS;
 8000e04:	2302      	movs	r3, #2
 8000e06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				/* End loop */
				terminate = 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000e10:	e002      	b.n	8000e18 <RTOS_semaphoreWait+0x64>
			}
		}
		else
		{
			/* End loop */
			terminate = 1;
 8000e12:	2301      	movs	r3, #1
 8000e14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(!terminate)
 8000e18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d0d5      	beq.n	8000dcc <RTOS_semaphoreWait+0x18>
		}
	}


	/* If the semaphore was not acquired successfully */
	if(returnStatus == RTOS_FAIL && waitTicks > 0)
 8000e20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d126      	bne.n	8000e76 <RTOS_semaphoreWait+0xc2>
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d023      	beq.n	8000e76 <RTOS_semaphoreWait+0xc2>
	{
		/* Get the currently running task */
		RTOS_task_t* pTask = RTOS_taskGetRunning();
 8000e2e:	f000 f9c9 	bl	80011c4 <RTOS_taskGetRunning>
 8000e32:	61f8      	str	r0, [r7, #28]
		/* Remove the task from the ready list */
		RTOS_listRemove(& pTask->listItem);
 8000e34:	69fb      	ldr	r3, [r7, #28]
 8000e36:	3308      	adds	r3, #8
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fda3 	bl	8000984 <RTOS_listRemove>
		/* Set the items ordering value for the semaphores list */
		pTask->eventListItem.orderValue = pTask->priority;
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
		/* Add the task to the semaphores list */
		RTOS_listInsert(&pSemaphore->semaphoreList, & pTask->eventListItem);
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	331c      	adds	r3, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4610      	mov	r0, r2
 8000e50:	f7ff fd59 	bl	8000906 <RTOS_listInsert>

		/* Add the task to timer's list */
		if(waitTicks != RTOS_WAITFOREVER)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e5a:	d003      	beq.n	8000e64 <RTOS_semaphoreWait+0xb0>
		{
			RTOS_taskAddToTimerList(pTask, waitTicks);
 8000e5c:	6839      	ldr	r1, [r7, #0]
 8000e5e:	69f8      	ldr	r0, [r7, #28]
 8000e60:	f000 f9f8 	bl	8001254 <RTOS_taskAddToTimerList>
		}
		else
		{

		}
		returnStatus = RTOS_DELAY;
 8000e64:	2301      	movs	r3, #1
 8000e66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Invoke a pendSV exception */
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000e6a:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <RTOS_semaphoreWait+0xd0>)
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <RTOS_semaphoreWait+0xd0>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	6053      	str	r3, [r2, #4]
	else
	{

	}

	return returnStatus;
 8000e76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <RTOS_semaphoreSignal>:
 *  pSemaphore -> Pointer to the semaphore
 * Return:
 * 	None
 */
void RTOS_semaphoreSignal(RTOS_semaphore_t* pSemaphore)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	/* Keep trying to acquire the semaphore */
	uint32_t value;
	do
	{
		/* Load the semaphore value */
		value = __LDREXW(&pSemaphore->value);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3310      	adds	r3, #16
 8000e94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	e853 3f00 	ldrex	r3, [r3]
 8000e9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
		/* Increment the semaphore value */
		value++;
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
	}
	while( __STREXW(value, &pSemaphore->value) == 1);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3310      	adds	r3, #16
 8000eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eae:	61fa      	str	r2, [r7, #28]
 8000eb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	69fa      	ldr	r2, [r7, #28]
 8000eb6:	e841 2300 	strex	r3, r2, [r1]
 8000eba:	617b      	str	r3, [r7, #20]
   return(result);
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d0e6      	beq.n	8000e90 <RTOS_semaphoreSignal+0x8>
  __ASM volatile ("dmb");
 8000ec2:	f3bf 8f5f 	dmb	sy

	/* Data Memory Barrier */
	__DMB();

	/* Check if any tasks are blocked */
	if(pSemaphore->semaphoreList.numListItems > 0)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d014      	beq.n	8000ef8 <RTOS_semaphoreSignal+0x70>
	{
		/* Remove a task from the semaphore list */
		RTOS_task_t* pTask = pSemaphore->semaphoreList.endItem.pPrev->pTask;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	623b      	str	r3, [r7, #32]
		RTOS_listRemove(& pTask->eventListItem);
 8000ed6:	6a3b      	ldr	r3, [r7, #32]
 8000ed8:	331c      	adds	r3, #28
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fd52 	bl	8000984 <RTOS_listRemove>
		/* Check if the task was delayed then remove it from delay list */
		if(pTask->listItem.pList != NULL)
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
 8000ee2:	691b      	ldr	r3, [r3, #16]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d004      	beq.n	8000ef2 <RTOS_semaphoreSignal+0x6a>
		{
			RTOS_listRemove(& pTask->listItem);
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	3308      	adds	r3, #8
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fd49 	bl	8000984 <RTOS_listRemove>
		else
		{

		}
		/* Place this task in the ready list */
		RTOS_taskAddToReadyList(pTask);
 8000ef2:	6a38      	ldr	r0, [r7, #32]
 8000ef4:	f000 f972 	bl	80011dc <RTOS_taskAddToReadyList>
	}
	else
	{

	}
}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	; 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <RTOS_spinInit>:
 *  value -> Value to which the SpinLock will be initialized
 * Return:
 * 	None
 */
void RTOS_spinInit(RTOS_spinLock_t* pSpinLock, uint32_t value)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	ASSERT(pSpinLock != NULL);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d101      	bne.n	8000f14 <RTOS_spinInit+0x14>
 8000f10:	b672      	cpsid	i
 8000f12:	e7fe      	b.n	8000f12 <RTOS_spinInit+0x12>
	ASSERT((value == RTOS_SPINLOCK_USED) || (value == RTOS_SPINLOCK_FREE));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d004      	beq.n	8000f24 <RTOS_spinInit+0x24>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d001      	beq.n	8000f24 <RTOS_spinInit+0x24>
 8000f20:	b672      	cpsid	i
 8000f22:	e7fe      	b.n	8000f22 <RTOS_spinInit+0x22>
	/* Set the mutex value */
	pSpinLock->value = value;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	683a      	ldr	r2, [r7, #0]
 8000f28:	601a      	str	r2, [r3, #0]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <RTOS_spinLock>:
 * Return:
 * 	States whether the spinlock was acquired successfully or not
 */

RTOS_returnStatus RTOS_spinLock(RTOS_spinLock_t* pSpinLock)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b08b      	sub	sp, #44	; 0x2c
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
	uint8_t terminate = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t value;
	RTOS_returnStatus returnStatus = RTOS_DELAY;
 8000f44:	2301      	movs	r3, #1
 8000f46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* Keep trying until this section does not get preempted */
	while(!terminate)
 8000f4a:	e022      	b.n	8000f92 <RTOS_spinLock+0x5c>
	{
		/* Load the spinlock value */
		value = __LDREXW(&pSpinLock->value);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	e853 3f00 	ldrex	r3, [r3]
 8000f56:	61bb      	str	r3, [r7, #24]
   return(result);
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	623b      	str	r3, [r7, #32]
		/* Check if the spinlock can be acquired */
		if(value == RTOS_SPINLOCK_FREE)
 8000f5c:	6a3b      	ldr	r3, [r7, #32]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d114      	bne.n	8000f8c <RTOS_spinLock+0x56>
		{
			/* Attempt to store the spinlock */
			if( __STREXW(value, &pSpinLock->value) == 0)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6a3a      	ldr	r2, [r7, #32]
 8000f66:	617a      	str	r2, [r7, #20]
 8000f68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f6a:	6939      	ldr	r1, [r7, #16]
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	e841 2300 	strex	r3, r2, [r1]
 8000f72:	60fb      	str	r3, [r7, #12]
   return(result);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d10b      	bne.n	8000f92 <RTOS_spinLock+0x5c>
  __ASM volatile ("dmb");
 8000f7a:	f3bf 8f5f 	dmb	sy
			{
				/* Data Memory Barrier */
				__DMB();
				/* Set the spinlock as acquired */
				returnStatus = RTOS_SUCCESS;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				/* End loop */
				terminate = 1;
 8000f84:	2301      	movs	r3, #1
 8000f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000f8a:	e002      	b.n	8000f92 <RTOS_spinLock+0x5c>
			}
		}
		else
		{
			/* End loop */
			terminate = 1;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(!terminate)
 8000f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0d8      	beq.n	8000f4c <RTOS_spinLock+0x16>

		}

	}

	return returnStatus;
 8000f9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	372c      	adds	r7, #44	; 0x2c
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <RTOS_spinUnlock>:
 *  pSpinLock -> Pointer to the spinlock
 * Return:
 * 	None
 */
void RTOS_spinUnlock(RTOS_spinLock_t* pSpinLock)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	f3bf 8f5f 	dmb	sy
	/* Data Memory Barrier */
	__DMB();
	/* Unlock the spinlock */
	pSpinLock->value = RTOS_SPINLOCK_FREE;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	601a      	str	r2, [r3, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <RTOS_taskListsInit>:
 *  None
 * Return:
 * 	None
 */
void RTOS_taskListsInit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
	/* Initialize the ready lists */
	uint32_t i;
	for(i = 0; i < MAX_PRIORITY_LEVEL; i++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	e009      	b.n	8000fe8 <RTOS_taskListsInit+0x20>
		RTOS_listInit(&RTOS_readyList[i]);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	011b      	lsls	r3, r3, #4
 8000fd8:	4a08      	ldr	r2, [pc, #32]	; (8000ffc <RTOS_taskListsInit+0x34>)
 8000fda:	4413      	add	r3, r2
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fc43 	bl	8000868 <RTOS_listInit>
	for(i = 0; i < MAX_PRIORITY_LEVEL; i++)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2b0f      	cmp	r3, #15
 8000fec:	d9f2      	bls.n	8000fd4 <RTOS_taskListsInit+0xc>

	/* Initialize the delayed list */
	RTOS_listInit(&RTOS_delayList);
 8000fee:	4804      	ldr	r0, [pc, #16]	; (8001000 <RTOS_taskListsInit+0x38>)
 8000ff0:	f7ff fc3a 	bl	8000868 <RTOS_listInit>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	2000107c 	.word	0x2000107c
 8001000:	2000117c 	.word	0x2000117c

08001004 <RTOS_taskCreate>:
 * 	priority -> The task priority level
 * Return:
 * 	None
 */
void RTOS_taskCreate(RTOS_task_t* pTask, RTOS_stack_t* pStack, uint32_t stackSize, void* pFunction, uint32_t priority)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
 8001010:	603b      	str	r3, [r7, #0]
	ASSERT(pTask != NULL);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <RTOS_taskCreate+0x18>
 8001018:	b672      	cpsid	i
 800101a:	e7fe      	b.n	800101a <RTOS_taskCreate+0x16>
	ASSERT(pStack != NULL);
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d101      	bne.n	8001026 <RTOS_taskCreate+0x22>
 8001022:	b672      	cpsid	i
 8001024:	e7fe      	b.n	8001024 <RTOS_taskCreate+0x20>
	ASSERT(stackSize <= MAX_STACK_SIZE);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800102c:	d901      	bls.n	8001032 <RTOS_taskCreate+0x2e>
 800102e:	b672      	cpsid	i
 8001030:	e7fe      	b.n	8001030 <RTOS_taskCreate+0x2c>
	ASSERT(pFunction != NULL);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d101      	bne.n	800103c <RTOS_taskCreate+0x38>
 8001038:	b672      	cpsid	i
 800103a:	e7fe      	b.n	800103a <RTOS_taskCreate+0x36>
	ASSERT((priority < MAX_PRIORITY_LEVEL) && (priority >= 0));
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b0f      	cmp	r3, #15
 8001040:	d901      	bls.n	8001046 <RTOS_taskCreate+0x42>
 8001042:	b672      	cpsid	i
 8001044:	e7fe      	b.n	8001044 <RTOS_taskCreate+0x40>
	 * PC
	 * xPSR
	 */

	/* To ensure that the stack is 8 byte aligned */
	stackSize = (stackSize / 8) * 8;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f023 0307 	bic.w	r3, r3, #7
 800104c:	607b      	str	r3, [r7, #4]

	/* Initialize the stack pointer */
	pTask->pStack = (uint32_t)pStack + stackSize * 8 - 18 * 4;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	00da      	lsls	r2, r3, #3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4413      	add	r3, r2
 8001056:	f1a3 0248 	sub.w	r2, r3, #72	; 0x48
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	601a      	str	r2, [r3, #0]

	/* For testing */
	MEM32WORD(pTask->pStack + (2 << 2)) = 0x4;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	3308      	adds	r3, #8
 8001064:	461a      	mov	r2, r3
 8001066:	2304      	movs	r3, #4
 8001068:	6013      	str	r3, [r2, #0]
	MEM32WORD(pTask->pStack + (3 << 2)) = 0x5;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	330c      	adds	r3, #12
 8001070:	461a      	mov	r2, r3
 8001072:	2305      	movs	r3, #5
 8001074:	6013      	str	r3, [r2, #0]
	MEM32WORD(pTask->pStack + (4 << 2)) = 0x6;
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	3310      	adds	r3, #16
 800107c:	461a      	mov	r2, r3
 800107e:	2306      	movs	r3, #6
 8001080:	6013      	str	r3, [r2, #0]
	MEM32WORD(pTask->pStack + (5 << 2)) = 0x7;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	3314      	adds	r3, #20
 8001088:	461a      	mov	r2, r3
 800108a:	2307      	movs	r3, #7
 800108c:	6013      	str	r3, [r2, #0]
	MEM32WORD(pTask->pStack + (6 << 2)) = 0x8;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3318      	adds	r3, #24
 8001094:	461a      	mov	r2, r3
 8001096:	2308      	movs	r3, #8
 8001098:	6013      	str	r3, [r2, #0]
	MEM32WORD(pTask->pStack + (7 << 2)) = 0x9;
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	331c      	adds	r3, #28
 80010a0:	461a      	mov	r2, r3
 80010a2:	2309      	movs	r3, #9
 80010a4:	6013      	str	r3, [r2, #0]
	MEM32WORD(pTask->pStack + (8 << 2)) = 0x10;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3320      	adds	r3, #32
 80010ac:	461a      	mov	r2, r3
 80010ae:	2310      	movs	r3, #16
 80010b0:	6013      	str	r3, [r2, #0]
	MEM32WORD(pTask->pStack + (9 << 2)) = 0x11;
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3324      	adds	r3, #36	; 0x24
 80010b8:	461a      	mov	r2, r3
 80010ba:	2311      	movs	r3, #17
 80010bc:	6013      	str	r3, [r2, #0]
	MEM32WORD(pTask->pStack + (10 << 2)) = 0x1;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	3328      	adds	r3, #40	; 0x28
 80010c4:	461a      	mov	r2, r3
 80010c6:	2301      	movs	r3, #1
 80010c8:	6013      	str	r3, [r2, #0]
	MEM32WORD(pTask->pStack + (11 << 2)) = 0x2;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	332c      	adds	r3, #44	; 0x2c
 80010d0:	461a      	mov	r2, r3
 80010d2:	2302      	movs	r3, #2
 80010d4:	6013      	str	r3, [r2, #0]
	MEM32WORD(pTask->pStack + (12 << 2)) = 0x3;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	3330      	adds	r3, #48	; 0x30
 80010dc:	461a      	mov	r2, r3
 80010de:	2303      	movs	r3, #3
 80010e0:	6013      	str	r3, [r2, #0]
	MEM32WORD(pTask->pStack + (13 << 2)) = 0x4;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	3334      	adds	r3, #52	; 0x34
 80010e8:	461a      	mov	r2, r3
 80010ea:	2304      	movs	r3, #4
 80010ec:	6013      	str	r3, [r2, #0]
	MEM32WORD(pTask->pStack + (14 << 2)) = 0x12;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3338      	adds	r3, #56	; 0x38
 80010f4:	461a      	mov	r2, r3
 80010f6:	2312      	movs	r3, #18
 80010f8:	6013      	str	r3, [r2, #0]

	/* Initialize EXC_RETURN (Return to task mode using PSP) */
	MEM32WORD(pTask->pStack) = 0xFFFFFFFDUL;
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	f06f 0302 	mvn.w	r3, #2
 8001104:	6013      	str	r3, [r2, #0]

	/* Initialize the CONTROL Register (No FPU, PSP, Unprivileged mode)*/
	MEM32WORD(pTask->pStack + (1 << 2)) = 0x3;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3304      	adds	r3, #4
 800110c:	461a      	mov	r2, r3
 800110e:	2303      	movs	r3, #3
 8001110:	6013      	str	r3, [r2, #0]

	/* Initialize the program counter */
	MEM32WORD(pTask->pStack + (16 << 2)) = (uint32_t)pFunction;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	3340      	adds	r3, #64	; 0x40
 8001118:	461a      	mov	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	6013      	str	r3, [r2, #0]

	/* Initialize the xPSR register to only Thumb mode*/
	MEM32WORD(pTask->pStack + (17 << 2)) = 0x01000000;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	3344      	adds	r3, #68	; 0x44
 8001124:	461a      	mov	r2, r3
 8001126:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800112a:	6013      	str	r3, [r2, #0]

	/* Set the priority level */
	pTask->priority = priority;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	605a      	str	r2, [r3, #4]

	/* Set task ID */
	pTask->taskId = numTasks;
 8001132:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <RTOS_taskCreate+0x1ac>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	631a      	str	r2, [r3, #48]	; 0x30
	numTasks++;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <RTOS_taskCreate+0x1ac>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	4a1b      	ldr	r2, [pc, #108]	; (80011b0 <RTOS_taskCreate+0x1ac>)
 8001142:	6013      	str	r3, [r2, #0]

	/* Set the task state to ready */
	pTask->taskState = RTOS_TASKREADY;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	/* Set the task's list item task pointer */
	pTask->listItem.pTask = pTask;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	615a      	str	r2, [r3, #20]
	pTask->eventListItem.pTask = pTask;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	68fa      	ldr	r2, [r7, #12]
 8001156:	629a      	str	r2, [r3, #40]	; 0x28

	/* Set the task's list item to none */
	pTask->listItem.pList = NULL;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
	pTask->eventListItem.pList = NULL;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	2200      	movs	r2, #0
 8001162:	625a      	str	r2, [r3, #36]	; 0x24

	/* Add the task to the ready list */
	RTOS_listInsertEnd(&RTOS_readyList[priority], &pTask->listItem);
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <RTOS_taskCreate+0x1b0>)
 800116a:	441a      	add	r2, r3
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	3308      	adds	r3, #8
 8001170:	4619      	mov	r1, r3
 8001172:	4610      	mov	r0, r2
 8001174:	f7ff fb96 	bl	80008a4 <RTOS_listInsertEnd>

	/* Check if the new task has a new highest priority */
	if(priority < currentTopPriority)
 8001178:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <RTOS_taskCreate+0x1b4>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	429a      	cmp	r2, r3
 8001180:	d202      	bcs.n	8001188 <RTOS_taskCreate+0x184>
	{
		currentTopPriority = priority;
 8001182:	4a0d      	ldr	r2, [pc, #52]	; (80011b8 <RTOS_taskCreate+0x1b4>)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	6013      	str	r3, [r2, #0]
	{

	}

	/* Check if the scheduler has started and the currently running task has a lower priority */
	if((pRunningTask != NULL) && (priority < pRunningTask->priority))
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <RTOS_taskCreate+0x1b8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00b      	beq.n	80011a8 <RTOS_taskCreate+0x1a4>
 8001190:	4b0a      	ldr	r3, [pc, #40]	; (80011bc <RTOS_taskCreate+0x1b8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	429a      	cmp	r2, r3
 800119a:	d905      	bls.n	80011a8 <RTOS_taskCreate+0x1a4>
	{
		/* Invoke a pendSV exception */
	    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800119c:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <RTOS_taskCreate+0x1bc>)
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <RTOS_taskCreate+0x1bc>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a6:	6053      	str	r3, [r2, #4]
	else
	{

	}

}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000118c 	.word	0x2000118c
 80011b4:	2000107c 	.word	0x2000107c
 80011b8:	20000000 	.word	0x20000000
 80011bc:	20001078 	.word	0x20001078
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <RTOS_taskGetRunning>:
 *  None
 * Return:
 * 	Pointer to the running task
 */
RTOS_task_t* RTOS_taskGetRunning(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
	return pRunningTask;
 80011c8:	4b03      	ldr	r3, [pc, #12]	; (80011d8 <RTOS_taskGetRunning+0x14>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	20001078 	.word	0x20001078

080011dc <RTOS_taskAddToReadyList>:
 *  pTask -> The task to be inserted in the ready list
 * Return:
 * 	None
 */
void RTOS_taskAddToReadyList(RTOS_task_t* pTask)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	RTOS_listItem_t* pListItem = &pTask->listItem;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3308      	adds	r3, #8
 80011e8:	60fb      	str	r3, [r7, #12]
	/* Add the task to ready list */
	RTOS_listInsertEnd(&RTOS_readyList[pTask->priority], pListItem);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	4a14      	ldr	r2, [pc, #80]	; (8001244 <RTOS_taskAddToReadyList+0x68>)
 80011f2:	4413      	add	r3, r2
 80011f4:	68f9      	ldr	r1, [r7, #12]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fb54 	bl	80008a4 <RTOS_listInsertEnd>
	/* Set the task state as ready */
	pTask->taskState = RTOS_TASKREADY;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	/* Check if the task has a new highest priority */
	if(pTask->priority < currentTopPriority)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	685a      	ldr	r2, [r3, #4]
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <RTOS_taskAddToReadyList+0x6c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d203      	bcs.n	8001218 <RTOS_taskAddToReadyList+0x3c>
	{
		/* Set the new top priority */
		currentTopPriority = pTask->priority;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	4a0c      	ldr	r2, [pc, #48]	; (8001248 <RTOS_taskAddToReadyList+0x6c>)
 8001216:	6013      	str	r3, [r2, #0]
	else
	{

	}

	if(pRunningTask != NULL &&
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <RTOS_taskAddToReadyList+0x70>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00c      	beq.n	800123a <RTOS_taskAddToReadyList+0x5e>
	(pTask->priority < pRunningTask->priority))
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <RTOS_taskAddToReadyList+0x70>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
	if(pRunningTask != NULL &&
 800122a:	429a      	cmp	r2, r3
 800122c:	d205      	bcs.n	800123a <RTOS_taskAddToReadyList+0x5e>
	{
		/* Invoke a pendSV exception */
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800122e:	4a08      	ldr	r2, [pc, #32]	; (8001250 <RTOS_taskAddToReadyList+0x74>)
 8001230:	4b07      	ldr	r3, [pc, #28]	; (8001250 <RTOS_taskAddToReadyList+0x74>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	6053      	str	r3, [r2, #4]
	}
	else
	{
	}
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000107c 	.word	0x2000107c
 8001248:	20000000 	.word	0x20000000
 800124c:	20001078 	.word	0x20001078
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <RTOS_taskAddToTimerList>:
 *  waitTicks -> Number of systicks to be delayed
 * Return:
 * 	None
 */
void RTOS_taskAddToTimerList(RTOS_task_t* pTask, uint32_t waitTicks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
	/* Get the list item */
	RTOS_listItem_t* pListItem = & pTask->listItem;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3308      	adds	r3, #8
 8001262:	60fb      	str	r3, [r7, #12]

	/* Set the delay amount */
	pListItem->orderValue = RTOS_schedulerGetSystickCount() + waitTicks;
 8001264:	f7ff fd84 	bl	8000d70 <RTOS_schedulerGetSystickCount>
 8001268:	4602      	mov	r2, r0
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	441a      	add	r2, r3
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	611a      	str	r2, [r3, #16]

	/* Add the task to the delayed list */
	RTOS_listInsert(&RTOS_delayList, pListItem);
 8001272:	68f9      	ldr	r1, [r7, #12]
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <RTOS_taskAddToTimerList+0x38>)
 8001276:	f7ff fb46 	bl	8000906 <RTOS_listInsert>

	/* Set the task state to blocked */
	pRunningTask->taskState = RTOS_TASKBLOCKED;
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <RTOS_taskAddToTimerList+0x3c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2202      	movs	r2, #2
 8001280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	2000117c 	.word	0x2000117c
 8001290:	20001078 	.word	0x20001078

08001294 <RTOS_taskSwitch>:
 *  None
 * Return:
 * 	None
 */
void RTOS_taskSwitch(void)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
	/* Check if the current top priority list became empty */
	while(RTOS_readyList[currentTopPriority].numListItems == 0)
 800129a:	e004      	b.n	80012a6 <RTOS_taskSwitch+0x12>
	{
		currentTopPriority++;
 800129c:	4b27      	ldr	r3, [pc, #156]	; (800133c <RTOS_taskSwitch+0xa8>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	3301      	adds	r3, #1
 80012a2:	4a26      	ldr	r2, [pc, #152]	; (800133c <RTOS_taskSwitch+0xa8>)
 80012a4:	6013      	str	r3, [r2, #0]
	while(RTOS_readyList[currentTopPriority].numListItems == 0)
 80012a6:	4b25      	ldr	r3, [pc, #148]	; (800133c <RTOS_taskSwitch+0xa8>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a25      	ldr	r2, [pc, #148]	; (8001340 <RTOS_taskSwitch+0xac>)
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	4413      	add	r3, r2
 80012b0:	330c      	adds	r3, #12
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f1      	beq.n	800129c <RTOS_taskSwitch+0x8>
	}

	/* Get the next task in the list */
	RTOS_readyList[currentTopPriority].pIndex = RTOS_readyList[currentTopPriority].pIndex->pNext;
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <RTOS_taskSwitch+0xa8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a1f      	ldr	r2, [pc, #124]	; (800133c <RTOS_taskSwitch+0xa8>)
 80012be:	6812      	ldr	r2, [r2, #0]
 80012c0:	491f      	ldr	r1, [pc, #124]	; (8001340 <RTOS_taskSwitch+0xac>)
 80012c2:	0112      	lsls	r2, r2, #4
 80012c4:	440a      	add	r2, r1
 80012c6:	6812      	ldr	r2, [r2, #0]
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	491d      	ldr	r1, [pc, #116]	; (8001340 <RTOS_taskSwitch+0xac>)
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	440b      	add	r3, r1
 80012d0:	601a      	str	r2, [r3, #0]

	/* Check if the current index is the end item */
	if(RTOS_readyList[currentTopPriority].pIndex == (RTOS_listItem_t*) &RTOS_readyList[currentTopPriority].endItem)
 80012d2:	4b1a      	ldr	r3, [pc, #104]	; (800133c <RTOS_taskSwitch+0xa8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a1a      	ldr	r2, [pc, #104]	; (8001340 <RTOS_taskSwitch+0xac>)
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	4413      	add	r3, r2
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <RTOS_taskSwitch+0xa8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	4916      	ldr	r1, [pc, #88]	; (8001340 <RTOS_taskSwitch+0xac>)
 80012e6:	440b      	add	r3, r1
 80012e8:	3304      	adds	r3, #4
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d10c      	bne.n	8001308 <RTOS_taskSwitch+0x74>
	{
		/* Increment the index */
		RTOS_readyList[currentTopPriority].pIndex = RTOS_readyList[currentTopPriority].pIndex->pNext;
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <RTOS_taskSwitch+0xa8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <RTOS_taskSwitch+0xa8>)
 80012f4:	6812      	ldr	r2, [r2, #0]
 80012f6:	4912      	ldr	r1, [pc, #72]	; (8001340 <RTOS_taskSwitch+0xac>)
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	440a      	add	r2, r1
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	490f      	ldr	r1, [pc, #60]	; (8001340 <RTOS_taskSwitch+0xac>)
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	440b      	add	r3, r1
 8001306:	601a      	str	r2, [r3, #0]
	}

	RTOS_task_t* pTask = RTOS_readyList[currentTopPriority].pIndex->pTask;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <RTOS_taskSwitch+0xa8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <RTOS_taskSwitch+0xac>)
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	4413      	add	r3, r2
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	607b      	str	r3, [r7, #4]

	/* Set the currently running task */
	pRunningTask = pTask;
 8001318:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <RTOS_taskSwitch+0xb0>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
	runningTaskID = pTask->taskId;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a09      	ldr	r2, [pc, #36]	; (8001348 <RTOS_taskSwitch+0xb4>)
 8001324:	6013      	str	r3, [r2, #0]

	/* Set the task state to running */
	pTask->taskState = RTOS_TASKRUNNING;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000000 	.word	0x20000000
 8001340:	2000107c 	.word	0x2000107c
 8001344:	20001078 	.word	0x20001078
 8001348:	20000004 	.word	0x20000004

0800134c <RTOS_taskDelay>:
 *  waitTicks -> Number of system ticks to be delayed
 * Return:
 * 	None
 */
void RTOS_taskDelay(uint32_t waitTicks)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	/* Remove the current task from ready list */
	RTOS_listItem_t* pListItem = & pRunningTask->listItem;
 8001354:	4b0b      	ldr	r3, [pc, #44]	; (8001384 <RTOS_taskDelay+0x38>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3308      	adds	r3, #8
 800135a:	60fb      	str	r3, [r7, #12]
	RTOS_listRemove(pListItem);
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f7ff fb11 	bl	8000984 <RTOS_listRemove>

	/* Add the task to timer list */
	RTOS_taskAddToTimerList(pListItem->pTask, waitTicks);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff73 	bl	8001254 <RTOS_taskAddToTimerList>

	/* Invoke a pendSV exception */
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800136e:	4a06      	ldr	r2, [pc, #24]	; (8001388 <RTOS_taskDelay+0x3c>)
 8001370:	4b05      	ldr	r3, [pc, #20]	; (8001388 <RTOS_taskDelay+0x3c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	6053      	str	r3, [r2, #4]
}
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20001078 	.word	0x20001078
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <RTOS_taskDelayCheck>:
 *  None
 * Return:
 * 	None
 */
void RTOS_taskDelayCheck(void)
{
 800138c:	b590      	push	{r4, r7, lr}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
	if(RTOS_delayList.numListItems > 0)
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <RTOS_taskDelayCheck+0x3c>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d011      	beq.n	80013be <RTOS_taskDelayCheck+0x32>
	{
		/* Check for delayed tasks */
		RTOS_listItem_t* pListItem = RTOS_delayList.endItem.pPrev;
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <RTOS_taskDelayCheck+0x3c>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	607b      	str	r3, [r7, #4]
		if(pListItem->orderValue <= RTOS_schedulerGetSystickCount())
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691c      	ldr	r4, [r3, #16]
 80013a4:	f7ff fce4 	bl	8000d70 <RTOS_schedulerGetSystickCount>
 80013a8:	4603      	mov	r3, r0
 80013aa:	429c      	cmp	r4, r3
 80013ac:	d807      	bhi.n	80013be <RTOS_taskDelayCheck+0x32>
		{
			/* Remove the current task from delay list */
			RTOS_listRemove(pListItem);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fae8 	bl	8000984 <RTOS_listRemove>

			/* Add the task to the ready list */
			RTOS_taskAddToReadyList(pListItem->pTask);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff0f 	bl	80011dc <RTOS_taskAddToReadyList>
		}
	}
	else
	{
	}
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd90      	pop	{r4, r7, pc}
 80013c6:	bf00      	nop
 80013c8:	2000117c 	.word	0x2000117c

080013cc <RTOS_taskTerminate>:
 *  pTask -> Pointer to the task to be deleted
 * Return:
 * 	None
 */
void RTOS_taskTerminate(RTOS_task_t* pTask)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

	if(pTask == NULL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d102      	bne.n	80013e0 <RTOS_taskTerminate+0x14>
	{
		pTask = pRunningTask;
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <RTOS_taskTerminate+0x60>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	607b      	str	r3, [r7, #4]
	{

	}

	/* Remove the tasks items from any lists */
	if(pTask->listItem.pList != NULL)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d004      	beq.n	80013f2 <RTOS_taskTerminate+0x26>
	{
		RTOS_listRemove(& pTask->listItem);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3308      	adds	r3, #8
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff fac9 	bl	8000984 <RTOS_listRemove>
	{

	}


	if(pTask->eventListItem.pList != NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d004      	beq.n	8001404 <RTOS_taskTerminate+0x38>
	{
		RTOS_listRemove(& pTask->eventListItem);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	331c      	adds	r3, #28
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fac0 	bl	8000984 <RTOS_listRemove>
	{

	}

	/* Set the task as terminated */
	pTask->taskState = RTOS_TASKTERMINATED;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2203      	movs	r2, #3
 8001408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	/* If the task is the current running task */
	if(pTask == pRunningTask)
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <RTOS_taskTerminate+0x60>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	429a      	cmp	r2, r3
 8001414:	d105      	bne.n	8001422 <RTOS_taskTerminate+0x56>
	{
		/* Invoke a pendSV exception */
	    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8001416:	4a06      	ldr	r2, [pc, #24]	; (8001430 <RTOS_taskTerminate+0x64>)
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <RTOS_taskTerminate+0x64>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	6053      	str	r3, [r2, #4]
	}

}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20001078 	.word	0x20001078
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001434:	b480      	push	{r7}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800143e:	2300      	movs	r3, #0
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e076      	b.n	800153e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001450:	2201      	movs	r2, #1
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4013      	ands	r3, r2
 8001462:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d165      	bne.n	8001538 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	2103      	movs	r1, #3
 8001476:	fa01 f303 	lsl.w	r3, r1, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	401a      	ands	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	791b      	ldrb	r3, [r3, #4]
 800148a:	4619      	mov	r1, r3
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	fa01 f303 	lsl.w	r3, r1, r3
 8001494:	431a      	orrs	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	791b      	ldrb	r3, [r3, #4]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d003      	beq.n	80014aa <GPIO_Init+0x76>
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	791b      	ldrb	r3, [r3, #4]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d12e      	bne.n	8001508 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	2103      	movs	r1, #3
 80014b4:	fa01 f303 	lsl.w	r3, r1, r3
 80014b8:	43db      	mvns	r3, r3
 80014ba:	401a      	ands	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689a      	ldr	r2, [r3, #8]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	795b      	ldrb	r3, [r3, #5]
 80014c8:	4619      	mov	r1, r3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	431a      	orrs	r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	4619      	mov	r1, r3
 80014e2:	2301      	movs	r3, #1
 80014e4:	408b      	lsls	r3, r1
 80014e6:	43db      	mvns	r3, r3
 80014e8:	401a      	ands	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	7992      	ldrb	r2, [r2, #6]
 80014f6:	4611      	mov	r1, r2
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	b292      	uxth	r2, r2
 80014fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001500:	b292      	uxth	r2, r2
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68da      	ldr	r2, [r3, #12]
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	b29b      	uxth	r3, r3
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	2103      	movs	r1, #3
 8001514:	fa01 f303 	lsl.w	r3, r1, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	401a      	ands	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68da      	ldr	r2, [r3, #12]
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	79db      	ldrb	r3, [r3, #7]
 8001528:	4619      	mov	r1, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	3301      	adds	r3, #1
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d985      	bls.n	8001450 <GPIO_Init+0x1c>
    }
  }
}
 8001544:	bf00      	nop
 8001546:	371c      	adds	r7, #28
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	831a      	strh	r2, [r3, #24]
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800156e:	b480      	push	{r7}
 8001570:	b083      	sub	sp, #12
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
 8001576:	460b      	mov	r3, r1
 8001578:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	887a      	ldrh	r2, [r7, #2]
 800157e:	835a      	strh	r2, [r3, #26]
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	807b      	strh	r3, [r7, #2]
 8001598:	4613      	mov	r3, r2
 800159a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800159c:	787b      	ldrb	r3, [r7, #1]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	887a      	ldrh	r2, [r7, #2]
 80015a6:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80015a8:	e002      	b.n	80015b0 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	887a      	ldrh	r2, [r7, #2]
 80015ae:	835a      	strh	r2, [r3, #26]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d006      	beq.n	80015dc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80015ce:	490a      	ldr	r1, [pc, #40]	; (80015f8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80015d0:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80015d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80015da:	e006      	b.n	80015ea <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80015dc:	4906      	ldr	r1, [pc, #24]	; (80015f8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <RCC_AHB1PeriphClockCmd+0x3c>)
 80015e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	4013      	ands	r3, r2
 80015e8:	630b      	str	r3, [r1, #48]	; 0x30
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800

080015fc <func_1>:
RTOS_stack_t stack[2][512];
RTOS_mailBox_t mailbox;
uint8_t buffer[10];

void func_1(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
	uint8_t val[] = {1, 0, 1, 0, 1, 0, 1, 0, 1, 0};
 8001602:	4a0c      	ldr	r2, [pc, #48]	; (8001634 <func_1+0x38>)
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	ca07      	ldmia	r2, {r0, r1, r2}
 8001608:	c303      	stmia	r3!, {r0, r1}
 800160a:	801a      	strh	r2, [r3, #0]
	uint8_t idx;
	while(1)
	{
		for(idx = 0; idx < 10; idx ++)
 800160c:	2300      	movs	r3, #0
 800160e:	73fb      	strb	r3, [r7, #15]
 8001610:	e00b      	b.n	800162a <func_1+0x2e>
		{
			if(RTOS_SVC_mailBoxSend(&mailbox, &val[idx], 1000) == RTOS_SUCCESS)
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	1d3a      	adds	r2, r7, #4
 8001616:	4413      	add	r3, r2
 8001618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800161c:	4619      	mov	r1, r3
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <func_1+0x3c>)
 8001620:	f7fe fe40 	bl	80002a4 <RTOS_SVC_mailBoxSend>
		for(idx = 0; idx < 10; idx ++)
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	3301      	adds	r3, #1
 8001628:	73fb      	strb	r3, [r7, #15]
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	2b09      	cmp	r3, #9
 800162e:	d9f0      	bls.n	8001612 <func_1+0x16>
 8001630:	e7ec      	b.n	800160c <func_1+0x10>
 8001632:	bf00      	nop
 8001634:	08001a70 	.word	0x08001a70
 8001638:	20001198 	.word	0x20001198

0800163c <func_2>:
		}
	}
}

void func_2(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
	uint8_t val;
	while(1)
	{
		if(RTOS_SVC_mailBoxReceive(&mailbox, &val, RTOS_WAITFOREVER) == RTOS_SUCCESS)
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001648:	4619      	mov	r1, r3
 800164a:	480e      	ldr	r0, [pc, #56]	; (8001684 <func_2+0x48>)
 800164c:	f7fe fe2c 	bl	80002a8 <RTOS_SVC_mailBoxReceive>
 8001650:	4603      	mov	r3, r0
 8001652:	2b02      	cmp	r3, #2
 8001654:	d10c      	bne.n	8001670 <func_2+0x34>
		{
			GPIO_WriteBit(GPIOG, (1 << GREEN_LED), val);
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	461a      	mov	r2, r3
 800165a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800165e:	480a      	ldr	r0, [pc, #40]	; (8001688 <func_2+0x4c>)
 8001660:	f7ff ff94 	bl	800158c <GPIO_WriteBit>
			GPIO_ResetBits(GPIOG, (1 << RED_LED));
 8001664:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001668:	4807      	ldr	r0, [pc, #28]	; (8001688 <func_2+0x4c>)
 800166a:	f7ff ff80 	bl	800156e <GPIO_ResetBits>
 800166e:	e004      	b.n	800167a <func_2+0x3e>

		}
		else
		{
			GPIO_SetBits(GPIOG, (1 << RED_LED));
 8001670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001674:	4804      	ldr	r0, [pc, #16]	; (8001688 <func_2+0x4c>)
 8001676:	f7ff ff6b 	bl	8001550 <GPIO_SetBits>
		}
		RTOS_SVC_taskDelay(1000);
 800167a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800167e:	f7fe fdf9 	bl	8000274 <RTOS_SVC_taskDelay>
		if(RTOS_SVC_mailBoxReceive(&mailbox, &val, RTOS_WAITFOREVER) == RTOS_SUCCESS)
 8001682:	e7de      	b.n	8001642 <func_2+0x6>
 8001684:	20001198 	.word	0x20001198
 8001688:	40021800 	.word	0x40021800

0800168c <main>:




int main(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af02      	add	r7, sp, #8
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 8001692:	2101      	movs	r1, #1
 8001694:	2040      	movs	r0, #64	; 0x40
 8001696:	f7ff ff91 	bl	80015bc <RCC_AHB1PeriphClockCmd>
	GPIO_Init(GPIOG, &(GPIO_InitTypeDef){
 800169a:	4a14      	ldr	r2, [pc, #80]	; (80016ec <main+0x60>)
 800169c:	463b      	mov	r3, r7
 800169e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80016a6:	463b      	mov	r3, r7
 80016a8:	4619      	mov	r1, r3
 80016aa:	4811      	ldr	r0, [pc, #68]	; (80016f0 <main+0x64>)
 80016ac:	f7ff fec2 	bl	8001434 <GPIO_Init>
			GPIO_OType_PP,
			GPIO_PuPd_NOPULL
	  });


	RTOS_init();
 80016b0:	f7fe fe86 	bl	80003c0 <RTOS_init>

	RTOS_SVC_taskCreate(&task[0], stack[0], 512, func_1, 1);
 80016b4:	2301      	movs	r3, #1
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <main+0x68>)
 80016ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016be:	490e      	ldr	r1, [pc, #56]	; (80016f8 <main+0x6c>)
 80016c0:	480e      	ldr	r0, [pc, #56]	; (80016fc <main+0x70>)
 80016c2:	f7fe fdd5 	bl	8000270 <RTOS_SVC_taskCreate>
	RTOS_SVC_taskCreate(&task[1], stack[1], 512, func_2, 1);
 80016c6:	2301      	movs	r3, #1
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	4b0d      	ldr	r3, [pc, #52]	; (8001700 <main+0x74>)
 80016cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <main+0x78>)
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <main+0x7c>)
 80016d4:	f7fe fdcc 	bl	8000270 <RTOS_SVC_taskCreate>

	RTOS_SVC_mailBoxInit(&mailbox, &buffer, 10, 1);
 80016d8:	2301      	movs	r3, #1
 80016da:	220a      	movs	r2, #10
 80016dc:	490b      	ldr	r1, [pc, #44]	; (800170c <main+0x80>)
 80016de:	480c      	ldr	r0, [pc, #48]	; (8001710 <main+0x84>)
 80016e0:	f7fe fdde 	bl	80002a0 <RTOS_SVC_mailBoxInit>
	RTOS_SVC_schedulerStart();
 80016e4:	f7fe fdc2 	bl	800026c <RTOS_SVC_schedulerStart>

	while(1);
 80016e8:	e7fe      	b.n	80016e8 <main+0x5c>
 80016ea:	bf00      	nop
 80016ec:	08001a7c 	.word	0x08001a7c
 80016f0:	40021800 	.word	0x40021800
 80016f4:	080015fd 	.word	0x080015fd
 80016f8:	200011e8 	.word	0x200011e8
 80016fc:	200031f4 	.word	0x200031f4
 8001700:	0800163d 	.word	0x0800163d
 8001704:	200021e8 	.word	0x200021e8
 8001708:	2000322c 	.word	0x2000322c
 800170c:	200031e8 	.word	0x200031e8
 8001710:	20001198 	.word	0x20001198

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800174c <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001718:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800171a:	e003      	b.n	8001724 <LoopCopyDataInit>

0800171c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800171e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001720:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001722:	3104      	adds	r1, #4

08001724 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001724:	480b      	ldr	r0, [pc, #44]	; (8001754 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001728:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800172a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800172c:	d3f6      	bcc.n	800171c <CopyDataInit>
  ldr  r2, =_sbss
 800172e:	4a0b      	ldr	r2, [pc, #44]	; (800175c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001730:	e002      	b.n	8001738 <LoopFillZerobss>

08001732 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001732:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001734:	f842 3b04 	str.w	r3, [r2], #4

08001738 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800173a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800173c:	d3f9      	bcc.n	8001732 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800173e:	f000 f82d 	bl	800179c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001742:	f000 f959 	bl	80019f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7ff ffa1 	bl	800168c <main>
  bx  lr    
 800174a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800174c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001750:	08001a8c 	.word	0x08001a8c
  ldr  r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001758:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 800175c:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8001760:	20003264 	.word	0x20003264

08001764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC_IRQHandler>

08001766 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001778:	e7fe      	b.n	8001778 <HardFault_Handler+0x4>

0800177a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800177e:	e7fe      	b.n	800177e <MemManage_Handler+0x4>

08001780 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001784:	e7fe      	b.n	8001784 <BusFault_Handler+0x4>

08001786 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800178a:	e7fe      	b.n	800178a <UsageFault_Handler+0x4>

0800178c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
	...

0800179c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a0:	4a16      	ldr	r2, [pc, #88]	; (80017fc <SystemInit+0x60>)
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <SystemInit+0x60>)
 80017a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80017b0:	4a13      	ldr	r2, [pc, #76]	; (8001800 <SystemInit+0x64>)
 80017b2:	4b13      	ldr	r3, [pc, #76]	; (8001800 <SystemInit+0x64>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017bc:	4b10      	ldr	r3, [pc, #64]	; (8001800 <SystemInit+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80017c2:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <SystemInit+0x64>)
 80017c4:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <SystemInit+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80017cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80017d2:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <SystemInit+0x64>)
 80017d4:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <SystemInit+0x68>)
 80017d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80017d8:	4a09      	ldr	r2, [pc, #36]	; (8001800 <SystemInit+0x64>)
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <SystemInit+0x64>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017e2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <SystemInit+0x64>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80017ea:	f000 f889 	bl	8001900 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017ee:	4b03      	ldr	r3, [pc, #12]	; (80017fc <SystemInit+0x60>)
 80017f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017f4:	609a      	str	r2, [r3, #8]
#endif
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00
 8001800:	40023800 	.word	0x40023800
 8001804:	24003010 	.word	0x24003010

08001808 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800180e:	2300      	movs	r3, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	2302      	movs	r3, #2
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	2302      	movs	r3, #2
 8001820:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001822:	4b32      	ldr	r3, [pc, #200]	; (80018ec <SystemCoreClockUpdate+0xe4>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	2b04      	cmp	r3, #4
 8001830:	d007      	beq.n	8001842 <SystemCoreClockUpdate+0x3a>
 8001832:	2b08      	cmp	r3, #8
 8001834:	d009      	beq.n	800184a <SystemCoreClockUpdate+0x42>
 8001836:	2b00      	cmp	r3, #0
 8001838:	d13d      	bne.n	80018b6 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800183a:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <SystemCoreClockUpdate+0xe8>)
 800183c:	4a2d      	ldr	r2, [pc, #180]	; (80018f4 <SystemCoreClockUpdate+0xec>)
 800183e:	601a      	str	r2, [r3, #0]
      break;
 8001840:	e03d      	b.n	80018be <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001842:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <SystemCoreClockUpdate+0xe8>)
 8001844:	4a2c      	ldr	r2, [pc, #176]	; (80018f8 <SystemCoreClockUpdate+0xf0>)
 8001846:	601a      	str	r2, [r3, #0]
      break;
 8001848:	e039      	b.n	80018be <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <SystemCoreClockUpdate+0xe4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	0d9b      	lsrs	r3, r3, #22
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001856:	4b25      	ldr	r3, [pc, #148]	; (80018ec <SystemCoreClockUpdate+0xe4>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800185e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00c      	beq.n	8001880 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001866:	4a24      	ldr	r2, [pc, #144]	; (80018f8 <SystemCoreClockUpdate+0xf0>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	fbb2 f3f3 	udiv	r3, r2, r3
 800186e:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <SystemCoreClockUpdate+0xe4>)
 8001870:	6852      	ldr	r2, [r2, #4]
 8001872:	0992      	lsrs	r2, r2, #6
 8001874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001878:	fb02 f303 	mul.w	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e00b      	b.n	8001898 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001880:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <SystemCoreClockUpdate+0xec>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	fbb2 f3f3 	udiv	r3, r2, r3
 8001888:	4a18      	ldr	r2, [pc, #96]	; (80018ec <SystemCoreClockUpdate+0xe4>)
 800188a:	6852      	ldr	r2, [r2, #4]
 800188c:	0992      	lsrs	r2, r2, #6
 800188e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001892:	fb02 f303 	mul.w	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <SystemCoreClockUpdate+0xe4>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	0c1b      	lsrs	r3, r3, #16
 800189e:	f003 0303 	and.w	r3, r3, #3
 80018a2:	3301      	adds	r3, #1
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b0:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <SystemCoreClockUpdate+0xe8>)
 80018b2:	6013      	str	r3, [r2, #0]
      break;
 80018b4:	e003      	b.n	80018be <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <SystemCoreClockUpdate+0xe8>)
 80018b8:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <SystemCoreClockUpdate+0xec>)
 80018ba:	601a      	str	r2, [r3, #0]
      break;
 80018bc:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <SystemCoreClockUpdate+0xe4>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	091b      	lsrs	r3, r3, #4
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	4a0c      	ldr	r2, [pc, #48]	; (80018fc <SystemCoreClockUpdate+0xf4>)
 80018ca:	5cd3      	ldrb	r3, [r2, r3]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <SystemCoreClockUpdate+0xe8>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	fa22 f303 	lsr.w	r3, r2, r3
 80018da:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <SystemCoreClockUpdate+0xe8>)
 80018dc:	6013      	str	r3, [r2, #0]
}
 80018de:	bf00      	nop
 80018e0:	371c      	adds	r7, #28
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	20000008 	.word	0x20000008
 80018f4:	00f42400 	.word	0x00f42400
 80018f8:	007a1200 	.word	0x007a1200
 80018fc:	2000000c 	.word	0x2000000c

08001900 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	2300      	movs	r3, #0
 800190c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800190e:	4a36      	ldr	r2, [pc, #216]	; (80019e8 <SetSysClock+0xe8>)
 8001910:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <SetSysClock+0xe8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001918:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800191a:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <SetSysClock+0xe8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3301      	adds	r3, #1
 8001928:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d103      	bne.n	8001938 <SetSysClock+0x38>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001936:	d1f0      	bne.n	800191a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001938:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <SetSysClock+0xe8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001944:	2301      	movs	r3, #1
 8001946:	603b      	str	r3, [r7, #0]
 8001948:	e001      	b.n	800194e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d142      	bne.n	80019da <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001954:	4a24      	ldr	r2, [pc, #144]	; (80019e8 <SetSysClock+0xe8>)
 8001956:	4b24      	ldr	r3, [pc, #144]	; (80019e8 <SetSysClock+0xe8>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001960:	4a22      	ldr	r2, [pc, #136]	; (80019ec <SetSysClock+0xec>)
 8001962:	4b22      	ldr	r3, [pc, #136]	; (80019ec <SetSysClock+0xec>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800196a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800196c:	4a1e      	ldr	r2, [pc, #120]	; (80019e8 <SetSysClock+0xe8>)
 800196e:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <SetSysClock+0xe8>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001974:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <SetSysClock+0xe8>)
 8001976:	4b1c      	ldr	r3, [pc, #112]	; (80019e8 <SetSysClock+0xe8>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800197e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001980:	4a19      	ldr	r2, [pc, #100]	; (80019e8 <SetSysClock+0xe8>)
 8001982:	4b19      	ldr	r3, [pc, #100]	; (80019e8 <SetSysClock+0xe8>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800198a:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800198c:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <SetSysClock+0xe8>)
 800198e:	4a18      	ldr	r2, [pc, #96]	; (80019f0 <SetSysClock+0xf0>)
 8001990:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001992:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <SetSysClock+0xe8>)
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <SetSysClock+0xe8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800199c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800199e:	bf00      	nop
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <SetSysClock+0xe8>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f9      	beq.n	80019a0 <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <SetSysClock+0xf4>)
 80019ae:	f240 7205 	movw	r2, #1797	; 0x705
 80019b2:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80019b4:	4a0c      	ldr	r2, [pc, #48]	; (80019e8 <SetSysClock+0xe8>)
 80019b6:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <SetSysClock+0xe8>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f023 0303 	bic.w	r3, r3, #3
 80019be:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80019c0:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <SetSysClock+0xe8>)
 80019c2:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <SetSysClock+0xe8>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f043 0302 	orr.w	r3, r3, #2
 80019ca:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 80019cc:	bf00      	nop
 80019ce:	4b06      	ldr	r3, [pc, #24]	; (80019e8 <SetSysClock+0xe8>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	d1f9      	bne.n	80019ce <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40007000 	.word	0x40007000
 80019f0:	07405a19 	.word	0x07405a19
 80019f4:	40023c00 	.word	0x40023c00

080019f8 <__libc_init_array>:
 80019f8:	b570      	push	{r4, r5, r6, lr}
 80019fa:	4e0d      	ldr	r6, [pc, #52]	; (8001a30 <__libc_init_array+0x38>)
 80019fc:	4c0d      	ldr	r4, [pc, #52]	; (8001a34 <__libc_init_array+0x3c>)
 80019fe:	1ba4      	subs	r4, r4, r6
 8001a00:	10a4      	asrs	r4, r4, #2
 8001a02:	2500      	movs	r5, #0
 8001a04:	42a5      	cmp	r5, r4
 8001a06:	d109      	bne.n	8001a1c <__libc_init_array+0x24>
 8001a08:	4e0b      	ldr	r6, [pc, #44]	; (8001a38 <__libc_init_array+0x40>)
 8001a0a:	4c0c      	ldr	r4, [pc, #48]	; (8001a3c <__libc_init_array+0x44>)
 8001a0c:	f000 f824 	bl	8001a58 <_init>
 8001a10:	1ba4      	subs	r4, r4, r6
 8001a12:	10a4      	asrs	r4, r4, #2
 8001a14:	2500      	movs	r5, #0
 8001a16:	42a5      	cmp	r5, r4
 8001a18:	d105      	bne.n	8001a26 <__libc_init_array+0x2e>
 8001a1a:	bd70      	pop	{r4, r5, r6, pc}
 8001a1c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a20:	4798      	blx	r3
 8001a22:	3501      	adds	r5, #1
 8001a24:	e7ee      	b.n	8001a04 <__libc_init_array+0xc>
 8001a26:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a2a:	4798      	blx	r3
 8001a2c:	3501      	adds	r5, #1
 8001a2e:	e7f2      	b.n	8001a16 <__libc_init_array+0x1e>
 8001a30:	08001a84 	.word	0x08001a84
 8001a34:	08001a84 	.word	0x08001a84
 8001a38:	08001a84 	.word	0x08001a84
 8001a3c:	08001a88 	.word	0x08001a88

08001a40 <memcpy>:
 8001a40:	b510      	push	{r4, lr}
 8001a42:	1e43      	subs	r3, r0, #1
 8001a44:	440a      	add	r2, r1
 8001a46:	4291      	cmp	r1, r2
 8001a48:	d100      	bne.n	8001a4c <memcpy+0xc>
 8001a4a:	bd10      	pop	{r4, pc}
 8001a4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001a50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001a54:	e7f7      	b.n	8001a46 <memcpy+0x6>
	...

08001a58 <_init>:
 8001a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a5a:	bf00      	nop
 8001a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a5e:	bc08      	pop	{r3}
 8001a60:	469e      	mov	lr, r3
 8001a62:	4770      	bx	lr

08001a64 <_fini>:
 8001a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a66:	bf00      	nop
 8001a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a6a:	bc08      	pop	{r3}
 8001a6c:	469e      	mov	lr, r3
 8001a6e:	4770      	bx	lr
