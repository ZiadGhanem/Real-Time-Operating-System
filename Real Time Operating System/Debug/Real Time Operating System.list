
Real Time Operating System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000141c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080015c8  080015c8  000115c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080015d0  080015d0  000115d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080015d4  080015d4  000115d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000001c  20000000  080015d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
  7 .bss          00008248  20000020  20000020  00020020  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  20008268  20008268  00020020  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009671  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001942  00000000  00000000  000296bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000540  00000000  00000000  0002b000  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000428  00000000  00000000  0002b540  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002bce  00000000  00000000  0002b968  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001fac  00000000  00000000  0002e536  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000304e2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000121c  00000000  00000000  00030560  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000020 	.word	0x20000020
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080015b0 	.word	0x080015b0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000024 	.word	0x20000024
 80001e8:	080015b0 	.word	0x080015b0

080001ec <RTOS_SVC_Handler>:

 .text

 .type RTOS_SVC_Handler, %function
 RTOS_SVC_Handler:
 	TST LR, #4
 80001ec:	f01e 0f04 	tst.w	lr, #4
	ITE EQ
 80001f0:	bf0c      	ite	eq
	MRSEQ R0, MSP
 80001f2:	f3ef 8008 	mrseq	r0, MSP
	MRSNE R0, PSP
 80001f6:	f3ef 8009 	mrsne	r0, PSP
	LDR R1, =RTOS_SVC_excReturn
 80001fa:	491b      	ldr	r1, [pc, #108]	; (8000268 <RTOS_PendSV_Handler+0x5c>)
	STR LR, [R1]
 80001fc:	f8c1 e000 	str.w	lr, [r1]
	BL RTOS_SVC_Handler_Main
 8000200:	f000 f928 	bl	8000454 <RTOS_SVC_Handler_Main>
	LDR R1, =RTOS_SVC_excReturn
 8000204:	4918      	ldr	r1, [pc, #96]	; (8000268 <RTOS_PendSV_Handler+0x5c>)
	LDR LR, [R1]
 8000206:	f8d1 e000 	ldr.w	lr, [r1]
	BX LR
 800020a:	4770      	bx	lr

0800020c <RTOS_PendSV_Handler>:

 .type RTOS_PendSV_Handler, %function
 RTOS_PendSV_Handler:
 	/****************** Saving the current thread's context ********************/
 	/* Get PSP */
 	MRS R1, PSP
 800020c:	f3ef 8109 	mrs	r1, PSP
	/* Check if the currently running thread uses FPU
	 * If so so push FPU registers (s16 - s32)
	**/
	TST LR, 0x10	/* Test bit 5 in LR, if it is zero then FPU is enabled */
 8000210:	f01e 0f10 	tst.w	lr, #16
	IT	EQ	/* If zero flag is cleared */
 8000214:	bf08      	it	eq
	VSTMDBEQ R1!, {S16-S31}
 8000216:	ed21 8a10 	vstmdbeq	r1!, {s16-s31}
	/* Save EXC_RETURN into R2 */
	MOV	R2, LR
 800021a:	4672      	mov	r2, lr
	/* Save CONTROL into R3 */
	MRS R3, CONTROL
 800021c:	f3ef 8314 	mrs	r3, CONTROL
	/* Instruction Synchronization Barrier */
	ISB
 8000220:	f3bf 8f6f 	isb	sy
	/* Push {R2 -> R11} into the thread's stack*/
	STMDB R1!, {R2-R11}
 8000224:	e921 0ffc 	stmdb	r1!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
	/* Save the thread's stack pointer */
	BL RTOS_threadGetRunning
 8000228:	f000 fd96 	bl	8000d58 <RTOS_threadGetRunning>
	STR R1, [R0]
 800022c:	6001      	str	r1, [r0, #0]

	/****************** Switch threads ********************/
	/* Disable all interrupts excepts SVC as PendSV can be interrupted */
	MOV R1, #1
 800022e:	f04f 0101 	mov.w	r1, #1
	MSR BASEPRI, R1
 8000232:	f381 8811 	msr	BASEPRI, r1
 	/* Get the next thread */
 	BL RTOS_threadSwitch
 8000236:	f000 fdd7 	bl	8000de8 <RTOS_threadSwitch>
 	/* Set the process stack pointer to the thread's stack */
 	BL RTOS_threadGetRunning
 800023a:	f000 fd8d 	bl	8000d58 <RTOS_threadGetRunning>
	/* Enable all interrupts */
	MOV R1, #0
 800023e:	f04f 0100 	mov.w	r1, #0
	MSR BASEPRI, R1
 8000242:	f381 8811 	msr	BASEPRI, r1

	/****************** Restoring the next thread's context ********************/
 	LDR R1, [R0]
 8000246:	6801      	ldr	r1, [r0, #0]
 	/* POP {R2 -> R11} from the thread's stack*/
 	LDMIA R1!, {R2-R11}
 8000248:	e8b1 0ffc 	ldmia.w	r1!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 	/* Move R3 into CONTROL */
 	MSR CONTROL, R3
 800024c:	f383 8814 	msr	CONTROL, r3
 	/* Instruction Synchronization Barrier */
 	ISB
 8000250:	f3bf 8f6f 	isb	sy
 	/* MOVE R2 into Link Register */
 	MOV LR, R2
 8000254:	4696      	mov	lr, r2
 	/* Check if the currently running thread uses FPU
	 * If so so pop FPU registers (s16 - s32)
	**/
	TST LR, 0x10	/* Test bit 5 in LR, if it is zero then FPU is enabled */
 8000256:	f01e 0f10 	tst.w	lr, #16
	IT	EQ	/* If zero flag is cleared */
 800025a:	bf08      	it	eq
	VLDMIAEQ R1!, {S16-S31}
 800025c:	ecb1 8a10 	vldmiaeq	r1!, {s16-s31}
	/* Save PSP */
	MSR PSP, R1
 8000260:	f381 8809 	msr	PSP, r1
	/* Return from interrupt */
	BX LR
 8000264:	4770      	bx	lr
 8000266:	0000      	.short	0x0000
	LDR R1, =RTOS_SVC_excReturn
 8000268:	2000217c 	.word	0x2000217c

0800026c <RTOS_SVC_schedulerStart>:

 .text

 .type RTOS_SVC_schedulerStart, %function
 RTOS_SVC_schedulerStart:
	SVC 0
 800026c:	df00      	svc	0
	BX LR
 800026e:	4770      	bx	lr

08000270 <RTOS_SVC_threadCreate>:

 .type RTOS_SVC_threadCreate, %function
 RTOS_SVC_threadCreate:
	SVC 1
 8000270:	df01      	svc	1
	BX LR
 8000272:	4770      	bx	lr

08000274 <RTOS_SVC_threadDelay>:

 .type RTOS_SVC_threadDelay, %function
 RTOS_SVC_threadDelay:
 	SVC 2
 8000274:	df02      	svc	2
 	BX LR
 8000276:	4770      	bx	lr

08000278 <RTOS_SVC_threadTerminate>:

 .type RTOS_SVC_threadTerminate, %function
 RTOS_SVC_threadTerminate:
 	SVC 3
 8000278:	df03      	svc	3
 	BX LR
 800027a:	4770      	bx	lr

0800027c <RTOS_SVC_semaphoreInit>:

 .type RTOS_SVC_semaphoreInit, %function
 RTOS_SVC_semaphoreInit:
 	SVC 4
 800027c:	df04      	svc	4
 	BX LR
 800027e:	4770      	bx	lr

08000280 <RTOS_SVC_semaphoreWait>:

 .type RTOS_SVC_semaphoreWait, %function
 RTOS_SVC_semaphoreWait:
 	SVC 5
 8000280:	df05      	svc	5
 	BX LR
 8000282:	4770      	bx	lr

08000284 <RTOS_SVC_semaphoreSignal>:

 .type RTOS_SVC_semaphoreSignal, %function
 RTOS_SVC_semaphoreSignal:
 	SVC 6
 8000284:	df06      	svc	6
 	BX LR
 8000286:	4770      	bx	lr

08000288 <RTOS_SVC_mutexInit>:

 .type RTOS_SVC_mutexInit, %function
 RTOS_SVC_mutexInit:
 	SVC 7
 8000288:	df07      	svc	7
 	BX LR
 800028a:	4770      	bx	lr

0800028c <RTOS_SVC_mutexLock>:

 .type RTOS_SVC_mutexLock, %function
 RTOS_SVC_mutexLock:
 	SVC 8
 800028c:	df08      	svc	8
 	BX LR
 800028e:	4770      	bx	lr

08000290 <RTOS_SVC_mutexUnlock>:

 .type RTOS_SVC_mutexUnlock, %function
 RTOS_SVC_mutexUnlock:
 	SVC 9
 8000290:	df09      	svc	9
 	BX LR
 8000292:	4770      	bx	lr

08000294 <RTOS_SVC_spinInit>:

 .type RTOS_SVC_spinInit, %function
 RTOS_SVC_spinInit:
 	SVC 10
 8000294:	df0a      	svc	10
 	BX LR
 8000296:	4770      	bx	lr

08000298 <RTOS_SVC_spinLock>:

 .type RTOS_SVC_spinLock, %function
 RTOS_SVC_spinLock:
 	SVC 11
 8000298:	df0b      	svc	11
 	BX LR
 800029a:	4770      	bx	lr

0800029c <RTOS_SVC_spinUnlock>:

 .type RTOS_SVC_spinUnlock, %function
 RTOS_SVC_spinUnlock:
 	SVC 12
 800029c:	df0c      	svc	12
 	BX LR
 800029e:	4770      	bx	lr

080002a0 <RTOS_SVC_mailBoxInit>:

 .type RTOS_SVC_mailBoxInit, %function
 RTOS_SVC_mailBoxInit:
 	SVC 13
 80002a0:	df0d      	svc	13
 	BX LR
 80002a2:	4770      	bx	lr

080002a4 <RTOS_SVC_mailBoxSend>:

 .type RTOS_SVC_mailBoxSend, %function
 RTOS_SVC_mailBoxSend:
 	SVC 14
 80002a4:	df0e      	svc	14
 	BX LR
 80002a6:	4770      	bx	lr

080002a8 <RTOS_SVC_mailBoxReceive>:

 .type RTOS_SVC_mailBoxReceive, %function
 RTOS_SVC_mailBoxReceive:
 	SVC 15
 80002a8:	df0f      	svc	15
 	BX LR
 80002aa:	4770      	bx	lr

080002ac <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	f003 0307 	and.w	r3, r3, #7
 80002ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002bc:	4b0c      	ldr	r3, [pc, #48]	; (80002f0 <NVIC_SetPriorityGrouping+0x44>)
 80002be:	68db      	ldr	r3, [r3, #12]
 80002c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 80002c2:	68ba      	ldr	r2, [r7, #8]
 80002c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002c8:	4013      	ands	r3, r2
 80002ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 80002d0:	68bb      	ldr	r3, [r7, #8]
 80002d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 80002d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002de:	4a04      	ldr	r2, [pc, #16]	; (80002f0 <NVIC_SetPriorityGrouping+0x44>)
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	60d3      	str	r3, [r2, #12]
}
 80002e4:	bf00      	nop
 80002e6:	3714      	adds	r7, #20
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	e000ed00 	.word	0xe000ed00

080002f4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80002fe:	4909      	ldr	r1, [pc, #36]	; (8000324 <NVIC_EnableIRQ+0x30>)
 8000300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000304:	095b      	lsrs	r3, r3, #5
 8000306:	79fa      	ldrb	r2, [r7, #7]
 8000308:	f002 021f 	and.w	r2, r2, #31
 800030c:	2001      	movs	r0, #1
 800030e:	fa00 f202 	lsl.w	r2, r0, r2
 8000312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	e000e100 	.word	0xe000e100

08000328 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000328:	b480      	push	{r7}
 800032a:	b083      	sub	sp, #12
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	6039      	str	r1, [r7, #0]
 8000332:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000338:	2b00      	cmp	r3, #0
 800033a:	da0b      	bge.n	8000354 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800033c:	490d      	ldr	r1, [pc, #52]	; (8000374 <NVIC_SetPriority+0x4c>)
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	f003 030f 	and.w	r3, r3, #15
 8000344:	3b04      	subs	r3, #4
 8000346:	683a      	ldr	r2, [r7, #0]
 8000348:	b2d2      	uxtb	r2, r2
 800034a:	0112      	lsls	r2, r2, #4
 800034c:	b2d2      	uxtb	r2, r2
 800034e:	440b      	add	r3, r1
 8000350:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000352:	e009      	b.n	8000368 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000354:	4908      	ldr	r1, [pc, #32]	; (8000378 <NVIC_SetPriority+0x50>)
 8000356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035a:	683a      	ldr	r2, [r7, #0]
 800035c:	b2d2      	uxtb	r2, r2
 800035e:	0112      	lsls	r2, r2, #4
 8000360:	b2d2      	uxtb	r2, r2
 8000362:	440b      	add	r3, r1
 8000364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr
 8000374:	e000ed00 	.word	0xe000ed00
 8000378:	e000e100 	.word	0xe000e100

0800037c <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	3b01      	subs	r3, #1
 8000388:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800038c:	d301      	bcc.n	8000392 <SysTick_Config+0x16>
 800038e:	2301      	movs	r3, #1
 8000390:	e00f      	b.n	80003b2 <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8000392:	4a0a      	ldr	r2, [pc, #40]	; (80003bc <SysTick_Config+0x40>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	3b01      	subs	r3, #1
 8000398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 800039a:	210f      	movs	r1, #15
 800039c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80003a0:	f7ff ffc2 	bl	8000328 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <SysTick_Config+0x40>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003aa:	4b04      	ldr	r3, [pc, #16]	; (80003bc <SysTick_Config+0x40>)
 80003ac:	2207      	movs	r2, #7
 80003ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80003b0:	2300      	movs	r3, #0
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	e000e010 	.word	0xe000e010

080003c0 <RTOS_init>:
 * 	None
 * Return:
 * 	None
 */
void RTOS_init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c6:	b672      	cpsid	i
	/* Disable interrupt requests during initialization */
	__disable_irq();

	/* Double word stack alignment */
	SCB->SCR |= SCB_CCR_STKALIGN_Msk;
 80003c8:	4a1f      	ldr	r2, [pc, #124]	; (8000448 <RTOS_init+0x88>)
 80003ca:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <RTOS_init+0x88>)
 80003cc:	691b      	ldr	r3, [r3, #16]
 80003ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003d2:	6113      	str	r3, [r2, #16]

	/* Setup system clock */
	SystemCoreClockUpdate();
 80003d4:	f000 ffc4 	bl	8001360 <SystemCoreClockUpdate>

	/* Configure NVIC */
	NVIC_SetPriorityGrouping(3);
 80003d8:	2003      	movs	r0, #3
 80003da:	f7ff ff67 	bl	80002ac <NVIC_SetPriorityGrouping>

	/* Configure SysTick */
	ASSERT(SysTick_Config(SystemCoreClock / SYSTICK_FREQUENCY) == 0);
 80003de:	4b1b      	ldr	r3, [pc, #108]	; (800044c <RTOS_init+0x8c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	4a1b      	ldr	r2, [pc, #108]	; (8000450 <RTOS_init+0x90>)
 80003e4:	fba2 2303 	umull	r2, r3, r2, r3
 80003e8:	099b      	lsrs	r3, r3, #6
 80003ea:	4618      	mov	r0, r3
 80003ec:	f7ff ffc6 	bl	800037c <SysTick_Config>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <RTOS_init+0x3a>
 80003f6:	b672      	cpsid	i
 80003f8:	e7fe      	b.n	80003f8 <RTOS_init+0x38>
	NVIC_SetPriority(SysTick_IRQn, 1);
 80003fa:	2101      	movs	r1, #1
 80003fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000400:	f7ff ff92 	bl	8000328 <NVIC_SetPriority>
	NVIC_EnableIRQ(SysTick_IRQn);
 8000404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000408:	f7ff ff74 	bl	80002f4 <NVIC_EnableIRQ>


	/* Enable SVC interrupt and set its priority */
	NVIC_SetPriority(SVCall_IRQn, 0);
 800040c:	2100      	movs	r1, #0
 800040e:	f06f 0004 	mvn.w	r0, #4
 8000412:	f7ff ff89 	bl	8000328 <NVIC_SetPriority>
	NVIC_EnableIRQ(SVCall_IRQn);
 8000416:	f06f 0004 	mvn.w	r0, #4
 800041a:	f7ff ff6b 	bl	80002f4 <NVIC_EnableIRQ>

	/* Enable PendSV interrupt and set its priority */
	NVIC_SetPriority(PendSV_IRQn, 0xFF);
 800041e:	21ff      	movs	r1, #255	; 0xff
 8000420:	f06f 0001 	mvn.w	r0, #1
 8000424:	f7ff ff80 	bl	8000328 <NVIC_SetPriority>
	NVIC_EnableIRQ(PendSV_IRQn);
 8000428:	f06f 0001 	mvn.w	r0, #1
 800042c:	f7ff ff62 	bl	80002f4 <NVIC_EnableIRQ>

	/* Initialize ready lists */
	RTOS_threadListsInit();
 8000430:	f000 fbf6 	bl	8000c20 <RTOS_threadListsInit>
 8000434:	2301      	movs	r3, #1
 8000436:	607b      	str	r3, [r7, #4]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 800043e:	b662      	cpsie	i
	/* Disable all interrupts except SVC */
	__set_BASEPRI(1);

	/* Enable interrupts */
	__enable_irq();
}
 8000440:	bf00      	nop
 8000442:	3708      	adds	r7, #8
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	e000ed00 	.word	0xe000ed00
 800044c:	20000008 	.word	0x20000008
 8000450:	10624dd3 	.word	0x10624dd3

08000454 <RTOS_SVC_Handler_Main>:
 * 	svc_args -> The supervisor calls arguments passed to the supervisor call
 * Return:
 * 	None
 */
void RTOS_SVC_Handler_Main(uint32_t* svc_args)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	 * Stack contains:
	 *  r0, r1, r2, r3, r12, r14, the return address and xPSR
	 * First argument (r0) is svc_args[0]
	 */
	uint32_t svc_number;
	svc_number = ((int8_t*)svc_args[6])[-2];
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3318      	adds	r3, #24
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	3b02      	subs	r3, #2
 8000464:	f993 3000 	ldrsb.w	r3, [r3]
 8000468:	60fb      	str	r3, [r7, #12]

	switch(svc_number)
 800046a:	68fb      	ldr	r3, [r7, #12]
 800046c:	2b0f      	cmp	r3, #15
 800046e:	f200 80ae 	bhi.w	80005ce <RTOS_SVC_Handler_Main+0x17a>
 8000472:	a201      	add	r2, pc, #4	; (adr r2, 8000478 <RTOS_SVC_Handler_Main+0x24>)
 8000474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000478:	080004b9 	.word	0x080004b9
 800047c:	080004bf 	.word	0x080004bf
 8000480:	080004e1 	.word	0x080004e1
 8000484:	080004ed 	.word	0x080004ed
 8000488:	080004f9 	.word	0x080004f9
 800048c:	0800050f 	.word	0x0800050f
 8000490:	0800051b 	.word	0x0800051b
 8000494:	08000527 	.word	0x08000527
 8000498:	0800053d 	.word	0x0800053d
 800049c:	08000549 	.word	0x08000549
 80004a0:	08000555 	.word	0x08000555
 80004a4:	0800056b 	.word	0x0800056b
 80004a8:	08000577 	.word	0x08000577
 80004ac:	08000583 	.word	0x08000583
 80004b0:	080005a3 	.word	0x080005a3
 80004b4:	080005b9 	.word	0x080005b9
	{
		case 0:
			/* Start the scheduler */
			RTOS_schedulerStart();
 80004b8:	f000 fa88 	bl	80009cc <RTOS_schedulerStart>
			break;
 80004bc:	e089      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
		case 1:
			/* Create a thread */
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4618      	mov	r0, r3
							(RTOS_stack_t*)svc_args[1],
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	3304      	adds	r3, #4
 80004c8:	681b      	ldr	r3, [r3, #0]
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 80004ca:	4619      	mov	r1, r3
							(void *)svc_args[2],
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3308      	adds	r3, #8
 80004d0:	681b      	ldr	r3, [r3, #0]
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 80004d2:	461a      	mov	r2, r3
							(uint32_t)svc_args[3]);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	330c      	adds	r3, #12
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	f000 fbbf 	bl	8000c5c <RTOS_threadCreate>
			break;
 80004de:	e078      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
		case 2:
			/* Delay a thread by blocking it for a specific time delay */
			RTOS_threadDelay((uint32_t) svc_args[0]);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f000 fcdb 	bl	8000ea0 <RTOS_threadDelay>
			break;
 80004ea:	e072      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
		case 3:
			/* Remove a thread from the system */
			RTOS_threadTerminate((RTOS_thread_t*) svc_args[0]);
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f000 fd21 	bl	8000f38 <RTOS_threadTerminate>
			break;
 80004f6:	e06c      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
		/* Semaphore */
		case 4:
			RTOS_semaphoreInit((RTOS_semaphore_t*) svc_args[0], (int32_t)svc_args[1]);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	3304      	adds	r3, #4
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4619      	mov	r1, r3
 8000506:	4610      	mov	r0, r2
 8000508:	f000 fabc 	bl	8000a84 <RTOS_semaphoreInit>
			break;
 800050c:	e061      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
		case 5:
			RTOS_semaphoreWait((RTOS_semaphore_t*) svc_args[0]);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4618      	mov	r0, r3
 8000514:	f000 facc 	bl	8000ab0 <RTOS_semaphoreWait>
			break;
 8000518:	e05b      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
		case 6:
			RTOS_semaphoreSignal((RTOS_semaphore_t*) svc_args[0]);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4618      	mov	r0, r3
 8000520:	f000 fb06 	bl	8000b30 <RTOS_semaphoreSignal>
			break;
 8000524:	e055      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
		/* Mutex */
		case 7:
			RTOS_mutexInit((RTOS_mutex_t*) svc_args[0], (int32_t)svc_args[1]);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	461a      	mov	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3304      	adds	r3, #4
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	4619      	mov	r1, r3
 8000534:	4610      	mov	r0, r2
 8000536:	f000 f9c8 	bl	80008ca <RTOS_mutexInit>
			break;
 800053a:	e04a      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
		case 8:
			RTOS_mutexLock((RTOS_mutex_t*) svc_args[0]);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f000 f9db 	bl	80008fc <RTOS_mutexLock>
			break;
 8000546:	e044      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
		case 9:
			RTOS_mutexUnlock((RTOS_mutex_t*) svc_args[0]);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4618      	mov	r0, r3
 800054e:	f000 fa1d 	bl	800098c <RTOS_mutexUnlock>
			break;
 8000552:	e03e      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
		/* SpinLock */
		case 10:
			RTOS_spinInit((RTOS_spinLock_t*) svc_args[0], (int32_t)svc_args[1]);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	461a      	mov	r2, r3
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	3304      	adds	r3, #4
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4619      	mov	r1, r3
 8000562:	4610      	mov	r0, r2
 8000564:	f000 fb15 	bl	8000b92 <RTOS_spinInit>
			break;
 8000568:	e033      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
		case 11:
			RTOS_spinLock((RTOS_spinLock_t*) svc_args[0]);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fb25 	bl	8000bbe <RTOS_spinLock>
			break;
 8000574:	e02d      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
		case 12:
			RTOS_spinUnlock((RTOS_spinLock_t*) svc_args[0]);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fb40 	bl	8000c00 <RTOS_spinUnlock>
			break;
 8000580:	e027      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
		case 13:
		/* MailBox */
			RTOS_mailBoxInit((RTOS_mailBox_t*) svc_args[0], (void*) svc_args[1], (uint32_t) svc_args[2], (uint32_t) svc_args[3]);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3304      	adds	r3, #4
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4619      	mov	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3308      	adds	r3, #8
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	330c      	adds	r3, #12
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f000 f8e0 	bl	8000760 <RTOS_mailBoxInit>
			break;
 80005a0:	e017      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
		case 14:
			RTOS_mailBoxSend((RTOS_mailBox_t*) svc_args[0], (void*) svc_args[1]);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	461a      	mov	r2, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3304      	adds	r3, #4
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4619      	mov	r1, r3
 80005b0:	4610      	mov	r0, r2
 80005b2:	f000 f91c 	bl	80007ee <RTOS_mailBoxSend>
			break;
 80005b6:	e00c      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
		case 15:
			RTOS_mailBoxReceive((RTOS_mailBox_t*)  svc_args[0], (void*) svc_args[1]);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	3304      	adds	r3, #4
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4619      	mov	r1, r3
 80005c6:	4610      	mov	r0, r2
 80005c8:	f000 f948 	bl	800085c <RTOS_mailBoxReceive>
			break;
 80005cc:	e001      	b.n	80005d2 <RTOS_SVC_Handler_Main+0x17e>
  __ASM volatile ("cpsid i" : : : "memory");
 80005ce:	b672      	cpsid	i
		/* Unsupported supervisor call */
		default:
			ASSERT(0)
 80005d0:	e7fe      	b.n	80005d0 <RTOS_SVC_Handler_Main+0x17c>
			break;
	}
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop

080005dc <RTOS_listInit>:
 * 	pList -> The RTOS list
 * Return:
 * 	None
 */
void RTOS_listInit(RTOS_list_t* pList)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	ASSERT(pList != NULL);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d101      	bne.n	80005ee <RTOS_listInit+0x12>
 80005ea:	b672      	cpsid	i
 80005ec:	e7fe      	b.n	80005ec <RTOS_listInit+0x10>

	/* Set the the current index as end item */
	pList->pIndex = (RTOS_listItem_t*) &(pList->endItem);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	1d1a      	adds	r2, r3, #4
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]

	/* Set the next and previous of the end item as itself */
	pList->endItem.pNext = (RTOS_listItem_t*) &(pList->endItem);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	1d1a      	adds	r2, r3, #4
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	605a      	str	r2, [r3, #4]
	pList->endItem.pPrev = (RTOS_listItem_t*) &(pList->endItem);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	1d1a      	adds	r2, r3, #4
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	609a      	str	r2, [r3, #8]

	/* Set the number of items in the list to zero */
	pList->numListItems = 0;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
}
 800060c:	bf00      	nop
 800060e:	370c      	adds	r7, #12
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr

08000618 <RTOS_listInsertEnd>:
 * 	pListItem -> The RTOS list item to be inserted
 * Return:
 * 	None
 */
void RTOS_listInsertEnd(RTOS_list_t* pList, RTOS_listItem_t* pListItem)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	ASSERT(pList != NULL);
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d101      	bne.n	800062c <RTOS_listInsertEnd+0x14>
 8000628:	b672      	cpsid	i
 800062a:	e7fe      	b.n	800062a <RTOS_listInsertEnd+0x12>
	ASSERT(pListItem != NULL);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d101      	bne.n	8000636 <RTOS_listInsertEnd+0x1e>
 8000632:	b672      	cpsid	i
 8000634:	e7fe      	b.n	8000634 <RTOS_listInsertEnd+0x1c>

	/* Make the next of the new item the next of the current index item of list */
	pListItem->pNext = pList->pIndex->pNext;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	601a      	str	r2, [r3, #0]
	/* Make the previous of the new item the current index item of the list */
	pListItem->pPrev = pList->pIndex;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681a      	ldr	r2, [r3, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	605a      	str	r2, [r3, #4]
	/* Make the previous of the item that was the next the new item */
	pListItem->pNext->pPrev = pListItem;
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	683a      	ldr	r2, [r7, #0]
 800064e:	605a      	str	r2, [r3, #4]
	/* Make the next item of the current index item the new list item */
	pList->pIndex->pNext = pListItem;
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	683a      	ldr	r2, [r7, #0]
 8000656:	601a      	str	r2, [r3, #0]
	/* Update the current index to the new item */
	pList->pIndex = pListItem;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	683a      	ldr	r2, [r7, #0]
 800065c:	601a      	str	r2, [r3, #0]
	/* Set the list of the new item as the list */
	pListItem->pList = pList;
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	609a      	str	r2, [r3, #8]
	/* Increment the number of items in the list */
	pList->numListItems++;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	1c5a      	adds	r2, r3, #1
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	60da      	str	r2, [r3, #12]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr

0800067a <RTOS_listInsert>:
 * 	pListItem -> The RTOS list item to be inserted
 * Return:
 * 	None
 */
void RTOS_listInsert(RTOS_list_t* pList, RTOS_listItem_t* pListItem)
{
 800067a:	b480      	push	{r7}
 800067c:	b085      	sub	sp, #20
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
 8000682:	6039      	str	r1, [r7, #0]
	ASSERT(pList != NULL);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d101      	bne.n	800068e <RTOS_listInsert+0x14>
 800068a:	b672      	cpsid	i
 800068c:	e7fe      	b.n	800068c <RTOS_listInsert+0x12>
	ASSERT(pListItem != NULL);
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d101      	bne.n	8000698 <RTOS_listInsert+0x1e>
 8000694:	b672      	cpsid	i
 8000696:	e7fe      	b.n	8000696 <RTOS_listInsert+0x1c>

	/* Start with the first item in the list */
	RTOS_listItem_t* pCurrentItem = (RTOS_listItem_t*) &pList->endItem;
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3304      	adds	r3, #4
 800069c:	60fb      	str	r3, [r7, #12]
	 * Lazy evaluation prevents the second condition from being
	 * tested in case the next item was the end item as it doesn't
	 * have pThread
	 */
	 /* Not less than or equal so the thread waiting the most gets executed first */
	while((pCurrentItem->pNext != (RTOS_listItem_t*) &pList->endItem) &&
 800069e:	e002      	b.n	80006a6 <RTOS_listInsert+0x2c>
	(pListItem->orderValue < pCurrentItem->pNext->orderValue))
	{
		pCurrentItem = pCurrentItem->pNext;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	60fb      	str	r3, [r7, #12]
	while((pCurrentItem->pNext != (RTOS_listItem_t*) &pList->endItem) &&
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3304      	adds	r3, #4
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d006      	beq.n	80006c0 <RTOS_listInsert+0x46>
	(pListItem->orderValue < pCurrentItem->pNext->orderValue))
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	691a      	ldr	r2, [r3, #16]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	691b      	ldr	r3, [r3, #16]
	while((pCurrentItem->pNext != (RTOS_listItem_t*) &pList->endItem) &&
 80006bc:	429a      	cmp	r2, r3
 80006be:	d3ef      	bcc.n	80006a0 <RTOS_listInsert+0x26>
	}

	/* Make the next of the new item the next of the current index item of list */
	pListItem->pNext = pCurrentItem->pNext;
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	601a      	str	r2, [r3, #0]
	/* Make the previous of the new item the current index item of the list */
	pListItem->pPrev = pCurrentItem;
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	605a      	str	r2, [r3, #4]
	/* Make the previous of the item that was the next the new item */
	pListItem->pNext->pPrev = pListItem;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	605a      	str	r2, [r3, #4]
	/* Make the next item of the current index item the new list item */
	pCurrentItem->pNext = pListItem;
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	683a      	ldr	r2, [r7, #0]
 80006da:	601a      	str	r2, [r3, #0]
	/* Set the list of the new item as the list */
	pListItem->pList = pList;
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	609a      	str	r2, [r3, #8]
	/* Increment the number of items in the list */
	pList->numListItems++;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	68db      	ldr	r3, [r3, #12]
 80006e6:	1c5a      	adds	r2, r3, #1
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	60da      	str	r2, [r3, #12]
}
 80006ec:	bf00      	nop
 80006ee:	3714      	adds	r7, #20
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr

080006f8 <RTOS_listRemove>:
 * 	pListItem -> The RTOS list item to be removed
 * Return:
 * 	None
 */
void RTOS_listRemove(RTOS_listItem_t* pListItem)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	ASSERT(pListItem != NULL);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d101      	bne.n	800070a <RTOS_listRemove+0x12>
 8000706:	b672      	cpsid	i
 8000708:	e7fe      	b.n	8000708 <RTOS_listRemove+0x10>
	RTOS_list_t* pList = pListItem->pList;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	689b      	ldr	r3, [r3, #8]
 800070e:	60fb      	str	r3, [r7, #12]
	ASSERT(pListItem != (RTOS_listItem_t*) &pList->endItem);
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	1d1a      	adds	r2, r3, #4
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	429a      	cmp	r2, r3
 8000718:	d101      	bne.n	800071e <RTOS_listRemove+0x26>
 800071a:	b672      	cpsid	i
 800071c:	e7fe      	b.n	800071c <RTOS_listRemove+0x24>

	/* Make the next of previous item the next item */
	pListItem->pPrev->pNext = pListItem->pNext;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	6812      	ldr	r2, [r2, #0]
 8000726:	601a      	str	r2, [r3, #0]
	/* Make the previous of the next item the previous item */
	pListItem->pNext->pPrev = pListItem->pPrev;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	6852      	ldr	r2, [r2, #4]
 8000730:	605a      	str	r2, [r3, #4]
	/* Check if the removed item is the index of the list */
	if(pListItem == pList->pIndex)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	429a      	cmp	r2, r3
 800073a:	d103      	bne.n	8000744 <RTOS_listRemove+0x4c>
	{
		/* Make the previous item the new index */
		pList->pIndex = pListItem->pPrev;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	601a      	str	r2, [r3, #0]
	else
	{

	}
	/* Make the list of the item NULL */
	pListItem->pList = NULL;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
	/* Increment the number of items in the list */
	pList->numListItems--;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	68db      	ldr	r3, [r3, #12]
 800074e:	1e5a      	subs	r2, r3, #1
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	60da      	str	r2, [r3, #12]
}
 8000754:	bf00      	nop
 8000756:	3714      	adds	r7, #20
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <RTOS_mailBoxInit>:

#include "rtos.h"


void RTOS_mailBoxInit(RTOS_mailBox_t* pMailBox, void* pBuffer, uint32_t bufferCapacity, uint32_t messageSize)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
 800076c:	603b      	str	r3, [r7, #0]
	ASSERT(pMailBox != NULL);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d101      	bne.n	8000778 <RTOS_mailBoxInit+0x18>
 8000774:	b672      	cpsid	i
 8000776:	e7fe      	b.n	8000776 <RTOS_mailBoxInit+0x16>
	ASSERT(pBuffer != NULL);
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <RTOS_mailBoxInit+0x22>
 800077e:	b672      	cpsid	i
 8000780:	e7fe      	b.n	8000780 <RTOS_mailBoxInit+0x20>
	ASSERT(bufferCapacity > 0);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d101      	bne.n	800078c <RTOS_mailBoxInit+0x2c>
 8000788:	b672      	cpsid	i
 800078a:	e7fe      	b.n	800078a <RTOS_mailBoxInit+0x2a>
	ASSERT(messageSize > 0)
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d101      	bne.n	8000796 <RTOS_mailBoxInit+0x36>
 8000792:	b672      	cpsid	i
 8000794:	e7fe      	b.n	8000794 <RTOS_mailBoxInit+0x34>

	/* Initialize the MailBox */
	pMailBox->pBuffer = (uint32_t)pBuffer;
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	601a      	str	r2, [r3, #0]
	/* To ensure message size alignment */
	pMailBox->bufferCapacity = (bufferCapacity / messageSize) * messageSize;
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a4:	683a      	ldr	r2, [r7, #0]
 80007a6:	fb02 f203 	mul.w	r2, r2, r3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	605a      	str	r2, [r3, #4]
	pMailBox->messageSize = messageSize;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	609a      	str	r2, [r3, #8]
	pMailBox->readIndex = 0;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
	pMailBox->writeIndex = 0;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
	RTOS_semaphoreInit(& pMailBox->mailBoxSemaphore, 1);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3314      	adds	r3, #20
 80007c4:	2101      	movs	r1, #1
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f95c 	bl	8000a84 <RTOS_semaphoreInit>
	RTOS_semaphoreInit(& pMailBox->emptySpacesSemaphore, bufferCapacity);
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	3328      	adds	r3, #40	; 0x28
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f955 	bl	8000a84 <RTOS_semaphoreInit>
	RTOS_semaphoreInit(& pMailBox->usedSpacesSemaphore, 0);
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	333c      	adds	r3, #60	; 0x3c
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f94f 	bl	8000a84 <RTOS_semaphoreInit>
}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}

080007ee <RTOS_mailBoxSend>:
void RTOS_mailBoxSend(RTOS_mailBox_t* pMailBox, void* pBuffer)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	6039      	str	r1, [r7, #0]
	/* If buffer is full, block the process */
	RTOS_semaphoreWait(& pMailBox->emptySpacesSemaphore);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3328      	adds	r3, #40	; 0x28
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 f957 	bl	8000ab0 <RTOS_semaphoreWait>
	/* The mailbox is a shared resource so we need to protect it*/
	RTOS_semaphoreWait(& pMailBox->mailBoxSemaphore);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	3314      	adds	r3, #20
 8000806:	4618      	mov	r0, r3
 8000808:	f000 f952 	bl	8000ab0 <RTOS_semaphoreWait>
	/* Copy the data into the mailbox buffer */
	memcpy((void*)(pMailBox->pBuffer + pMailBox->writeIndex), pBuffer, pMailBox->messageSize);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	691b      	ldr	r3, [r3, #16]
 8000814:	4413      	add	r3, r2
 8000816:	4618      	mov	r0, r3
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	461a      	mov	r2, r3
 800081e:	6839      	ldr	r1, [r7, #0]
 8000820:	f000 feba 	bl	8001598 <memcpy>
	/* Increment the write index, If we reached the end of the buffer then reset in the index */
	pMailBox->writeIndex = (pMailBox->writeIndex + pMailBox->messageSize) % pMailBox->bufferCapacity;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	691a      	ldr	r2, [r3, #16]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	4413      	add	r3, r2
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	6852      	ldr	r2, [r2, #4]
 8000832:	fbb3 f1f2 	udiv	r1, r3, r2
 8000836:	fb02 f201 	mul.w	r2, r2, r1
 800083a:	1a9a      	subs	r2, r3, r2
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	611a      	str	r2, [r3, #16]
	/* Release the mailbox semaphore */
	RTOS_semaphoreSignal(& pMailBox->mailBoxSemaphore);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3314      	adds	r3, #20
 8000844:	4618      	mov	r0, r3
 8000846:	f000 f973 	bl	8000b30 <RTOS_semaphoreSignal>
	/* Increment the used spaces in the mailbox */
	RTOS_semaphoreSignal(& pMailBox->usedSpacesSemaphore);
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	333c      	adds	r3, #60	; 0x3c
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f96e 	bl	8000b30 <RTOS_semaphoreSignal>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <RTOS_mailBoxReceive>:

void RTOS_mailBoxReceive(RTOS_mailBox_t* pMailBox, void* pBuffer)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
	/* If the mailbox is empty, block the process */
	RTOS_semaphoreWait(& pMailBox->usedSpacesSemaphore);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	333c      	adds	r3, #60	; 0x3c
 800086a:	4618      	mov	r0, r3
 800086c:	f000 f920 	bl	8000ab0 <RTOS_semaphoreWait>
	/* The mailbox is a shared resource so we need to protect it*/
	RTOS_semaphoreWait(& pMailBox->mailBoxSemaphore);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3314      	adds	r3, #20
 8000874:	4618      	mov	r0, r3
 8000876:	f000 f91b 	bl	8000ab0 <RTOS_semaphoreWait>
	/* Copy the data from the mailbox buffer */
	memcpy(pBuffer, (void*)(pMailBox->pBuffer + pMailBox->readIndex), pMailBox->messageSize);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681a      	ldr	r2, [r3, #0]
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	4413      	add	r3, r2
 8000884:	4619      	mov	r1, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	461a      	mov	r2, r3
 800088c:	6838      	ldr	r0, [r7, #0]
 800088e:	f000 fe83 	bl	8001598 <memcpy>
	/* Increment the read index, If we reached the end of the buffer then reset the index */
	pMailBox->readIndex = (pMailBox->readIndex + pMailBox->messageSize) % pMailBox->bufferCapacity;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	68da      	ldr	r2, [r3, #12]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	4413      	add	r3, r2
 800089c:	687a      	ldr	r2, [r7, #4]
 800089e:	6852      	ldr	r2, [r2, #4]
 80008a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80008a4:	fb02 f201 	mul.w	r2, r2, r1
 80008a8:	1a9a      	subs	r2, r3, r2
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	60da      	str	r2, [r3, #12]
	/* Release the mailbox semaphore */
	RTOS_semaphoreSignal(& pMailBox->mailBoxSemaphore);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3314      	adds	r3, #20
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f93c 	bl	8000b30 <RTOS_semaphoreSignal>
	/* Increment the empty spaces in the mailbox */
	RTOS_semaphoreSignal(& pMailBox->emptySpacesSemaphore);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	3328      	adds	r3, #40	; 0x28
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f937 	bl	8000b30 <RTOS_semaphoreSignal>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <RTOS_mutexInit>:
 *  value -> Value to which the mutex will be initialized
 * Return:
 * 	None
 */
void RTOS_mutexInit(RTOS_mutex_t* pMutex, int32_t value)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
 80008d2:	6039      	str	r1, [r7, #0]
	ASSERT((value == RTOS_MUTEX_USED) || (value == RTOS_MUTEX_FREE));
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d004      	beq.n	80008e4 <RTOS_mutexInit+0x1a>
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d001      	beq.n	80008e4 <RTOS_mutexInit+0x1a>
 80008e0:	b672      	cpsid	i
 80008e2:	e7fe      	b.n	80008e2 <RTOS_mutexInit+0x18>
	/* Initialize the mutex list */
	RTOS_listInit(&pMutex->mutexList);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fe78 	bl	80005dc <RTOS_listInit>
	/* Set the mutex value */
	pMutex->value = value;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	683a      	ldr	r2, [r7, #0]
 80008f0:	611a      	str	r2, [r3, #16]
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <RTOS_mutexLock>:
 * Return:
 * 	None
 */

void RTOS_mutexLock(RTOS_mutex_t* pMutex)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	uint8_t success = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(1)
	{
		/* Read the mutex value */
		/* If the mutex is free */
		if((int32_t)__LDREXW((uint32_t*) &pMutex->value) == RTOS_MUTEX_FREE)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	3310      	adds	r3, #16
 800090e:	61fb      	str	r3, [r7, #28]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	e853 3f00 	ldrex	r3, [r3]
 8000916:	61bb      	str	r3, [r7, #24]
   return(result);
 8000918:	69bb      	ldr	r3, [r7, #24]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d112      	bne.n	8000944 <RTOS_mutexLock+0x48>
		{
			/* Set the mutex as used, If we failed to set the mutex value then just keep trying */
			if(__STREXW(RTOS_MUTEX_USED, (uint32_t*) &pMutex->value) == 0)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3310      	adds	r3, #16
 8000922:	2200      	movs	r2, #0
 8000924:	617a      	str	r2, [r7, #20]
 8000926:	613b      	str	r3, [r7, #16]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000928:	6939      	ldr	r1, [r7, #16]
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	e841 2300 	strex	r3, r2, [r1]
 8000930:	60fb      	str	r3, [r7, #12]
   return(result);
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1e8      	bne.n	800090a <RTOS_mutexLock+0xe>
			{
				success = 1;
 8000938:	2301      	movs	r3, #1
 800093a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  __ASM volatile ("dmb");
 800093e:	f3bf 8f5f 	dmb	sy
				/* Data Memory Barrier */
				__DMB();
				break;
 8000942:	e000      	b.n	8000946 <RTOS_mutexLock+0x4a>
			}
		}
		/* If the mutex is used then we failed to acquire the mutex */
		else
		{
			break;
 8000944:	bf00      	nop
		}
	}

	/* In case of failure to acquire the mutex */
	if(success != 1)
 8000946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800094a:	2b01      	cmp	r3, #1
 800094c:	d017      	beq.n	800097e <RTOS_mutexLock+0x82>
	{
		/* Block this process */
		RTOS_listItem_t* pRunningItem = &(RTOS_threadGetRunning()->listItem);
 800094e:	f000 fa03 	bl	8000d58 <RTOS_threadGetRunning>
 8000952:	4603      	mov	r3, r0
 8000954:	3308      	adds	r3, #8
 8000956:	623b      	str	r3, [r7, #32]

		/* Set the items' ordering value */
		pRunningItem->orderValue = ((RTOS_thread_t*)pRunningItem->pThread)->priority;
 8000958:	6a3b      	ldr	r3, [r7, #32]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	685a      	ldr	r2, [r3, #4]
 800095e:	6a3b      	ldr	r3, [r7, #32]
 8000960:	611a      	str	r2, [r3, #16]

		/* Remove the thread from the ready list */
		RTOS_listRemove(pRunningItem);
 8000962:	6a38      	ldr	r0, [r7, #32]
 8000964:	f7ff fec8 	bl	80006f8 <RTOS_listRemove>

		/* Add the thread to the semaphores' list */
		RTOS_listInsert(&pMutex->mutexList, pRunningItem);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6a39      	ldr	r1, [r7, #32]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fe84 	bl	800067a <RTOS_listInsert>

		/* Invoke a pendSV exception */
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000972:	4a05      	ldr	r2, [pc, #20]	; (8000988 <RTOS_mutexLock+0x8c>)
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <RTOS_mutexLock+0x8c>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	6053      	str	r3, [r2, #4]
	}
	else
	{

	}
}
 800097e:	bf00      	nop
 8000980:	3728      	adds	r7, #40	; 0x28
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <RTOS_mutexUnlock>:
 *  pMutex -> Pointer to the mutex
 * Return:
 * 	None
 */
void RTOS_mutexUnlock(RTOS_mutex_t* pMutex)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	f3bf 8f5f 	dmb	sy
	/* Data Memory Barrier */
	__DMB();
	/* Unlock the mutex */
	pMutex->value = RTOS_MUTEX_FREE;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2201      	movs	r2, #1
 800099c:	611a      	str	r2, [r3, #16]
	if(pMutex->mutexList.numListItems > 0)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d00a      	beq.n	80009bc <RTOS_mutexUnlock+0x30>
	{
		/* Remove a process from the list */
		RTOS_listItem_t* pRemovedItem = pMutex->mutexList.endItem.pPrev;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	60fb      	str	r3, [r7, #12]
		RTOS_listRemove(pRemovedItem);
 80009ac:	68f8      	ldr	r0, [r7, #12]
 80009ae:	f7ff fea3 	bl	80006f8 <RTOS_listRemove>
		/* Place this thread in the ready list */
		RTOS_threadAddToReadyList(pRemovedItem->pThread);
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	68db      	ldr	r3, [r3, #12]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 f9da 	bl	8000d70 <RTOS_threadAddToReadyList>
	}
	else
	{

	}
}
 80009bc:	bf00      	nop
 80009be:	3710      	adds	r7, #16
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <RTOS_idleThreadFunc>:
 * 	None
 * Return:
 * 	None
 */
static void RTOS_idleThreadFunc(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
	while(1);
 80009c8:	e7fe      	b.n	80009c8 <RTOS_idleThreadFunc+0x4>
	...

080009cc <RTOS_schedulerStart>:
 * 	None
 * Return:
 * 	None
 */
void RTOS_schedulerStart(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
	/* Create the idle thread */
	RTOS_threadCreate(&RTOS_idleThread, &RTOS_idleThreadStack, RTOS_idleThreadFunc, MAX_PRIORITY_LEVEL - 1);
 80009d2:	230f      	movs	r3, #15
 80009d4:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <RTOS_schedulerStart+0x60>)
 80009d6:	4916      	ldr	r1, [pc, #88]	; (8000a30 <RTOS_schedulerStart+0x64>)
 80009d8:	4816      	ldr	r0, [pc, #88]	; (8000a34 <RTOS_schedulerStart+0x68>)
 80009da:	f000 f93f 	bl	8000c5c <RTOS_threadCreate>

	/* Switch to the top priority ready thread */
	RTOS_threadSwitch();
 80009de:	f000 fa03 	bl	8000de8 <RTOS_threadSwitch>

	/* Get the new ready thread */
	RTOS_thread_t* pNewRunningThread = RTOS_threadGetRunning();
 80009e2:	f000 f9b9 	bl	8000d58 <RTOS_threadGetRunning>
 80009e6:	60f8      	str	r0, [r7, #12]

	/* Set the exception return value */
	RTOS_SVC_excReturn = MEM32WORD(pNewRunningThread->pStack);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <RTOS_schedulerStart+0x6c>)
 80009f0:	6013      	str	r3, [r2, #0]

	/* Set the Process Stack Pointer */
	__set_PSP(pNewRunningThread->pStack + 10 * 4);
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	3328      	adds	r3, #40	; 0x28
 80009f8:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	f383 8809 	msr	PSP, r3

	/* Set the control register */
	__set_CONTROL(MEM32WORD(pNewRunningThread->pStack + (1 << 2)));
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	3304      	adds	r3, #4
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f383 8814 	msr	CONTROL, r3
  __ASM volatile ("isb");
 8000a10:	f3bf 8f6f 	isb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed. */
	__ISB();

	/* Reset SysTick Count */
	RTOS_systickCount = 0;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <RTOS_schedulerStart+0x70>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	f383 8811 	msr	BASEPRI, r3

	/* Enable all interrupts */
	__set_BASEPRI(0);

}
 8000a24:	bf00      	nop
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	080009c5 	.word	0x080009c5
 8000a30:	20000060 	.word	0x20000060
 8000a34:	2000003c 	.word	0x2000003c
 8000a38:	2000217c 	.word	0x2000217c
 8000a3c:	20002178 	.word	0x20002178

08000a40 <RTOS_SysTick_Handler>:
 * 	None
 * Return:
 * 	None
 */
void RTOS_SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
 	/* Check for delayed threads to be unblocked */
 	RTOS_threadDelayCheck();
 8000a44:	f000 fa58 	bl	8000ef8 <RTOS_threadDelayCheck>

	/* Invoke a pendSV exception */
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000a48:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <RTOS_SysTick_Handler+0x24>)
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <RTOS_SysTick_Handler+0x24>)
 8000a4c:	685b      	ldr	r3, [r3, #4]
 8000a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a52:	6053      	str	r3, [r2, #4]

    /* Increment SysTick Count */
    RTOS_systickCount++;
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <RTOS_SysTick_Handler+0x28>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	4a03      	ldr	r2, [pc, #12]	; (8000a68 <RTOS_SysTick_Handler+0x28>)
 8000a5c:	6013      	str	r3, [r2, #0]
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	e000ed00 	.word	0xe000ed00
 8000a68:	20002178 	.word	0x20002178

08000a6c <RTOS_schedulerGetSystickCount>:
 * 	None
 * Return:
 * 	None
 */
uint32_t RTOS_schedulerGetSystickCount(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
	return RTOS_systickCount;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <RTOS_schedulerGetSystickCount+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20002178 	.word	0x20002178

08000a84 <RTOS_semaphoreInit>:
 *  value -> Value to which the semaphore will be initialized
 * Return:
 * 	None
 */
void RTOS_semaphoreInit(RTOS_semaphore_t* pSemaphore, int32_t value)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	ASSERT(value >= 0);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	da01      	bge.n	8000a98 <RTOS_semaphoreInit+0x14>
  __ASM volatile ("cpsid i" : : : "memory");
 8000a94:	b672      	cpsid	i
 8000a96:	e7fe      	b.n	8000a96 <RTOS_semaphoreInit+0x12>
	/* Initialize the semaphores list */
	RTOS_listInit(&pSemaphore->semaphoreList);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f7ff fd9e 	bl	80005dc <RTOS_listInit>
	/* Set the semaphores' value */
	pSemaphore->value = value;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	683a      	ldr	r2, [r7, #0]
 8000aa4:	611a      	str	r2, [r3, #16]
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <RTOS_semaphoreWait>:
 * Return:
 * 	None
 */

void RTOS_semaphoreWait(RTOS_semaphore_t* pSemaphore)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	; 0x28
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	/* Keep trying to acquire the semaphore */
	int32_t value;
	do
	{
		/* Load the semaphore value */
		value = (int32_t)__LDREXW((uint32_t*) &pSemaphore->value);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3310      	adds	r3, #16
 8000abc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	e853 3f00 	ldrex	r3, [r3]
 8000ac4:	60fb      	str	r3, [r7, #12]
   return(result);
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	627b      	str	r3, [r7, #36]	; 0x24
		/* Decrement the semaphore value */
		value--;
 8000aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000acc:	3b01      	subs	r3, #1
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
	}
	while( __STREXW(value,(uint32_t*) &pSemaphore->value) == 1);
 8000ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	3310      	adds	r3, #16
 8000ad6:	61fa      	str	r2, [r7, #28]
 8000ad8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ada:	69b9      	ldr	r1, [r7, #24]
 8000adc:	69fa      	ldr	r2, [r7, #28]
 8000ade:	e841 2300 	strex	r3, r2, [r1]
 8000ae2:	617b      	str	r3, [r7, #20]
   return(result);
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	2b01      	cmp	r3, #1
 8000ae8:	d0e6      	beq.n	8000ab8 <RTOS_semaphoreWait+0x8>
  __ASM volatile ("dmb");
 8000aea:	f3bf 8f5f 	dmb	sy

	/* Data Memory Barrier */
	__DMB();

	if(value < 0)
 8000aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	da17      	bge.n	8000b24 <RTOS_semaphoreWait+0x74>
	{
		/* Block this process */
		RTOS_listItem_t* pRunningItem = &(RTOS_threadGetRunning()->listItem);
 8000af4:	f000 f930 	bl	8000d58 <RTOS_threadGetRunning>
 8000af8:	4603      	mov	r3, r0
 8000afa:	3308      	adds	r3, #8
 8000afc:	623b      	str	r3, [r7, #32]

		/* Set the items' ordering value */
		pRunningItem->orderValue = ((RTOS_thread_t*)pRunningItem->pThread)->priority;
 8000afe:	6a3b      	ldr	r3, [r7, #32]
 8000b00:	68db      	ldr	r3, [r3, #12]
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	6a3b      	ldr	r3, [r7, #32]
 8000b06:	611a      	str	r2, [r3, #16]

		/* Remove the thread from the ready list */
		RTOS_listRemove(pRunningItem);
 8000b08:	6a38      	ldr	r0, [r7, #32]
 8000b0a:	f7ff fdf5 	bl	80006f8 <RTOS_listRemove>

		/* Add the thread to the semaphores' list */
		RTOS_listInsert(&pSemaphore->semaphoreList, pRunningItem);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a39      	ldr	r1, [r7, #32]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fdb1 	bl	800067a <RTOS_listInsert>

		/* Invoke a pendSV exception */
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <RTOS_semaphoreWait+0x7c>)
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <RTOS_semaphoreWait+0x7c>)
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b22:	6053      	str	r3, [r2, #4]
	}
	else
	{

	}
}
 8000b24:	bf00      	nop
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <RTOS_semaphoreSignal>:
 *  pSemaphore -> Pointer to the semaphore
 * Return:
 * 	None
 */
void RTOS_semaphoreSignal(RTOS_semaphore_t* pSemaphore)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	/* Keep trying to acquire the semaphore */
	int32_t value;
	do
	{
		/* Load the semaphore value */
		value = (int32_t)__LDREXW((uint32_t*) &pSemaphore->value);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3310      	adds	r3, #16
 8000b3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	e853 3f00 	ldrex	r3, [r3]
 8000b44:	60fb      	str	r3, [r7, #12]
   return(result);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
		/* Increment the semaphore value */
		value++;
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	627b      	str	r3, [r7, #36]	; 0x24
	}
	while( __STREXW(value,(uint32_t*) &pSemaphore->value) == 1);
 8000b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3310      	adds	r3, #16
 8000b56:	61fa      	str	r2, [r7, #28]
 8000b58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000b5a:	69b9      	ldr	r1, [r7, #24]
 8000b5c:	69fa      	ldr	r2, [r7, #28]
 8000b5e:	e841 2300 	strex	r3, r2, [r1]
 8000b62:	617b      	str	r3, [r7, #20]
   return(result);
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d0e6      	beq.n	8000b38 <RTOS_semaphoreSignal+0x8>
  __ASM volatile ("dmb");
 8000b6a:	f3bf 8f5f 	dmb	sy

	/* Data Memory Barrier */
	__DMB();

	if(value <= 0)
 8000b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	dc0a      	bgt.n	8000b8a <RTOS_semaphoreSignal+0x5a>
	{
		/* Remove a process from the list */
		RTOS_listItem_t* pRemovedItem = pSemaphore->semaphoreList.endItem.pPrev;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689b      	ldr	r3, [r3, #8]
 8000b78:	623b      	str	r3, [r7, #32]
		RTOS_listRemove(pRemovedItem);
 8000b7a:	6a38      	ldr	r0, [r7, #32]
 8000b7c:	f7ff fdbc 	bl	80006f8 <RTOS_listRemove>
		/* Place this thread in the ready list */
		RTOS_threadAddToReadyList(pRemovedItem->pThread);
 8000b80:	6a3b      	ldr	r3, [r7, #32]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f000 f8f3 	bl	8000d70 <RTOS_threadAddToReadyList>
	}
	else
	{

	}
}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	; 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <RTOS_spinInit>:
 *  value -> Value to which the SpinLock will be initialized
 * Return:
 * 	None
 */
void RTOS_spinInit(RTOS_spinLock_t* pSpinLock, int32_t value)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	6039      	str	r1, [r7, #0]
	ASSERT((value == RTOS_SPINLOCK_USED) || (value == RTOS_SPINLOCK_FREE));
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d004      	beq.n	8000bac <RTOS_spinInit+0x1a>
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d001      	beq.n	8000bac <RTOS_spinInit+0x1a>
 8000ba8:	b672      	cpsid	i
 8000baa:	e7fe      	b.n	8000baa <RTOS_spinInit+0x18>
	/* Set the mutex value */
	pSpinLock->value = value;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	601a      	str	r2, [r3, #0]
}
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <RTOS_spinLock>:
 * Return:
 * 	None
 */

void RTOS_spinLock(RTOS_spinLock_t* pSpinLock)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	b089      	sub	sp, #36	; 0x24
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
	while(1)
	{
		/* Read the spinlock value */
		/* If the spinlock is free */
		if((int32_t)__LDREXW((uint32_t*) &pSpinLock->value) == RTOS_SPINLOCK_FREE)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	e853 3f00 	ldrex	r3, [r3]
 8000bd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d1f6      	bne.n	8000bc6 <RTOS_spinLock+0x8>
		{
			/* Set the spinlock as used, If we failed to set the spinlock value then just keep trying */
			if(__STREXW(RTOS_SPINLOCK_USED, (uint32_t*) &pSpinLock->value) == 0)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	617a      	str	r2, [r7, #20]
 8000bde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000be0:	6939      	ldr	r1, [r7, #16]
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	e841 2300 	strex	r3, r2, [r1]
 8000be8:	60fb      	str	r3, [r7, #12]
   return(result);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1ea      	bne.n	8000bc6 <RTOS_spinLock+0x8>
  __ASM volatile ("dmb");
 8000bf0:	f3bf 8f5f 	dmb	sy
			{
				/* Data Memory Barrier */
				__DMB();
				return;
 8000bf4:	bf00      	nop
		else
		{

		}
	}
}
 8000bf6:	3724      	adds	r7, #36	; 0x24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <RTOS_spinUnlock>:
 *  pSpinLock -> Pointer to the spinlock
 * Return:
 * 	None
 */
void RTOS_spinUnlock(RTOS_spinLock_t* pSpinLock)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	f3bf 8f5f 	dmb	sy
	/* Data Memory Barrier */
	__DMB();
	/* Unlock the spinlock */
	pSpinLock->value = RTOS_SPINLOCK_FREE;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <RTOS_threadListsInit>:
 *  None
 * Return:
 * 	None
 */
void RTOS_threadListsInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	/* Initialize the ready lists */
	uint32_t i;
	for(i = 0; i < MAX_PRIORITY_LEVEL; i++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	e009      	b.n	8000c40 <RTOS_threadListsInit+0x20>
		RTOS_listInit(&RTOS_readyList[i]);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	011b      	lsls	r3, r3, #4
 8000c30:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <RTOS_threadListsInit+0x34>)
 8000c32:	4413      	add	r3, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fcd1 	bl	80005dc <RTOS_listInit>
	for(i = 0; i < MAX_PRIORITY_LEVEL; i++)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b0f      	cmp	r3, #15
 8000c44:	d9f2      	bls.n	8000c2c <RTOS_threadListsInit+0xc>

	/* Initialize the delayed list */
	RTOS_listInit(&RTOS_delayList);
 8000c46:	4804      	ldr	r0, [pc, #16]	; (8000c58 <RTOS_threadListsInit+0x38>)
 8000c48:	f7ff fcc8 	bl	80005dc <RTOS_listInit>
}
 8000c4c:	bf00      	nop
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20002064 	.word	0x20002064
 8000c58:	20002164 	.word	0x20002164

08000c5c <RTOS_threadCreate>:
 * 	priority -> The thread priority level
 * Return:
 * 	None
 */
void RTOS_threadCreate(RTOS_thread_t* pThread, RTOS_stack_t* pStack, void* pFunction, uint32_t priority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
 8000c68:	603b      	str	r3, [r7, #0]
	ASSERT(pThread != NULL);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d101      	bne.n	8000c74 <RTOS_threadCreate+0x18>
 8000c70:	b672      	cpsid	i
 8000c72:	e7fe      	b.n	8000c72 <RTOS_threadCreate+0x16>
	ASSERT(pStack != NULL);
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d101      	bne.n	8000c7e <RTOS_threadCreate+0x22>
 8000c7a:	b672      	cpsid	i
 8000c7c:	e7fe      	b.n	8000c7c <RTOS_threadCreate+0x20>
	ASSERT(pFunction != NULL);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d101      	bne.n	8000c88 <RTOS_threadCreate+0x2c>
 8000c84:	b672      	cpsid	i
 8000c86:	e7fe      	b.n	8000c86 <RTOS_threadCreate+0x2a>
	ASSERT((priority < MAX_PRIORITY_LEVEL) && (priority >= 0));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	2b0f      	cmp	r3, #15
 8000c8c:	d901      	bls.n	8000c92 <RTOS_threadCreate+0x36>
 8000c8e:	b672      	cpsid	i
 8000c90:	e7fe      	b.n	8000c90 <RTOS_threadCreate+0x34>
	 * PC
	 * xPSR
	 */

	/* Initialize the stack pointer */
	pThread->pStack = (uint32_t)pStack->stack + MAX_STACK_SIZE * 8 - 18 * 4;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	f503 53fd 	add.w	r3, r3, #8096	; 0x1fa0
 8000c98:	3318      	adds	r3, #24
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	6013      	str	r3, [r2, #0]

	/* Initialize EXC_RETURN (Return to thread mode using PSP) */
	MEM32WORD(pThread->pStack) = 0xFFFFFFFDUL;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	f06f 0302 	mvn.w	r3, #2
 8000ca8:	6013      	str	r3, [r2, #0]

	/* Initialize the CONTROL Register (No FPU, PSP, Unprivileged mode)*/
	MEM32WORD(pThread->pStack + (1 << 2)) = 0x3;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	3304      	adds	r3, #4
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	6013      	str	r3, [r2, #0]

	/* Initialize the program counter */
	MEM32WORD(pThread->pStack + (16 << 2)) = (uint32_t)pFunction;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	3340      	adds	r3, #64	; 0x40
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]

	/* Initialize the xPSR register to only Thumb mode*/
	MEM32WORD(pThread->pStack + (17 << 2)) = 0x01000000;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3344      	adds	r3, #68	; 0x44
 8000cc8:	461a      	mov	r2, r3
 8000cca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cce:	6013      	str	r3, [r2, #0]

	/* Set the priority level */
	pThread->priority = priority;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	683a      	ldr	r2, [r7, #0]
 8000cd4:	605a      	str	r2, [r3, #4]

	/* Set thread ID */
	pThread->threadId = numThreads;
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <RTOS_threadCreate+0xe8>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	61da      	str	r2, [r3, #28]
	numThreads++;
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <RTOS_threadCreate+0xe8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a17      	ldr	r2, [pc, #92]	; (8000d44 <RTOS_threadCreate+0xe8>)
 8000ce6:	6013      	str	r3, [r2, #0]

	/* Set the thread state to ready */
	pThread->threadState = RTOS_THREADREADY;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2201      	movs	r2, #1
 8000cec:	f883 2020 	strb.w	r2, [r3, #32]

	/* Set the thread's list item thread pointer */
	pThread->listItem.pThread = pThread;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	615a      	str	r2, [r3, #20]

	/* Add the thread to the ready list */
	RTOS_listInsertEnd(&RTOS_readyList[priority], &pThread->listItem);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	4a13      	ldr	r2, [pc, #76]	; (8000d48 <RTOS_threadCreate+0xec>)
 8000cfc:	441a      	add	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	3308      	adds	r3, #8
 8000d02:	4619      	mov	r1, r3
 8000d04:	4610      	mov	r0, r2
 8000d06:	f7ff fc87 	bl	8000618 <RTOS_listInsertEnd>

	/* Check if the new thread has a new highest priority */
	if(priority < currentTopPriority)
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <RTOS_threadCreate+0xf0>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d202      	bcs.n	8000d1a <RTOS_threadCreate+0xbe>
	{
		currentTopPriority = priority;
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <RTOS_threadCreate+0xf0>)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	6013      	str	r3, [r2, #0]
	{

	}

	/* Check if the scheduler has started and the currently running thread has a lower priority */
	if((pRunningThread != NULL) && (priority < pRunningThread->priority))
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <RTOS_threadCreate+0xf4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d00b      	beq.n	8000d3a <RTOS_threadCreate+0xde>
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <RTOS_threadCreate+0xf4>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d905      	bls.n	8000d3a <RTOS_threadCreate+0xde>
	{
		/* Invoke a pendSV exception */
	    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000d2e:	4a09      	ldr	r2, [pc, #36]	; (8000d54 <RTOS_threadCreate+0xf8>)
 8000d30:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <RTOS_threadCreate+0xf8>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6053      	str	r3, [r2, #4]
	else
	{

	}

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20002174 	.word	0x20002174
 8000d48:	20002064 	.word	0x20002064
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20002060 	.word	0x20002060
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <RTOS_threadGetRunning>:
 *  None
 * Return:
 * 	Pointer to the running thread
 */
RTOS_thread_t* RTOS_threadGetRunning(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	return pRunningThread;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <RTOS_threadGetRunning+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20002060 	.word	0x20002060

08000d70 <RTOS_threadAddToReadyList>:
 *  pThread -> The thread to be inserted in the ready list
 * Return:
 * 	Pointer to the the list
 */
void RTOS_threadAddToReadyList(RTOS_thread_t* pThread)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	RTOS_listItem_t* pListItem = &pThread->listItem;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3308      	adds	r3, #8
 8000d7c:	60fb      	str	r3, [r7, #12]
	/* Add the thread to ready list */
	RTOS_listInsertEnd(&RTOS_readyList[pThread->priority], pListItem);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	4a14      	ldr	r2, [pc, #80]	; (8000dd8 <RTOS_threadAddToReadyList+0x68>)
 8000d86:	4413      	add	r3, r2
 8000d88:	68f9      	ldr	r1, [r7, #12]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fc44 	bl	8000618 <RTOS_listInsertEnd>
	/* Set the thread state as ready */
	pThread->threadState = RTOS_THREADREADY;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2201      	movs	r2, #1
 8000d94:	f883 2020 	strb.w	r2, [r3, #32]
	/* Check if the thread has a new highest priority */
	if(pThread->priority < currentTopPriority)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <RTOS_threadAddToReadyList+0x6c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d203      	bcs.n	8000dac <RTOS_threadAddToReadyList+0x3c>
	{
		/* Set the new top priority */
		currentTopPriority = pThread->priority;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <RTOS_threadAddToReadyList+0x6c>)
 8000daa:	6013      	str	r3, [r2, #0]
	else
	{

	}

	if(pRunningThread != NULL &&
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <RTOS_threadAddToReadyList+0x70>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d00c      	beq.n	8000dce <RTOS_threadAddToReadyList+0x5e>
	(pThread->priority < pRunningThread->priority))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	685a      	ldr	r2, [r3, #4]
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <RTOS_threadAddToReadyList+0x70>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
	if(pRunningThread != NULL &&
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d205      	bcs.n	8000dce <RTOS_threadAddToReadyList+0x5e>
	{
		/* Invoke a pendSV exception */
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <RTOS_threadAddToReadyList+0x74>)
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <RTOS_threadAddToReadyList+0x74>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	6053      	str	r3, [r2, #4]
	}
	else
	{
	}
}
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20002064 	.word	0x20002064
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20002060 	.word	0x20002060
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <RTOS_threadSwitch>:
 *  None
 * Return:
 * 	None
 */
void RTOS_threadSwitch(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
	/* Check if the current top priority list became empty */
	while(RTOS_readyList[currentTopPriority].numListItems == 0)
 8000dee:	e004      	b.n	8000dfa <RTOS_threadSwitch+0x12>
	{
		currentTopPriority++;
 8000df0:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <RTOS_threadSwitch+0xa8>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	4a26      	ldr	r2, [pc, #152]	; (8000e90 <RTOS_threadSwitch+0xa8>)
 8000df8:	6013      	str	r3, [r2, #0]
	while(RTOS_readyList[currentTopPriority].numListItems == 0)
 8000dfa:	4b25      	ldr	r3, [pc, #148]	; (8000e90 <RTOS_threadSwitch+0xa8>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a25      	ldr	r2, [pc, #148]	; (8000e94 <RTOS_threadSwitch+0xac>)
 8000e00:	011b      	lsls	r3, r3, #4
 8000e02:	4413      	add	r3, r2
 8000e04:	330c      	adds	r3, #12
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0f1      	beq.n	8000df0 <RTOS_threadSwitch+0x8>
	}

	/* Get the next thread in the list */
	RTOS_readyList[currentTopPriority].pIndex = RTOS_readyList[currentTopPriority].pIndex->pNext;
 8000e0c:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <RTOS_threadSwitch+0xa8>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <RTOS_threadSwitch+0xa8>)
 8000e12:	6812      	ldr	r2, [r2, #0]
 8000e14:	491f      	ldr	r1, [pc, #124]	; (8000e94 <RTOS_threadSwitch+0xac>)
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	440a      	add	r2, r1
 8000e1a:	6812      	ldr	r2, [r2, #0]
 8000e1c:	6812      	ldr	r2, [r2, #0]
 8000e1e:	491d      	ldr	r1, [pc, #116]	; (8000e94 <RTOS_threadSwitch+0xac>)
 8000e20:	011b      	lsls	r3, r3, #4
 8000e22:	440b      	add	r3, r1
 8000e24:	601a      	str	r2, [r3, #0]

	/* Check if the current index is the end item */
	if(RTOS_readyList[currentTopPriority].pIndex == (RTOS_listItem_t*) &RTOS_readyList[currentTopPriority].endItem)
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <RTOS_threadSwitch+0xa8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a1a      	ldr	r2, [pc, #104]	; (8000e94 <RTOS_threadSwitch+0xac>)
 8000e2c:	011b      	lsls	r3, r3, #4
 8000e2e:	4413      	add	r3, r2
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <RTOS_threadSwitch+0xa8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	011b      	lsls	r3, r3, #4
 8000e38:	4916      	ldr	r1, [pc, #88]	; (8000e94 <RTOS_threadSwitch+0xac>)
 8000e3a:	440b      	add	r3, r1
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d10c      	bne.n	8000e5c <RTOS_threadSwitch+0x74>
	{
		/* Increment the index */
		RTOS_readyList[currentTopPriority].pIndex = RTOS_readyList[currentTopPriority].pIndex->pNext;
 8000e42:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <RTOS_threadSwitch+0xa8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <RTOS_threadSwitch+0xa8>)
 8000e48:	6812      	ldr	r2, [r2, #0]
 8000e4a:	4912      	ldr	r1, [pc, #72]	; (8000e94 <RTOS_threadSwitch+0xac>)
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	440a      	add	r2, r1
 8000e50:	6812      	ldr	r2, [r2, #0]
 8000e52:	6812      	ldr	r2, [r2, #0]
 8000e54:	490f      	ldr	r1, [pc, #60]	; (8000e94 <RTOS_threadSwitch+0xac>)
 8000e56:	011b      	lsls	r3, r3, #4
 8000e58:	440b      	add	r3, r1
 8000e5a:	601a      	str	r2, [r3, #0]
	}

	RTOS_thread_t* pThread = RTOS_readyList[currentTopPriority].pIndex->pThread;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <RTOS_threadSwitch+0xa8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0c      	ldr	r2, [pc, #48]	; (8000e94 <RTOS_threadSwitch+0xac>)
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	4413      	add	r3, r2
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	607b      	str	r3, [r7, #4]

	/* Set the currently running thread */
	pRunningThread = pThread;
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <RTOS_threadSwitch+0xb0>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
	runningThreadID = pThread->threadId;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	4a09      	ldr	r2, [pc, #36]	; (8000e9c <RTOS_threadSwitch+0xb4>)
 8000e78:	6013      	str	r3, [r2, #0]

	/* Set the thread state to running */
	pThread->threadState = RTOS_THREADRUNNING;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000000 	.word	0x20000000
 8000e94:	20002064 	.word	0x20002064
 8000e98:	20002060 	.word	0x20002060
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <RTOS_threadDelay>:
 *  systicks -> Number of system ticks to be delayed
 * Return:
 * 	None
 */
void RTOS_threadDelay(uint32_t systicks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
	/* Remove the current thread from ready list */
	RTOS_listItem_t* pListItem = & pRunningThread->listItem;
 8000ea8:	4b10      	ldr	r3, [pc, #64]	; (8000eec <RTOS_threadDelay+0x4c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	3308      	adds	r3, #8
 8000eae:	60fb      	str	r3, [r7, #12]
	RTOS_listRemove(pListItem);
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f7ff fc21 	bl	80006f8 <RTOS_listRemove>

	/* Set the delay amount */
	pListItem->orderValue = RTOS_schedulerGetSystickCount() + systicks;
 8000eb6:	f7ff fdd9 	bl	8000a6c <RTOS_schedulerGetSystickCount>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	441a      	add	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	611a      	str	r2, [r3, #16]

	/* Add the thread to the delayed list */
	RTOS_listInsert(&RTOS_delayList, pListItem);
 8000ec4:	68f9      	ldr	r1, [r7, #12]
 8000ec6:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <RTOS_threadDelay+0x50>)
 8000ec8:	f7ff fbd7 	bl	800067a <RTOS_listInsert>

	/* Set the thread state to blocked */
	pRunningThread->threadState = RTOS_THREADBLOCKED;
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <RTOS_threadDelay+0x4c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	f883 2020 	strb.w	r2, [r3, #32]

	/* Invoke a pendSV exception */
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000ed6:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <RTOS_threadDelay+0x54>)
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <RTOS_threadDelay+0x54>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	6053      	str	r3, [r2, #4]
}
 8000ee2:	bf00      	nop
 8000ee4:	3710      	adds	r7, #16
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20002060 	.word	0x20002060
 8000ef0:	20002164 	.word	0x20002164
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <RTOS_threadDelayCheck>:
 *  None
 * Return:
 * 	None
 */
void RTOS_threadDelayCheck(void)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
	if(RTOS_delayList.numListItems > 0)
 8000efe:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <RTOS_threadDelayCheck+0x3c>)
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d011      	beq.n	8000f2a <RTOS_threadDelayCheck+0x32>
	{
		/* Check for delayed threads */
		RTOS_listItem_t* pListItem = RTOS_delayList.endItem.pPrev;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <RTOS_threadDelayCheck+0x3c>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	607b      	str	r3, [r7, #4]
		if(pListItem->orderValue <= RTOS_schedulerGetSystickCount())
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	691c      	ldr	r4, [r3, #16]
 8000f10:	f7ff fdac 	bl	8000a6c <RTOS_schedulerGetSystickCount>
 8000f14:	4603      	mov	r3, r0
 8000f16:	429c      	cmp	r4, r3
 8000f18:	d807      	bhi.n	8000f2a <RTOS_threadDelayCheck+0x32>
		{
			/* Remove the current thread from delay list */
			RTOS_listRemove(pListItem);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff fbec 	bl	80006f8 <RTOS_listRemove>

			/* Add the thread to the ready list */
			RTOS_threadAddToReadyList(pListItem->pThread);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff23 	bl	8000d70 <RTOS_threadAddToReadyList>
		}
	}
	else
	{
	}
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd90      	pop	{r4, r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20002164 	.word	0x20002164

08000f38 <RTOS_threadTerminate>:
 *  pThread -> Pointer to the thread to be deleted
 * Return:
 * 	None
 */
void RTOS_threadTerminate(RTOS_thread_t* pThread)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	/* Delete the currently running thread */
	if(pThread == NULL)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d112      	bne.n	8000f6c <RTOS_threadTerminate+0x34>
	{
		/* Remove the current thread from ready list */
		RTOS_listItem_t* pListItem = & pRunningThread->listItem;
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <RTOS_threadTerminate+0x50>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	3308      	adds	r3, #8
 8000f4c:	60fb      	str	r3, [r7, #12]
		RTOS_listRemove(pListItem);
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff fbd2 	bl	80006f8 <RTOS_listRemove>

		/* Set the thread state to terminated */
		pRunningThread->threadState = RTOS_THREADTERMINATED;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <RTOS_threadTerminate+0x50>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2203      	movs	r2, #3
 8000f5a:	f883 2020 	strb.w	r2, [r3, #32]

		/* Invoke a pendSV exception */
		SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <RTOS_threadTerminate+0x54>)
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <RTOS_threadTerminate+0x54>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f68:	6053      	str	r3, [r2, #4]
		RTOS_listRemove(pListItem);

		/* Set the thread state to terminated */
		pThread->threadState = RTOS_THREADTERMINATED;
	}
}
 8000f6a:	e009      	b.n	8000f80 <RTOS_threadTerminate+0x48>
		RTOS_listItem_t* pListItem = & pThread->listItem;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3308      	adds	r3, #8
 8000f70:	60bb      	str	r3, [r7, #8]
		RTOS_listRemove(pListItem);
 8000f72:	68b8      	ldr	r0, [r7, #8]
 8000f74:	f7ff fbc0 	bl	80006f8 <RTOS_listRemove>
		pThread->threadState = RTOS_THREADTERMINATED;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2203      	movs	r2, #3
 8000f7c:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20002060 	.word	0x20002060
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b087      	sub	sp, #28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
 8000faa:	e076      	b.n	800109a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000fac:	2201      	movs	r2, #1
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d165      	bne.n	8001094 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	2103      	movs	r1, #3
 8000fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd6:	43db      	mvns	r3, r3
 8000fd8:	401a      	ands	r2, r3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	791b      	ldrb	r3, [r3, #4]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	791b      	ldrb	r3, [r3, #4]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d003      	beq.n	8001006 <GPIO_Init+0x76>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	791b      	ldrb	r3, [r3, #4]
 8001002:	2b02      	cmp	r3, #2
 8001004:	d12e      	bne.n	8001064 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2103      	movs	r1, #3
 8001010:	fa01 f303 	lsl.w	r3, r1, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	401a      	ands	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	795b      	ldrb	r3, [r3, #5]
 8001024:	4619      	mov	r1, r3
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	431a      	orrs	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	b29b      	uxth	r3, r3
 800103c:	4619      	mov	r1, r3
 800103e:	2301      	movs	r3, #1
 8001040:	408b      	lsls	r3, r1
 8001042:	43db      	mvns	r3, r3
 8001044:	401a      	ands	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	683a      	ldr	r2, [r7, #0]
 8001050:	7992      	ldrb	r2, [r2, #6]
 8001052:	4611      	mov	r1, r2
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	b292      	uxth	r2, r2
 8001058:	fa01 f202 	lsl.w	r2, r1, r2
 800105c:	b292      	uxth	r2, r2
 800105e:	431a      	orrs	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68da      	ldr	r2, [r3, #12]
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	b29b      	uxth	r3, r3
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	2103      	movs	r1, #3
 8001070:	fa01 f303 	lsl.w	r3, r1, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	401a      	ands	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	79db      	ldrb	r3, [r3, #7]
 8001084:	4619      	mov	r1, r3
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	fa01 f303 	lsl.w	r3, r1, r3
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	3301      	adds	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2b0f      	cmp	r3, #15
 800109e:	d985      	bls.n	8000fac <GPIO_Init+0x1c>
    }
  }
}
 80010a0:	bf00      	nop
 80010a2:	371c      	adds	r7, #28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	460b      	mov	r3, r1
 80010b6:	807b      	strh	r3, [r7, #2]
 80010b8:	4613      	mov	r3, r2
 80010ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 80010bc:	787b      	ldrb	r3, [r7, #1]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	887a      	ldrh	r2, [r7, #2]
 80010c6:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 80010c8:	e002      	b.n	80010d0 <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	887a      	ldrh	r2, [r7, #2]
 80010ce:	835a      	strh	r2, [r3, #26]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr

080010dc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d006      	beq.n	80010fc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80010ee:	490a      	ldr	r1, [pc, #40]	; (8001118 <RCC_AHB1PeriphClockCmd+0x3c>)
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <RCC_AHB1PeriphClockCmd+0x3c>)
 80010f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80010fa:	e006      	b.n	800110a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80010fc:	4906      	ldr	r1, [pc, #24]	; (8001118 <RCC_AHB1PeriphClockCmd+0x3c>)
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	43db      	mvns	r3, r3
 8001106:	4013      	ands	r3, r2
 8001108:	630b      	str	r3, [r1, #48]	; 0x30
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800

0800111c <func_1>:
RTOS_stack_t stack[3];
RTOS_mailBox_t mailbox;
uint32_t buffer[10];

void func_1(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
	uint32_t val = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
	while(1)
	{
		RTOS_SVC_threadDelay(500);
 8001126:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800112a:	f7ff f8a3 	bl	8000274 <RTOS_SVC_threadDelay>
		RTOS_SVC_mailBoxSend(&mailbox, &val);
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4619      	mov	r1, r3
 8001132:	4804      	ldr	r0, [pc, #16]	; (8001144 <func_1+0x28>)
 8001134:	f7ff f8b6 	bl	80002a4 <RTOS_SVC_mailBoxSend>
		val = (val + 1) % 4;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3301      	adds	r3, #1
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	607b      	str	r3, [r7, #4]
		RTOS_SVC_threadDelay(500);
 8001142:	e7f0      	b.n	8001126 <func_1+0xa>
 8001144:	20002180 	.word	0x20002180

08001148 <func_2>:
	}
}

void func_2(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	uint32_t val;
	while(1)
	{
		RTOS_SVC_mailBoxReceive(&mailbox, &val);
 800114e:	1d3b      	adds	r3, r7, #4
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <func_2+0x40>)
 8001154:	f7ff f8a8 	bl	80002a8 <RTOS_SVC_mailBoxReceive>
		GPIO_WriteBit(GPIOG, (1 << 13), (val & 1));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	b2db      	uxtb	r3, r3
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	461a      	mov	r2, r3
 8001164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001168:	4808      	ldr	r0, [pc, #32]	; (800118c <func_2+0x44>)
 800116a:	f7ff ff9f 	bl	80010ac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOG, (1 << 14), (val >> 1) & 1);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	085b      	lsrs	r3, r3, #1
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <func_2+0x44>)
 8001182:	f7ff ff93 	bl	80010ac <GPIO_WriteBit>
		RTOS_SVC_mailBoxReceive(&mailbox, &val);
 8001186:	e7e2      	b.n	800114e <func_2+0x6>
 8001188:	20002180 	.word	0x20002180
 800118c:	40021800 	.word	0x40021800

08001190 <func_3>:
	}
}

void func_3(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
	uint32_t val;
	while(1)
	{
		RTOS_SVC_mailBoxReceive(&mailbox, &val);
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4619      	mov	r1, r3
 800119a:	480d      	ldr	r0, [pc, #52]	; (80011d0 <func_3+0x40>)
 800119c:	f7ff f884 	bl	80002a8 <RTOS_SVC_mailBoxReceive>
		GPIO_WriteBit(GPIOG, (1 << 14), (val & 1));
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	461a      	mov	r2, r3
 80011ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011b0:	4808      	ldr	r0, [pc, #32]	; (80011d4 <func_3+0x44>)
 80011b2:	f7ff ff7b 	bl	80010ac <GPIO_WriteBit>
		GPIO_WriteBit(GPIOG, (1 << 13), (val >> 1) & 1);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	085b      	lsrs	r3, r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	461a      	mov	r2, r3
 80011c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <func_3+0x44>)
 80011ca:	f7ff ff6f 	bl	80010ac <GPIO_WriteBit>
		RTOS_SVC_mailBoxReceive(&mailbox, &val);
 80011ce:	e7e2      	b.n	8001196 <func_3+0x6>
 80011d0:	20002180 	.word	0x20002180
 80011d4:	40021800 	.word	0x40021800

080011d8 <main>:
	}
}

int main(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOG, ENABLE);
 80011de:	2101      	movs	r1, #1
 80011e0:	2040      	movs	r0, #64	; 0x40
 80011e2:	f7ff ff7b 	bl	80010dc <RCC_AHB1PeriphClockCmd>
	GPIO_Init(GPIOG, &(GPIO_InitTypeDef){
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <main+0x60>)
 80011e8:	463b      	mov	r3, r7
 80011ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80011f2:	463b      	mov	r3, r7
 80011f4:	4619      	mov	r1, r3
 80011f6:	4811      	ldr	r0, [pc, #68]	; (800123c <main+0x64>)
 80011f8:	f7ff feca 	bl	8000f90 <GPIO_Init>
			GPIO_OType_PP,
			GPIO_PuPd_NOPULL
	  });


	RTOS_init();
 80011fc:	f7ff f8e0 	bl	80003c0 <RTOS_init>

	RTOS_SVC_threadCreate(&thread[0], &stack[0], func_1, 1);
 8001200:	2301      	movs	r3, #1
 8001202:	4a0f      	ldr	r2, [pc, #60]	; (8001240 <main+0x68>)
 8001204:	490f      	ldr	r1, [pc, #60]	; (8001244 <main+0x6c>)
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <main+0x70>)
 8001208:	f7ff f832 	bl	8000270 <RTOS_SVC_threadCreate>
	RTOS_SVC_threadCreate(&thread[1], &stack[1], func_2, 1);
 800120c:	2301      	movs	r3, #1
 800120e:	4a0f      	ldr	r2, [pc, #60]	; (800124c <main+0x74>)
 8001210:	490f      	ldr	r1, [pc, #60]	; (8001250 <main+0x78>)
 8001212:	4810      	ldr	r0, [pc, #64]	; (8001254 <main+0x7c>)
 8001214:	f7ff f82c 	bl	8000270 <RTOS_SVC_threadCreate>
	RTOS_SVC_threadCreate(&thread[2], &stack[2], func_3, 1);
 8001218:	2301      	movs	r3, #1
 800121a:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <main+0x80>)
 800121c:	490f      	ldr	r1, [pc, #60]	; (800125c <main+0x84>)
 800121e:	4810      	ldr	r0, [pc, #64]	; (8001260 <main+0x88>)
 8001220:	f7ff f826 	bl	8000270 <RTOS_SVC_threadCreate>

	RTOS_SVC_mailBoxInit(&mailbox, buffer, 10, 4);
 8001224:	2304      	movs	r3, #4
 8001226:	220a      	movs	r2, #10
 8001228:	490e      	ldr	r1, [pc, #56]	; (8001264 <main+0x8c>)
 800122a:	480f      	ldr	r0, [pc, #60]	; (8001268 <main+0x90>)
 800122c:	f7ff f838 	bl	80002a0 <RTOS_SVC_mailBoxInit>

	RTOS_SVC_schedulerStart();
 8001230:	f7ff f81c 	bl	800026c <RTOS_SVC_schedulerStart>

	while(1);
 8001234:	e7fe      	b.n	8001234 <main+0x5c>
 8001236:	bf00      	nop
 8001238:	080015c8 	.word	0x080015c8
 800123c:	40021800 	.word	0x40021800
 8001240:	0800111d 	.word	0x0800111d
 8001244:	20002240 	.word	0x20002240
 8001248:	200021d0 	.word	0x200021d0
 800124c:	08001149 	.word	0x08001149
 8001250:	20004240 	.word	0x20004240
 8001254:	200021f4 	.word	0x200021f4
 8001258:	08001191 	.word	0x08001191
 800125c:	20006240 	.word	0x20006240
 8001260:	20002218 	.word	0x20002218
 8001264:	20008240 	.word	0x20008240
 8001268:	20002180 	.word	0x20002180

0800126c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a4 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001270:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001272:	e003      	b.n	800127c <LoopCopyDataInit>

08001274 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001276:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001278:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800127a:	3104      	adds	r1, #4

0800127c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800127c:	480b      	ldr	r0, [pc, #44]	; (80012ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800127e:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001280:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001282:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001284:	d3f6      	bcc.n	8001274 <CopyDataInit>
  ldr  r2, =_sbss
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001288:	e002      	b.n	8001290 <LoopFillZerobss>

0800128a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800128a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800128c:	f842 3b04 	str.w	r3, [r2], #4

08001290 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001292:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001294:	d3f9      	bcc.n	800128a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001296:	f000 f82d 	bl	80012f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800129a:	f000 f959 	bl	8001550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800129e:	f7ff ff9b 	bl	80011d8 <main>
  bx  lr    
 80012a2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012a4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80012a8:	080015d8 	.word	0x080015d8
  ldr  r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012b0:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 80012b4:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 80012b8:	20008268 	.word	0x20008268

080012bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC_IRQHandler>

080012be <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <HardFault_Handler+0x4>

080012d2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <MemManage_Handler+0x4>

080012d8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <BusFault_Handler+0x4>

080012de <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80012e2:	e7fe      	b.n	80012e2 <UsageFault_Handler+0x4>

080012e4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
	...

080012f4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f8:	4a16      	ldr	r2, [pc, #88]	; (8001354 <SystemInit+0x60>)
 80012fa:	4b16      	ldr	r3, [pc, #88]	; (8001354 <SystemInit+0x60>)
 80012fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001308:	4a13      	ldr	r2, [pc, #76]	; (8001358 <SystemInit+0x64>)
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <SystemInit+0x64>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <SystemInit+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800131a:	4a0f      	ldr	r2, [pc, #60]	; (8001358 <SystemInit+0x64>)
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <SystemInit+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <SystemInit+0x64>)
 800132c:	4a0b      	ldr	r2, [pc, #44]	; (800135c <SystemInit+0x68>)
 800132e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001330:	4a09      	ldr	r2, [pc, #36]	; (8001358 <SystemInit+0x64>)
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <SystemInit+0x64>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <SystemInit+0x64>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001342:	f000 f889 	bl	8001458 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001346:	4b03      	ldr	r3, [pc, #12]	; (8001354 <SystemInit+0x60>)
 8001348:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800134c:	609a      	str	r2, [r3, #8]
#endif
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000ed00 	.word	0xe000ed00
 8001358:	40023800 	.word	0x40023800
 800135c:	24003010 	.word	0x24003010

08001360 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	2302      	movs	r3, #2
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	2302      	movs	r3, #2
 8001378:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800137a:	4b32      	ldr	r3, [pc, #200]	; (8001444 <SystemCoreClockUpdate+0xe4>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 030c 	and.w	r3, r3, #12
 8001382:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	2b04      	cmp	r3, #4
 8001388:	d007      	beq.n	800139a <SystemCoreClockUpdate+0x3a>
 800138a:	2b08      	cmp	r3, #8
 800138c:	d009      	beq.n	80013a2 <SystemCoreClockUpdate+0x42>
 800138e:	2b00      	cmp	r3, #0
 8001390:	d13d      	bne.n	800140e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001392:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <SystemCoreClockUpdate+0xe8>)
 8001394:	4a2d      	ldr	r2, [pc, #180]	; (800144c <SystemCoreClockUpdate+0xec>)
 8001396:	601a      	str	r2, [r3, #0]
      break;
 8001398:	e03d      	b.n	8001416 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800139a:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <SystemCoreClockUpdate+0xe8>)
 800139c:	4a2c      	ldr	r2, [pc, #176]	; (8001450 <SystemCoreClockUpdate+0xf0>)
 800139e:	601a      	str	r2, [r3, #0]
      break;
 80013a0:	e039      	b.n	8001416 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80013a2:	4b28      	ldr	r3, [pc, #160]	; (8001444 <SystemCoreClockUpdate+0xe4>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	0d9b      	lsrs	r3, r3, #22
 80013a8:	f003 0301 	and.w	r3, r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013ae:	4b25      	ldr	r3, [pc, #148]	; (8001444 <SystemCoreClockUpdate+0xe4>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013b6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d00c      	beq.n	80013d8 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80013be:	4a24      	ldr	r2, [pc, #144]	; (8001450 <SystemCoreClockUpdate+0xf0>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4a1f      	ldr	r2, [pc, #124]	; (8001444 <SystemCoreClockUpdate+0xe4>)
 80013c8:	6852      	ldr	r2, [r2, #4]
 80013ca:	0992      	lsrs	r2, r2, #6
 80013cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80013d0:	fb02 f303 	mul.w	r3, r2, r3
 80013d4:	617b      	str	r3, [r7, #20]
 80013d6:	e00b      	b.n	80013f0 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80013d8:	4a1c      	ldr	r2, [pc, #112]	; (800144c <SystemCoreClockUpdate+0xec>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e0:	4a18      	ldr	r2, [pc, #96]	; (8001444 <SystemCoreClockUpdate+0xe4>)
 80013e2:	6852      	ldr	r2, [r2, #4]
 80013e4:	0992      	lsrs	r2, r2, #6
 80013e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80013ea:	fb02 f303 	mul.w	r3, r2, r3
 80013ee:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <SystemCoreClockUpdate+0xe4>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	0c1b      	lsrs	r3, r3, #16
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	3301      	adds	r3, #1
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001400:	697a      	ldr	r2, [r7, #20]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	fbb2 f3f3 	udiv	r3, r2, r3
 8001408:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <SystemCoreClockUpdate+0xe8>)
 800140a:	6013      	str	r3, [r2, #0]
      break;
 800140c:	e003      	b.n	8001416 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800140e:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <SystemCoreClockUpdate+0xe8>)
 8001410:	4a0e      	ldr	r2, [pc, #56]	; (800144c <SystemCoreClockUpdate+0xec>)
 8001412:	601a      	str	r2, [r3, #0]
      break;
 8001414:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <SystemCoreClockUpdate+0xe4>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <SystemCoreClockUpdate+0xf4>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	b2db      	uxtb	r3, r3
 8001426:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <SystemCoreClockUpdate+0xe8>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	fa22 f303 	lsr.w	r3, r2, r3
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <SystemCoreClockUpdate+0xe8>)
 8001434:	6013      	str	r3, [r2, #0]
}
 8001436:	bf00      	nop
 8001438:	371c      	adds	r7, #28
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	20000008 	.word	0x20000008
 800144c:	00f42400 	.word	0x00f42400
 8001450:	007a1200 	.word	0x007a1200
 8001454:	2000000c 	.word	0x2000000c

08001458 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	2300      	movs	r3, #0
 8001464:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001466:	4a36      	ldr	r2, [pc, #216]	; (8001540 <SetSysClock+0xe8>)
 8001468:	4b35      	ldr	r3, [pc, #212]	; (8001540 <SetSysClock+0xe8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001470:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001472:	4b33      	ldr	r3, [pc, #204]	; (8001540 <SetSysClock+0xe8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3301      	adds	r3, #1
 8001480:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d103      	bne.n	8001490 <SetSysClock+0x38>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800148e:	d1f0      	bne.n	8001472 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <SetSysClock+0xe8>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800149c:	2301      	movs	r3, #1
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	e001      	b.n	80014a6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d142      	bne.n	8001532 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80014ac:	4a24      	ldr	r2, [pc, #144]	; (8001540 <SetSysClock+0xe8>)
 80014ae:	4b24      	ldr	r3, [pc, #144]	; (8001540 <SetSysClock+0xe8>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80014b8:	4a22      	ldr	r2, [pc, #136]	; (8001544 <SetSysClock+0xec>)
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <SetSysClock+0xec>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014c2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80014c4:	4a1e      	ldr	r2, [pc, #120]	; (8001540 <SetSysClock+0xe8>)
 80014c6:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <SetSysClock+0xe8>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80014cc:	4a1c      	ldr	r2, [pc, #112]	; (8001540 <SetSysClock+0xe8>)
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <SetSysClock+0xe8>)
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014d6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80014d8:	4a19      	ldr	r2, [pc, #100]	; (8001540 <SetSysClock+0xe8>)
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <SetSysClock+0xe8>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80014e2:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <SetSysClock+0xe8>)
 80014e6:	4a18      	ldr	r2, [pc, #96]	; (8001548 <SetSysClock+0xf0>)
 80014e8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80014ea:	4a15      	ldr	r2, [pc, #84]	; (8001540 <SetSysClock+0xe8>)
 80014ec:	4b14      	ldr	r3, [pc, #80]	; (8001540 <SetSysClock+0xe8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014f4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80014f6:	bf00      	nop
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <SetSysClock+0xe8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f9      	beq.n	80014f8 <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <SetSysClock+0xf4>)
 8001506:	f240 7205 	movw	r2, #1797	; 0x705
 800150a:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800150c:	4a0c      	ldr	r2, [pc, #48]	; (8001540 <SetSysClock+0xe8>)
 800150e:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <SetSysClock+0xe8>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f023 0303 	bic.w	r3, r3, #3
 8001516:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001518:	4a09      	ldr	r2, [pc, #36]	; (8001540 <SetSysClock+0xe8>)
 800151a:	4b09      	ldr	r3, [pc, #36]	; (8001540 <SetSysClock+0xe8>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8001524:	bf00      	nop
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <SetSysClock+0xe8>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 030c 	and.w	r3, r3, #12
 800152e:	2b08      	cmp	r3, #8
 8001530:	d1f9      	bne.n	8001526 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	40023800 	.word	0x40023800
 8001544:	40007000 	.word	0x40007000
 8001548:	07405a19 	.word	0x07405a19
 800154c:	40023c00 	.word	0x40023c00

08001550 <__libc_init_array>:
 8001550:	b570      	push	{r4, r5, r6, lr}
 8001552:	4e0d      	ldr	r6, [pc, #52]	; (8001588 <__libc_init_array+0x38>)
 8001554:	4c0d      	ldr	r4, [pc, #52]	; (800158c <__libc_init_array+0x3c>)
 8001556:	1ba4      	subs	r4, r4, r6
 8001558:	10a4      	asrs	r4, r4, #2
 800155a:	2500      	movs	r5, #0
 800155c:	42a5      	cmp	r5, r4
 800155e:	d109      	bne.n	8001574 <__libc_init_array+0x24>
 8001560:	4e0b      	ldr	r6, [pc, #44]	; (8001590 <__libc_init_array+0x40>)
 8001562:	4c0c      	ldr	r4, [pc, #48]	; (8001594 <__libc_init_array+0x44>)
 8001564:	f000 f824 	bl	80015b0 <_init>
 8001568:	1ba4      	subs	r4, r4, r6
 800156a:	10a4      	asrs	r4, r4, #2
 800156c:	2500      	movs	r5, #0
 800156e:	42a5      	cmp	r5, r4
 8001570:	d105      	bne.n	800157e <__libc_init_array+0x2e>
 8001572:	bd70      	pop	{r4, r5, r6, pc}
 8001574:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001578:	4798      	blx	r3
 800157a:	3501      	adds	r5, #1
 800157c:	e7ee      	b.n	800155c <__libc_init_array+0xc>
 800157e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001582:	4798      	blx	r3
 8001584:	3501      	adds	r5, #1
 8001586:	e7f2      	b.n	800156e <__libc_init_array+0x1e>
 8001588:	080015d0 	.word	0x080015d0
 800158c:	080015d0 	.word	0x080015d0
 8001590:	080015d0 	.word	0x080015d0
 8001594:	080015d4 	.word	0x080015d4

08001598 <memcpy>:
 8001598:	b510      	push	{r4, lr}
 800159a:	1e43      	subs	r3, r0, #1
 800159c:	440a      	add	r2, r1
 800159e:	4291      	cmp	r1, r2
 80015a0:	d100      	bne.n	80015a4 <memcpy+0xc>
 80015a2:	bd10      	pop	{r4, pc}
 80015a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80015a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80015ac:	e7f7      	b.n	800159e <memcpy+0x6>
	...

080015b0 <_init>:
 80015b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015b2:	bf00      	nop
 80015b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015b6:	bc08      	pop	{r3}
 80015b8:	469e      	mov	lr, r3
 80015ba:	4770      	bx	lr

080015bc <_fini>:
 80015bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015be:	bf00      	nop
 80015c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80015c2:	bc08      	pop	{r3}
 80015c4:	469e      	mov	lr, r3
 80015c6:	4770      	bx	lr
