
Real Time Operating System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008fc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000aa8  08000aa8  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000aa8  08000aa8  00010aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000aac  08000aac  00010aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          000021b4  20000008  20000008  00020008  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  200021bc  200021bc  00020008  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   000022f7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000ab0  00000000  00000000  0002232b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000230  00000000  00000000  00022de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000188  00000000  00000000  00023010  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001371  00000000  00000000  00023198  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00000f34  00000000  00000000  00024509  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002543d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000005a4  00000000  00000000  000254bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000008 	.word	0x20000008
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000a90 	.word	0x08000a90

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000000c 	.word	0x2000000c
 80001e8:	08000a90 	.word	0x08000a90

080001ec <RTOS_SVC_Handler>:

 .text

 .type RTOS_SVC_Handler, %function
 RTOS_SVC_Handler:
 	TST LR, #4
 80001ec:	f01e 0f04 	tst.w	lr, #4
	ITE EQ
 80001f0:	bf0c      	ite	eq
	MRSEQ R0, MSP
 80001f2:	f3ef 8008 	mrseq	r0, MSP
	MRSNE R0, PSP
 80001f6:	f3ef 8009 	mrsne	r0, PSP
	LDR R1, =RTOS_SVC_excReturn
 80001fa:	4917      	ldr	r1, [pc, #92]	; (8000258 <RTOS_PendSV_Handler+0x4c>)
	STR LR, [R1]
 80001fc:	f8c1 e000 	str.w	lr, [r1]
	BL RTOS_SVC_Handler_Main
 8000200:	f000 f82c 	bl	800025c <RTOS_SVC_Handler_Main>
	LDR R1, =RTOS_SVC_excReturn
 8000204:	4914      	ldr	r1, [pc, #80]	; (8000258 <RTOS_PendSV_Handler+0x4c>)
	LDR LR, [R1]
 8000206:	f8d1 e000 	ldr.w	lr, [r1]
	BX LR
 800020a:	4770      	bx	lr

0800020c <RTOS_PendSV_Handler>:

 .type RTOS_PendSV_Handler, %function
 RTOS_PendSV_Handler:
 	/****************** Saving the current thread's context ********************/
 	/* Get PSP */
 	MRS R1, PSP
 800020c:	f3ef 8109 	mrs	r1, PSP
	/* Check if the currently running thread uses FPU
	 * If so so push FPU registers (s16 - s32)
	**/
	TST LR, 0x10	/* Test bit 5 in LR, if it is zero then FPU is enabled */
 8000210:	f01e 0f10 	tst.w	lr, #16
	IT	EQ	/* If zero flag is cleared */
 8000214:	bf08      	it	eq
	VSTMDBEQ R1!, {S16-S31}
 8000216:	ed21 8a10 	vstmdbeq	r1!, {s16-s31}
	/* Save EXC_RETURN into R2 */
	MOV	R2, LR
 800021a:	4672      	mov	r2, lr
	/* Save CONTROL into R3 */
	MRS R3, CONTROL
 800021c:	f3ef 8314 	mrs	r3, CONTROL
	/* Instruction Synchronization Barrier */
	ISB
 8000220:	f3bf 8f6f 	isb	sy
	/* Push {R2 -> R11} into the thread's stack*/
	STMDB R1!, {R2-R11}
 8000224:	e921 0ffc 	stmdb	r1!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
	/* Save the thread's stack pointer */
	BL RTOS_threadGetRunning
 8000228:	f000 fa16 	bl	8000658 <RTOS_threadGetRunning>
	STR R1, [R0]
 800022c:	6001      	str	r1, [r0, #0]

	/****************** Restoring the next thread's context ********************/
 	/* Get the next thread */
 	BL RTOS_threadSwitch
 800022e:	f000 fa1f 	bl	8000670 <RTOS_threadSwitch>
 	/* Set the process stack pointer to the thread's stack */
 	BL RTOS_threadGetRunning
 8000232:	f000 fa11 	bl	8000658 <RTOS_threadGetRunning>
 	LDR R1, [R0]
 8000236:	6801      	ldr	r1, [r0, #0]
 	/* POP {R2 -> R11} from the thread's stack*/
 	LDMIA R1!, {R2-R11}
 8000238:	e8b1 0ffc 	ldmia.w	r1!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 	/* Move R3 into CONTROL */
 	MSR CONTROL, R3
 800023c:	f383 8814 	msr	CONTROL, r3
 	/* Instruction Synchronization Barrier */
 	ISB
 8000240:	f3bf 8f6f 	isb	sy
 	/* MOVE R2 into Link Register */
 	MOV LR, R2
 8000244:	4696      	mov	lr, r2
 	/* Check if the currently running thread uses FPU
	 * If so so pop FPU registers (s16 - s32)
	**/
	TST LR, 0x10	/* Test bit 5 in LR, if it is zero then FPU is enabled */
 8000246:	f01e 0f10 	tst.w	lr, #16
	IT	EQ	/* If zero flag is cleared */
 800024a:	bf08      	it	eq
	VLDMIAEQ R1!, {S16-S31}
 800024c:	ecb1 8a10 	vldmiaeq	r1!, {s16-s31}
	/* Save PSP */
	MSR PSP, R1
 8000250:	f381 8809 	msr	PSP, r1
	/* Return from interrupt */
	BX LR
 8000254:	4770      	bx	lr
 8000256:	0000      	.short	0x0000
	LDR R1, =RTOS_SVC_excReturn
 8000258:	20002164 	.word	0x20002164

0800025c <RTOS_SVC_Handler_Main>:
 * 	svc_args -> The supervisor calls arguments passed to the supervisor call
 * Return:
 * 	None
 */
void RTOS_SVC_Handler_Main(uint32_t* svc_args)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b084      	sub	sp, #16
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
	 * Stack contains:
	 *  r0, r1, r2, r3, r12, r14, the return address and xPSR
	 * First argument (r0) is svc_args[0]
	 */
	uint32_t svc_number;
	svc_number = ((int8_t*)svc_args[6])[-2];
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3318      	adds	r3, #24
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b02      	subs	r3, #2
 800026c:	f993 3000 	ldrsb.w	r3, [r3]
 8000270:	60fb      	str	r3, [r7, #12]

	switch(svc_number)
 8000272:	68fb      	ldr	r3, [r7, #12]
 8000274:	2b01      	cmp	r3, #1
 8000276:	d007      	beq.n	8000288 <RTOS_SVC_Handler_Main+0x2c>
 8000278:	2b01      	cmp	r3, #1
 800027a:	d302      	bcc.n	8000282 <RTOS_SVC_Handler_Main+0x26>
 800027c:	2b02      	cmp	r3, #2
 800027e:	d014      	beq.n	80002aa <RTOS_SVC_Handler_Main+0x4e>
 8000280:	e019      	b.n	80002b6 <RTOS_SVC_Handler_Main+0x5a>
	{
		case 0:
			/* Start the scheduler */
			RTOS_schedulerStart();
 8000282:	f000 f91d 	bl	80004c0 <RTOS_schedulerStart>
			break;
 8000286:	e018      	b.n	80002ba <RTOS_SVC_Handler_Main+0x5e>
		case 1:
			/* Create a thread */
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4618      	mov	r0, r3
							(RTOS_stack_t*)svc_args[1],
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	3304      	adds	r3, #4
 8000292:	681b      	ldr	r3, [r3, #0]
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 8000294:	4619      	mov	r1, r3
							(void *)svc_args[2],
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	3308      	adds	r3, #8
 800029a:	681b      	ldr	r3, [r3, #0]
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 800029c:	461a      	mov	r2, r3
							(uint32_t)svc_args[3]);
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	330c      	adds	r3, #12
			RTOS_threadCreate((RTOS_thread_t*)svc_args[0],
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f000 f95c 	bl	8000560 <RTOS_threadCreate>
			break;
 80002a8:	e007      	b.n	80002ba <RTOS_SVC_Handler_Main+0x5e>
		case 2:
			RTOS_threadDelay((uint32_t) svc_args[0]);
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4618      	mov	r0, r3
 80002b0:	f000 fa2c 	bl	800070c <RTOS_threadDelay>
			break;
 80002b4:	e001      	b.n	80002ba <RTOS_SVC_Handler_Main+0x5e>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002b6:	b672      	cpsid	i
		/* Unsupported supervisor call */
		default:
			ASSERT(0)
 80002b8:	e7fe      	b.n	80002b8 <RTOS_SVC_Handler_Main+0x5c>
			break;
	}
}
 80002ba:	bf00      	nop
 80002bc:	3710      	adds	r7, #16
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}

080002c2 <RTOS_FIFOInit>:
 *  pFIFO -> Pointer to the FIFO queue
 * Return:
 * 	None
 */
void RTOS_FIFOInit(RTOS_FIFO_t* pFIFO)
{
 80002c2:	b480      	push	{r7}
 80002c4:	b083      	sub	sp, #12
 80002c6:	af00      	add	r7, sp, #0
 80002c8:	6078      	str	r0, [r7, #4]
	ASSERT(pFIFO != NULL);
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d101      	bne.n	80002d4 <RTOS_FIFOInit+0x12>
 80002d0:	b672      	cpsid	i
 80002d2:	e7fe      	b.n	80002d2 <RTOS_FIFOInit+0x10>

	/* Set the the indices as end item */
	pFIFO->pPut = (RTOS_listItem_t*) &(pFIFO->endItem);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f103 0208 	add.w	r2, r3, #8
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	601a      	str	r2, [r3, #0]
	pFIFO->pGet = (RTOS_listItem_t*) &(pFIFO->endItem);
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f103 0208 	add.w	r2, r3, #8
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	605a      	str	r2, [r3, #4]

	/* Set the next and previous of the end item as itself */
	pFIFO->endItem.pNext = (RTOS_listItem_t*) &(pFIFO->endItem);
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f103 0208 	add.w	r2, r3, #8
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	609a      	str	r2, [r3, #8]
	pFIFO->endItem.pPrev = (RTOS_listItem_t*) &(pFIFO->endItem);
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f103 0208 	add.w	r2, r3, #8
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	60da      	str	r2, [r3, #12]

	/* Set the number of items in the list to zero */
	pFIFO->numFIFOItems = 0;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2200      	movs	r2, #0
 8000300:	611a      	str	r2, [r3, #16]
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr

0800030e <RTOS_FIFOAppend>:
 *  pFIFO -> Pointer to the FIFO queue
 * Return:
 * 	None
 */
void RTOS_FIFOAppend(RTOS_FIFO_t* pFIFO, RTOS_listItem_t* pListItem)
{
 800030e:	b480      	push	{r7}
 8000310:	b083      	sub	sp, #12
 8000312:	af00      	add	r7, sp, #0
 8000314:	6078      	str	r0, [r7, #4]
 8000316:	6039      	str	r1, [r7, #0]
	ASSERT(pFIFO != NULL);
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d101      	bne.n	8000322 <RTOS_FIFOAppend+0x14>
 800031e:	b672      	cpsid	i
 8000320:	e7fe      	b.n	8000320 <RTOS_FIFOAppend+0x12>
	ASSERT(pListItem != NULL);
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d101      	bne.n	800032c <RTOS_FIFOAppend+0x1e>
 8000328:	b672      	cpsid	i
 800032a:	e7fe      	b.n	800032a <RTOS_FIFOAppend+0x1c>

	/* Make the next of the new item the next of the current index item of list */
	pListItem->pNext = pFIFO->pPut->pNext;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	601a      	str	r2, [r3, #0]
	/* Make the previous of the new item the current index item of the list */
	pListItem->pPrev = pFIFO->pPut;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	605a      	str	r2, [r3, #4]
	/* Make the previous of the item that was the next the new item */
	pListItem->pNext->pPrev = pListItem;
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	683a      	ldr	r2, [r7, #0]
 8000344:	605a      	str	r2, [r3, #4]
	/* Make the next item of the current index item the new list item */
	pFIFO->pPut->pNext = pListItem;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	683a      	ldr	r2, [r7, #0]
 800034c:	601a      	str	r2, [r3, #0]
	/* Update the current index to the new item */
	pFIFO->pPut = pListItem;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	683a      	ldr	r2, [r7, #0]
 8000352:	601a      	str	r2, [r3, #0]
	/* Set the list of the new item as the FIFO */
	pListItem->pList = pFIFO;
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	609a      	str	r2, [r3, #8]
	/* Increment the number of items in the FIFO */
	pFIFO->numFIFOItems++;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	691b      	ldr	r3, [r3, #16]
 800035e:	1c5a      	adds	r2, r3, #1
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	611a      	str	r2, [r3, #16]
}
 8000364:	bf00      	nop
 8000366:	370c      	adds	r7, #12
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <RTOS_FIFORemove>:
 *  pFIFO -> Pointer to the FIFO queue
 * Return:
 * 	FIFO queue removed item
 */
RTOS_listItem_t* RTOS_FIFORemove(RTOS_FIFO_t* pFIFO)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	ASSERT(pFIFO != NULL);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2b00      	cmp	r3, #0
 800037c:	d101      	bne.n	8000382 <RTOS_FIFORemove+0x12>
 800037e:	b672      	cpsid	i
 8000380:	e7fe      	b.n	8000380 <RTOS_FIFORemove+0x10>
	ASSERT(pFIFO->numFIFOItems > 0);
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	691b      	ldr	r3, [r3, #16]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d101      	bne.n	800038e <RTOS_FIFORemove+0x1e>
 800038a:	b672      	cpsid	i
 800038c:	e7fe      	b.n	800038c <RTOS_FIFORemove+0x1c>

	// Do not remove end item
	if(pFIFO->pGet == (RTOS_listItem_t*) &(pFIFO->endItem))
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685a      	ldr	r2, [r3, #4]
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	3308      	adds	r3, #8
 8000396:	429a      	cmp	r2, r3
 8000398:	d104      	bne.n	80003a4 <RTOS_FIFORemove+0x34>
	{
		pFIFO->pGet = pFIFO->pGet->pNext;
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	605a      	str	r2, [r3, #4]
	else
	{

	}

	RTOS_listItem_t* pListItem = pFIFO->pGet;
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	60fb      	str	r3, [r7, #12]

	/* Make the next of previous item the next item */
	pListItem->pPrev->pNext = pListItem->pNext;
 80003aa:	68fb      	ldr	r3, [r7, #12]
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	68fa      	ldr	r2, [r7, #12]
 80003b0:	6812      	ldr	r2, [r2, #0]
 80003b2:	601a      	str	r2, [r3, #0]
	/* Make the previous of the next item the previous item */
	pListItem->pNext->pPrev = pListItem->pPrev;
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	68fa      	ldr	r2, [r7, #12]
 80003ba:	6852      	ldr	r2, [r2, #4]
 80003bc:	605a      	str	r2, [r3, #4]

	pFIFO->pGet = pFIFO->pGet->pNext;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	685b      	ldr	r3, [r3, #4]
 80003c2:	681a      	ldr	r2, [r3, #0]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	605a      	str	r2, [r3, #4]

	/* Handle the case where the FIFO would become empty */
	if(pFIFO->pPut == pFIFO->pGet)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681a      	ldr	r2, [r3, #0]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	685b      	ldr	r3, [r3, #4]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d104      	bne.n	80003de <RTOS_FIFORemove+0x6e>
	{
		pFIFO->pPut = pFIFO->pPut->pNext;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	601a      	str	r2, [r3, #0]
	else
	{

	}

	pFIFO->numFIFOItems--;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	691b      	ldr	r3, [r3, #16]
 80003e2:	1e5a      	subs	r2, r3, #1
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	611a      	str	r2, [r3, #16]

	return pListItem;
 80003e8:	68fb      	ldr	r3, [r7, #12]

}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3714      	adds	r7, #20
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <RTOS_listAppend>:
 * 	pListItem -> The RTOS list item to be inserted
 * Return:
 * 	None
 */
void RTOS_listAppend(RTOS_list_t* pList, RTOS_listItem_t* pListItem)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	6039      	str	r1, [r7, #0]
	ASSERT(pList != NULL);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d101      	bne.n	800040a <RTOS_listAppend+0x14>
 8000406:	b672      	cpsid	i
 8000408:	e7fe      	b.n	8000408 <RTOS_listAppend+0x12>
	ASSERT(pListItem != NULL);
 800040a:	683b      	ldr	r3, [r7, #0]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d101      	bne.n	8000414 <RTOS_listAppend+0x1e>
 8000410:	b672      	cpsid	i
 8000412:	e7fe      	b.n	8000412 <RTOS_listAppend+0x1c>

	/* Make the next of the new item the next of the current index item of list */
	pListItem->pNext = pList->pIndex->pNext;
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	681a      	ldr	r2, [r3, #0]
 800041a:	683b      	ldr	r3, [r7, #0]
 800041c:	601a      	str	r2, [r3, #0]
	/* Make the previous of the new item the current index item of the list */
	pListItem->pPrev = pList->pIndex;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	605a      	str	r2, [r3, #4]
	/* Make the previous of the item that was the next the new item */
	pListItem->pNext->pPrev = pListItem;
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	683a      	ldr	r2, [r7, #0]
 800042c:	605a      	str	r2, [r3, #4]
	/* Make the next item of the current index item the new list item */
	pList->pIndex->pNext = pListItem;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	683a      	ldr	r2, [r7, #0]
 8000434:	601a      	str	r2, [r3, #0]
	/* Update the current index to the new item */
	pList->pIndex = pListItem;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	683a      	ldr	r2, [r7, #0]
 800043a:	601a      	str	r2, [r3, #0]
	/* Set the list of the new item as the list */
	pListItem->pList = pList;
 800043c:	683b      	ldr	r3, [r7, #0]
 800043e:	687a      	ldr	r2, [r7, #4]
 8000440:	609a      	str	r2, [r3, #8]
	/* Increment the number of items in the list */
	pList->numListItems++;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	68db      	ldr	r3, [r3, #12]
 8000446:	1c5a      	adds	r2, r3, #1
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	60da      	str	r2, [r3, #12]
}
 800044c:	bf00      	nop
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000456:	4770      	bx	lr

08000458 <RTOS_listRemove>:
 * 	pListItem -> The RTOS list item to be removed
 * Return:
 * 	None
 */
void RTOS_listRemove(RTOS_listItem_t* pListItem)
{
 8000458:	b480      	push	{r7}
 800045a:	b085      	sub	sp, #20
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	ASSERT(pListItem != NULL);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d101      	bne.n	800046a <RTOS_listRemove+0x12>
 8000466:	b672      	cpsid	i
 8000468:	e7fe      	b.n	8000468 <RTOS_listRemove+0x10>
	RTOS_list_t* pList = pListItem->pList;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	60fb      	str	r3, [r7, #12]
	ASSERT(pListItem != (RTOS_listItem_t*) &pList->endItem);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	1d1a      	adds	r2, r3, #4
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	429a      	cmp	r2, r3
 8000478:	d101      	bne.n	800047e <RTOS_listRemove+0x26>
 800047a:	b672      	cpsid	i
 800047c:	e7fe      	b.n	800047c <RTOS_listRemove+0x24>

	/* Make the next of previous item the next item */
	pListItem->pPrev->pNext = pListItem->pNext;
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	687a      	ldr	r2, [r7, #4]
 8000484:	6812      	ldr	r2, [r2, #0]
 8000486:	601a      	str	r2, [r3, #0]
	/* Make the previous of the next item the previous item */
	pListItem->pNext->pPrev = pListItem->pPrev;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	687a      	ldr	r2, [r7, #4]
 800048e:	6852      	ldr	r2, [r2, #4]
 8000490:	605a      	str	r2, [r3, #4]
	/* Check if the removed item is the index of the list */
	if(pListItem == pList->pIndex)
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	429a      	cmp	r2, r3
 800049a:	d103      	bne.n	80004a4 <RTOS_listRemove+0x4c>
	{
		/* Make the previous item the new index */
		pList->pIndex = pListItem->pPrev;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	685a      	ldr	r2, [r3, #4]
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	601a      	str	r2, [r3, #0]
	else
	{

	}
	/* Increment the number of items in the list */
	pList->numListItems--;
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	1e5a      	subs	r2, r3, #1
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	60da      	str	r2, [r3, #12]
}
 80004ae:	bf00      	nop
 80004b0:	3714      	adds	r7, #20
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr

080004ba <RTOS_idleThreadFunc>:
 * 	None
 * Return:
 * 	None
 */
static void RTOS_idleThreadFunc(void)
{
 80004ba:	b480      	push	{r7}
 80004bc:	af00      	add	r7, sp, #0
	while(1);
 80004be:	e7fe      	b.n	80004be <RTOS_idleThreadFunc+0x4>

080004c0 <RTOS_schedulerStart>:
 * 	None
 * Return:
 * 	None
 */
void RTOS_schedulerStart(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
	/* Create the idle thread */
	RTOS_threadCreate(&RTOS_idleThread, &RTOS_idleThreadStack, RTOS_idleThreadFunc, MAX_PRIORITY_LEVEL - 1);
 80004c6:	230f      	movs	r3, #15
 80004c8:	4a15      	ldr	r2, [pc, #84]	; (8000520 <RTOS_schedulerStart+0x60>)
 80004ca:	4916      	ldr	r1, [pc, #88]	; (8000524 <RTOS_schedulerStart+0x64>)
 80004cc:	4816      	ldr	r0, [pc, #88]	; (8000528 <RTOS_schedulerStart+0x68>)
 80004ce:	f000 f847 	bl	8000560 <RTOS_threadCreate>

	/* Switch to the top priority ready thread */
	RTOS_threadSwitch();
 80004d2:	f000 f8cd 	bl	8000670 <RTOS_threadSwitch>

	/* Get the new ready thread */
	RTOS_thread_t* pNewRunningThread = RTOS_threadGetRunning();
 80004d6:	f000 f8bf 	bl	8000658 <RTOS_threadGetRunning>
 80004da:	60f8      	str	r0, [r7, #12]

	/* Set the exception return value */
	RTOS_SVC_excReturn = MEM32WORD(pNewRunningThread->pStack);
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4a12      	ldr	r2, [pc, #72]	; (800052c <RTOS_schedulerStart+0x6c>)
 80004e4:	6013      	str	r3, [r2, #0]

	/* Set the Process Stack Pointer */
	__set_PSP(pNewRunningThread->pStack + 10 * 4);
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	3328      	adds	r3, #40	; 0x28
 80004ec:	603b      	str	r3, [r7, #0]

    \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp");
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	f383 8809 	msr	PSP, r3

	/* Set the control register */
	__set_CONTROL(MEM32WORD(pNewRunningThread->pStack + (1 << 2)));
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	3304      	adds	r3, #4
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f383 8814 	msr	CONTROL, r3
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
{
  __ASM volatile ("isb");
 8000504:	f3bf 8f6f 	isb	sy
    so that all instructions following the ISB are fetched from cache or
    memory, after the instruction has been completed. */
	__ISB();

	/* Reset SysTick Count */
	RTOS_systickCount = 0;
 8000508:	4b09      	ldr	r3, [pc, #36]	; (8000530 <RTOS_schedulerStart+0x70>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]

    \param [in]    basePri  Base Priority value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_BASEPRI(uint32_t value)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (value) : "memory");
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	f383 8811 	msr	BASEPRI, r3

	/* Enable all interrupts */
	__set_BASEPRI(0);

}
 8000518:	bf00      	nop
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	080004bb 	.word	0x080004bb
 8000524:	20000048 	.word	0x20000048
 8000528:	20000024 	.word	0x20000024
 800052c:	20002164 	.word	0x20002164
 8000530:	20002160 	.word	0x20002160

08000534 <RTOS_SysTick_Handler>:
 * 	None
 * Return:
 * 	None
 */
void RTOS_SysTick_Handler(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
 	/* Check for threads to be unblocked */
 	RTOS_threadUnblock();
 8000538:	f000 f90e 	bl	8000758 <RTOS_threadUnblock>

	/* Invoke a pendSV exception */
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <RTOS_SysTick_Handler+0x24>)
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <RTOS_SysTick_Handler+0x24>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000546:	6053      	str	r3, [r2, #4]

    /* Increment SysTick Count */
    RTOS_systickCount++;
 8000548:	4b04      	ldr	r3, [pc, #16]	; (800055c <RTOS_SysTick_Handler+0x28>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	3301      	adds	r3, #1
 800054e:	4a03      	ldr	r2, [pc, #12]	; (800055c <RTOS_SysTick_Handler+0x28>)
 8000550:	6013      	str	r3, [r2, #0]
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	e000ed00 	.word	0xe000ed00
 800055c:	20002160 	.word	0x20002160

08000560 <RTOS_threadCreate>:
 * 	priority -> The thread priority level
 * Return:
 * 	None
 */
void RTOS_threadCreate(RTOS_thread_t* pThread, RTOS_stack_t* pStack, void* pFunction, uint32_t priority)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
 800056c:	603b      	str	r3, [r7, #0]
	ASSERT(pThread != NULL);
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d101      	bne.n	8000578 <RTOS_threadCreate+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8000574:	b672      	cpsid	i
 8000576:	e7fe      	b.n	8000576 <RTOS_threadCreate+0x16>
	ASSERT(pStack != NULL);
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d101      	bne.n	8000582 <RTOS_threadCreate+0x22>
 800057e:	b672      	cpsid	i
 8000580:	e7fe      	b.n	8000580 <RTOS_threadCreate+0x20>
	ASSERT(pFunction != NULL);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d101      	bne.n	800058c <RTOS_threadCreate+0x2c>
 8000588:	b672      	cpsid	i
 800058a:	e7fe      	b.n	800058a <RTOS_threadCreate+0x2a>
	ASSERT((priority < MAX_PRIORITY_LEVEL) && (priority >= 0));
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	2b0f      	cmp	r3, #15
 8000590:	d901      	bls.n	8000596 <RTOS_threadCreate+0x36>
 8000592:	b672      	cpsid	i
 8000594:	e7fe      	b.n	8000594 <RTOS_threadCreate+0x34>
	 * PC
	 * xPSR
	 */

	/* Initialize the stack pointer */
	pThread->pStack = (uint32_t)pStack->stack + MAX_STACK_SIZE * 8 - 18 * 4;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	f503 53fd 	add.w	r3, r3, #8096	; 0x1fa0
 800059c:	3318      	adds	r3, #24
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	6013      	str	r3, [r2, #0]

	/* Initialize EXC_RETURN (Return to thread mode using PSP) */
	MEM32WORD(pThread->pStack) = 0xFFFFFFFDUL;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	461a      	mov	r2, r3
 80005a8:	f06f 0302 	mvn.w	r3, #2
 80005ac:	6013      	str	r3, [r2, #0]

	/* Initialize the CONTROL Register (No FPU, PSP, Unprivileged mode)*/
	MEM32WORD(pThread->pStack + (1 << 2)) = 0x3;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	3304      	adds	r3, #4
 80005b4:	461a      	mov	r2, r3
 80005b6:	2303      	movs	r3, #3
 80005b8:	6013      	str	r3, [r2, #0]

	/* Initialize the program counter */
	MEM32WORD(pThread->pStack + (16 << 2)) = (uint32_t)pFunction;
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3340      	adds	r3, #64	; 0x40
 80005c0:	461a      	mov	r2, r3
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6013      	str	r3, [r2, #0]

	/* Initialize the xPSR register to only Thumb mode*/
	MEM32WORD(pThread->pStack + (17 << 2)) = 0x01000000;
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3344      	adds	r3, #68	; 0x44
 80005cc:	461a      	mov	r2, r3
 80005ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80005d2:	6013      	str	r3, [r2, #0]

	/* Set the priority level */
	pThread->priority = priority;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	683a      	ldr	r2, [r7, #0]
 80005d8:	605a      	str	r2, [r3, #4]

	/* Clear the delay amount */
	pThread->delay_systicks = 0;
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2200      	movs	r2, #0
 80005de:	61da      	str	r2, [r3, #28]

	/* Set thread ID */
	pThread->threadId = numThreads;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <RTOS_threadCreate+0xe4>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	619a      	str	r2, [r3, #24]
	numThreads++;
 80005e8:	4b16      	ldr	r3, [pc, #88]	; (8000644 <RTOS_threadCreate+0xe4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a15      	ldr	r2, [pc, #84]	; (8000644 <RTOS_threadCreate+0xe4>)
 80005f0:	6013      	str	r3, [r2, #0]

	/* Set the thread's list item thread pointer */
	pThread->listItem.pThread = pThread;
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	615a      	str	r2, [r3, #20]

	/* Add the thread to the ready list */
	RTOS_listAppend(&RTOS_readyList[priority], &pThread->listItem);
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	011b      	lsls	r3, r3, #4
 80005fc:	4a12      	ldr	r2, [pc, #72]	; (8000648 <RTOS_threadCreate+0xe8>)
 80005fe:	441a      	add	r2, r3
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	3308      	adds	r3, #8
 8000604:	4619      	mov	r1, r3
 8000606:	4610      	mov	r0, r2
 8000608:	f7ff fef5 	bl	80003f6 <RTOS_listAppend>

	/* Check if the new thread has a new highest priority */
	if(priority < currentTopPriority)
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <RTOS_threadCreate+0xec>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	683a      	ldr	r2, [r7, #0]
 8000612:	429a      	cmp	r2, r3
 8000614:	d202      	bcs.n	800061c <RTOS_threadCreate+0xbc>
	{
		currentTopPriority = priority;
 8000616:	4a0d      	ldr	r2, [pc, #52]	; (800064c <RTOS_threadCreate+0xec>)
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	6013      	str	r3, [r2, #0]
	{

	}

	/* Check if the scheduler has started and the currently running thread has a lower priority */
	if((pCurrentlyRunningThread != NULL) && (priority < pCurrentlyRunningThread->priority))
 800061c:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <RTOS_threadCreate+0xf0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d00b      	beq.n	800063c <RTOS_threadCreate+0xdc>
 8000624:	4b0a      	ldr	r3, [pc, #40]	; (8000650 <RTOS_threadCreate+0xf0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	685a      	ldr	r2, [r3, #4]
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	429a      	cmp	r2, r3
 800062e:	d905      	bls.n	800063c <RTOS_threadCreate+0xdc>
	{
		/* Invoke a pendSV exception */
	    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000630:	4a08      	ldr	r2, [pc, #32]	; (8000654 <RTOS_threadCreate+0xf4>)
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <RTOS_threadCreate+0xf4>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6053      	str	r3, [r2, #4]
	else
	{

	}

}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000215c 	.word	0x2000215c
 8000648:	2000204c 	.word	0x2000204c
 800064c:	20000000 	.word	0x20000000
 8000650:	20002048 	.word	0x20002048
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <RTOS_threadGetRunning>:
 *  None
 * Return:
 * 	Pointer to the running thread
 */
RTOS_thread_t* RTOS_threadGetRunning(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
	return pCurrentlyRunningThread;
 800065c:	4b03      	ldr	r3, [pc, #12]	; (800066c <RTOS_threadGetRunning+0x14>)
 800065e:	681b      	ldr	r3, [r3, #0]
}
 8000660:	4618      	mov	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	20002048 	.word	0x20002048

08000670 <RTOS_threadSwitch>:
 *  None
 * Return:
 * 	None
 */
void RTOS_threadSwitch(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
	/* Check if the current top priority list became empty */
	while(RTOS_readyList[currentTopPriority].numListItems == 0)
 8000674:	e004      	b.n	8000680 <RTOS_threadSwitch+0x10>
	{
		currentTopPriority++;
 8000676:	4b22      	ldr	r3, [pc, #136]	; (8000700 <RTOS_threadSwitch+0x90>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	3301      	adds	r3, #1
 800067c:	4a20      	ldr	r2, [pc, #128]	; (8000700 <RTOS_threadSwitch+0x90>)
 800067e:	6013      	str	r3, [r2, #0]
	while(RTOS_readyList[currentTopPriority].numListItems == 0)
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <RTOS_threadSwitch+0x90>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a1f      	ldr	r2, [pc, #124]	; (8000704 <RTOS_threadSwitch+0x94>)
 8000686:	011b      	lsls	r3, r3, #4
 8000688:	4413      	add	r3, r2
 800068a:	330c      	adds	r3, #12
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d0f1      	beq.n	8000676 <RTOS_threadSwitch+0x6>
	}

	/* Get the next thread in the list */
	RTOS_readyList[currentTopPriority].pIndex = RTOS_readyList[currentTopPriority].pIndex->pNext;
 8000692:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <RTOS_threadSwitch+0x90>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a1a      	ldr	r2, [pc, #104]	; (8000700 <RTOS_threadSwitch+0x90>)
 8000698:	6812      	ldr	r2, [r2, #0]
 800069a:	491a      	ldr	r1, [pc, #104]	; (8000704 <RTOS_threadSwitch+0x94>)
 800069c:	0112      	lsls	r2, r2, #4
 800069e:	440a      	add	r2, r1
 80006a0:	6812      	ldr	r2, [r2, #0]
 80006a2:	6812      	ldr	r2, [r2, #0]
 80006a4:	4917      	ldr	r1, [pc, #92]	; (8000704 <RTOS_threadSwitch+0x94>)
 80006a6:	011b      	lsls	r3, r3, #4
 80006a8:	440b      	add	r3, r1
 80006aa:	601a      	str	r2, [r3, #0]

	/* Check if the current index is the end item */
	if(RTOS_readyList[currentTopPriority].pIndex == (RTOS_listItem_t*) &RTOS_readyList[currentTopPriority].endItem)
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <RTOS_threadSwitch+0x90>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a14      	ldr	r2, [pc, #80]	; (8000704 <RTOS_threadSwitch+0x94>)
 80006b2:	011b      	lsls	r3, r3, #4
 80006b4:	4413      	add	r3, r2
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <RTOS_threadSwitch+0x90>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	011b      	lsls	r3, r3, #4
 80006be:	4911      	ldr	r1, [pc, #68]	; (8000704 <RTOS_threadSwitch+0x94>)
 80006c0:	440b      	add	r3, r1
 80006c2:	3304      	adds	r3, #4
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d10c      	bne.n	80006e2 <RTOS_threadSwitch+0x72>
	{
		/* Increment the index */
		RTOS_readyList[currentTopPriority].pIndex = RTOS_readyList[currentTopPriority].pIndex->pNext;
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <RTOS_threadSwitch+0x90>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a0c      	ldr	r2, [pc, #48]	; (8000700 <RTOS_threadSwitch+0x90>)
 80006ce:	6812      	ldr	r2, [r2, #0]
 80006d0:	490c      	ldr	r1, [pc, #48]	; (8000704 <RTOS_threadSwitch+0x94>)
 80006d2:	0112      	lsls	r2, r2, #4
 80006d4:	440a      	add	r2, r1
 80006d6:	6812      	ldr	r2, [r2, #0]
 80006d8:	6812      	ldr	r2, [r2, #0]
 80006da:	490a      	ldr	r1, [pc, #40]	; (8000704 <RTOS_threadSwitch+0x94>)
 80006dc:	011b      	lsls	r3, r3, #4
 80006de:	440b      	add	r3, r1
 80006e0:	601a      	str	r2, [r3, #0]
	}

	pCurrentlyRunningThread = RTOS_readyList[currentTopPriority].pIndex->pThread;
 80006e2:	4b07      	ldr	r3, [pc, #28]	; (8000700 <RTOS_threadSwitch+0x90>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4a07      	ldr	r2, [pc, #28]	; (8000704 <RTOS_threadSwitch+0x94>)
 80006e8:	011b      	lsls	r3, r3, #4
 80006ea:	4413      	add	r3, r2
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	4a05      	ldr	r2, [pc, #20]	; (8000708 <RTOS_threadSwitch+0x98>)
 80006f2:	6013      	str	r3, [r2, #0]

}
 80006f4:	bf00      	nop
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000000 	.word	0x20000000
 8000704:	2000204c 	.word	0x2000204c
 8000708:	20002048 	.word	0x20002048

0800070c <RTOS_threadDelay>:
 *  systicks -> Number of system ticks to be delayed
 * Return:
 * 	None
 */
void RTOS_threadDelay(uint32_t systicks)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	/* Remove the current thread from ready list */
	RTOS_listRemove(&pCurrentlyRunningThread->listItem);
 8000714:	4b0d      	ldr	r3, [pc, #52]	; (800074c <RTOS_threadDelay+0x40>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	3308      	adds	r3, #8
 800071a:	4618      	mov	r0, r3
 800071c:	f7ff fe9c 	bl	8000458 <RTOS_listRemove>

	/* Set the delay amount */
	pCurrentlyRunningThread->delay_systicks = systicks;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <RTOS_threadDelay+0x40>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	61da      	str	r2, [r3, #28]

	/* Add the thread to the delayed list */
	RTOS_listAppend(&RTOS_delayList, &pCurrentlyRunningThread->listItem);
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <RTOS_threadDelay+0x40>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	3308      	adds	r3, #8
 800072e:	4619      	mov	r1, r3
 8000730:	4807      	ldr	r0, [pc, #28]	; (8000750 <RTOS_threadDelay+0x44>)
 8000732:	f7ff fe60 	bl	80003f6 <RTOS_listAppend>

	/* Invoke a pendSV exception */
    SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8000736:	4a07      	ldr	r2, [pc, #28]	; (8000754 <RTOS_threadDelay+0x48>)
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <RTOS_threadDelay+0x48>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6053      	str	r3, [r2, #4]
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20002048 	.word	0x20002048
 8000750:	2000214c 	.word	0x2000214c
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <RTOS_threadUnblock>:
 *  None
 * Return:
 * 	None
 */
void RTOS_threadUnblock(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
	/* Check for delayed threads */
	int i;
	RTOS_listItem_t* pCurrentItem = RTOS_delayList.pIndex;
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <RTOS_threadUnblock+0x88>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < RTOS_delayList.numListItems + 1; i++)
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	e02f      	b.n	80007ca <RTOS_threadUnblock+0x72>
	{
		if(pCurrentItem != (RTOS_listItem_t*) &RTOS_delayList.endItem)
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	4a1d      	ldr	r2, [pc, #116]	; (80007e4 <RTOS_threadUnblock+0x8c>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d025      	beq.n	80007be <RTOS_threadUnblock+0x66>
		{
			RTOS_thread_t* pCurrentThread = pCurrentItem->pThread;
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	68db      	ldr	r3, [r3, #12]
 8000776:	607b      	str	r3, [r7, #4]
			if(pCurrentThread->delay_systicks > 0)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	69db      	ldr	r3, [r3, #28]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d005      	beq.n	800078c <RTOS_threadUnblock+0x34>
			{
				pCurrentThread->delay_systicks--;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	61da      	str	r2, [r3, #28]
 800078a:	e018      	b.n	80007be <RTOS_threadUnblock+0x66>
			}
			else
			{
				/* Remove the current thread from delay list */
				RTOS_listRemove(pCurrentItem);
 800078c:	68b8      	ldr	r0, [r7, #8]
 800078e:	f7ff fe63 	bl	8000458 <RTOS_listRemove>

				/* Clear the delay amount */
				pCurrentThread->delay_systicks = 0;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]

				/* Check if the thread has a new highest priority */
				if(pCurrentThread->priority < currentTopPriority)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	685a      	ldr	r2, [r3, #4]
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <RTOS_threadUnblock+0x90>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d203      	bcs.n	80007ac <RTOS_threadUnblock+0x54>
				{
					currentTopPriority = pCurrentThread->priority;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	4a0f      	ldr	r2, [pc, #60]	; (80007e8 <RTOS_threadUnblock+0x90>)
 80007aa:	6013      	str	r3, [r2, #0]
				{

				}

				/* Add the thread to the ready list */
				RTOS_listAppend(&RTOS_readyList[pCurrentThread->priority], pCurrentItem);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	011b      	lsls	r3, r3, #4
 80007b2:	4a0e      	ldr	r2, [pc, #56]	; (80007ec <RTOS_threadUnblock+0x94>)
 80007b4:	4413      	add	r3, r2
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fe1c 	bl	80003f6 <RTOS_listAppend>
			}
		}
		pCurrentItem = pCurrentItem->pNext;
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < RTOS_delayList.numListItems + 1; i++)
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	3301      	adds	r3, #1
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <RTOS_threadUnblock+0x88>)
 80007cc:	68db      	ldr	r3, [r3, #12]
 80007ce:	1c5a      	adds	r2, r3, #1
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d8c9      	bhi.n	800076a <RTOS_threadUnblock+0x12>
	}
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	2000214c 	.word	0x2000214c
 80007e4:	20002150 	.word	0x20002150
 80007e8:	20000000 	.word	0x20000000
 80007ec:	2000204c 	.word	0x2000204c

080007f0 <main>:

RTOS_FIFO_t FIFO;
RTOS_listItem_t listItem[4];

int main(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
	RTOS_FIFOInit(&FIFO);
 80007f6:	4814      	ldr	r0, [pc, #80]	; (8000848 <main+0x58>)
 80007f8:	f7ff fd63 	bl	80002c2 <RTOS_FIFOInit>
	RTOS_FIFOAppend(&FIFO, &listItem[0]);
 80007fc:	4913      	ldr	r1, [pc, #76]	; (800084c <main+0x5c>)
 80007fe:	4812      	ldr	r0, [pc, #72]	; (8000848 <main+0x58>)
 8000800:	f7ff fd85 	bl	800030e <RTOS_FIFOAppend>
	RTOS_FIFOAppend(&FIFO, &listItem[2]);
 8000804:	4912      	ldr	r1, [pc, #72]	; (8000850 <main+0x60>)
 8000806:	4810      	ldr	r0, [pc, #64]	; (8000848 <main+0x58>)
 8000808:	f7ff fd81 	bl	800030e <RTOS_FIFOAppend>
	RTOS_listItem_t* pListItem = RTOS_FIFORemove(&FIFO);
 800080c:	480e      	ldr	r0, [pc, #56]	; (8000848 <main+0x58>)
 800080e:	f7ff fdaf 	bl	8000370 <RTOS_FIFORemove>
 8000812:	6078      	str	r0, [r7, #4]
	pListItem = RTOS_FIFORemove(&FIFO);
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <main+0x58>)
 8000816:	f7ff fdab 	bl	8000370 <RTOS_FIFORemove>
 800081a:	6078      	str	r0, [r7, #4]
	RTOS_FIFOAppend(&FIFO, &listItem[0]);
 800081c:	490b      	ldr	r1, [pc, #44]	; (800084c <main+0x5c>)
 800081e:	480a      	ldr	r0, [pc, #40]	; (8000848 <main+0x58>)
 8000820:	f7ff fd75 	bl	800030e <RTOS_FIFOAppend>
	RTOS_FIFOAppend(&FIFO, &listItem[1]);
 8000824:	490b      	ldr	r1, [pc, #44]	; (8000854 <main+0x64>)
 8000826:	4808      	ldr	r0, [pc, #32]	; (8000848 <main+0x58>)
 8000828:	f7ff fd71 	bl	800030e <RTOS_FIFOAppend>
	RTOS_FIFOAppend(&FIFO, &listItem[2]);
 800082c:	4908      	ldr	r1, [pc, #32]	; (8000850 <main+0x60>)
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <main+0x58>)
 8000830:	f7ff fd6d 	bl	800030e <RTOS_FIFOAppend>
	RTOS_FIFOAppend(&FIFO, &listItem[3]);
 8000834:	4908      	ldr	r1, [pc, #32]	; (8000858 <main+0x68>)
 8000836:	4804      	ldr	r0, [pc, #16]	; (8000848 <main+0x58>)
 8000838:	f7ff fd69 	bl	800030e <RTOS_FIFOAppend>
	pListItem = RTOS_FIFORemove(&FIFO);
 800083c:	4802      	ldr	r0, [pc, #8]	; (8000848 <main+0x58>)
 800083e:	f7ff fd97 	bl	8000370 <RTOS_FIFORemove>
 8000842:	6078      	str	r0, [r7, #4]

	while(1);
 8000844:	e7fe      	b.n	8000844 <main+0x54>
 8000846:	bf00      	nop
 8000848:	200021a8 	.word	0x200021a8
 800084c:	20002168 	.word	0x20002168
 8000850:	20002188 	.word	0x20002188
 8000854:	20002178 	.word	0x20002178
 8000858:	20002198 	.word	0x20002198

0800085c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800085c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000894 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000860:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000862:	e003      	b.n	800086c <LoopCopyDataInit>

08000864 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000864:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000866:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000868:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800086a:	3104      	adds	r1, #4

0800086c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800086c:	480b      	ldr	r0, [pc, #44]	; (800089c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000870:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000872:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000874:	d3f6      	bcc.n	8000864 <CopyDataInit>
  ldr  r2, =_sbss
 8000876:	4a0b      	ldr	r2, [pc, #44]	; (80008a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000878:	e002      	b.n	8000880 <LoopFillZerobss>

0800087a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800087a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800087c:	f842 3b04 	str.w	r3, [r2], #4

08000880 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000882:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000884:	d3f9      	bcc.n	800087a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000886:	f000 f82d 	bl	80008e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088a:	f000 f8dd 	bl	8000a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800088e:	f7ff ffaf 	bl	80007f0 <main>
  bx  lr    
 8000892:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000894:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000898:	08000ab0 	.word	0x08000ab0
  ldr  r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008a0:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80008a4:	20000008 	.word	0x20000008
  ldr  r3, = _ebss
 80008a8:	200021bc 	.word	0x200021bc

080008ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC_IRQHandler>

080008ae <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80008ae:	b480      	push	{r7}
 80008b0:	af00      	add	r7, sp, #0
}
 80008b2:	bf00      	nop
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <HardFault_Handler+0x4>

080008c2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <MemManage_Handler+0x4>

080008c8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <BusFault_Handler+0x4>

080008ce <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <UsageFault_Handler+0x4>

080008d4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
	...

080008e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e8:	4a16      	ldr	r2, [pc, #88]	; (8000944 <SystemInit+0x60>)
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <SystemInit+0x60>)
 80008ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80008f8:	4a13      	ldr	r2, [pc, #76]	; (8000948 <SystemInit+0x64>)
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <SystemInit+0x64>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <SystemInit+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800090a:	4a0f      	ldr	r2, [pc, #60]	; (8000948 <SystemInit+0x64>)
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <SystemInit+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000918:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <SystemInit+0x64>)
 800091c:	4a0b      	ldr	r2, [pc, #44]	; (800094c <SystemInit+0x68>)
 800091e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000920:	4a09      	ldr	r2, [pc, #36]	; (8000948 <SystemInit+0x64>)
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <SystemInit+0x64>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800092a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <SystemInit+0x64>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000932:	f000 f80d 	bl	8000950 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000936:	4b03      	ldr	r3, [pc, #12]	; (8000944 <SystemInit+0x60>)
 8000938:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800093c:	609a      	str	r2, [r3, #8]
#endif
}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	e000ed00 	.word	0xe000ed00
 8000948:	40023800 	.word	0x40023800
 800094c:	24003010 	.word	0x24003010

08000950 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800095e:	4a36      	ldr	r2, [pc, #216]	; (8000a38 <SetSysClock+0xe8>)
 8000960:	4b35      	ldr	r3, [pc, #212]	; (8000a38 <SetSysClock+0xe8>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000968:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800096a:	4b33      	ldr	r3, [pc, #204]	; (8000a38 <SetSysClock+0xe8>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000972:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3301      	adds	r3, #1
 8000978:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d103      	bne.n	8000988 <SetSysClock+0x38>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000986:	d1f0      	bne.n	800096a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000988:	4b2b      	ldr	r3, [pc, #172]	; (8000a38 <SetSysClock+0xe8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000994:	2301      	movs	r3, #1
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	e001      	b.n	800099e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800099a:	2300      	movs	r3, #0
 800099c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d142      	bne.n	8000a2a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80009a4:	4a24      	ldr	r2, [pc, #144]	; (8000a38 <SetSysClock+0xe8>)
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <SetSysClock+0xe8>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ae:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80009b0:	4a22      	ldr	r2, [pc, #136]	; (8000a3c <SetSysClock+0xec>)
 80009b2:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <SetSysClock+0xec>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ba:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80009bc:	4a1e      	ldr	r2, [pc, #120]	; (8000a38 <SetSysClock+0xe8>)
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <SetSysClock+0xe8>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	6093      	str	r3, [r2, #8]

#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80009c4:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <SetSysClock+0xe8>)
 80009c6:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <SetSysClock+0xe8>)
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ce:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <SetSysClock+0xe8>)
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <SetSysClock+0xe8>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80009da:	6093      	str	r3, [r2, #8]
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
#endif /* STM32F401xx */
   
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80009dc:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <SetSysClock+0xe8>)
 80009de:	4a18      	ldr	r2, [pc, #96]	; (8000a40 <SetSysClock+0xf0>)
 80009e0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <SetSysClock+0xe8>)
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <SetSysClock+0xe8>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80009ec:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80009ee:	bf00      	nop
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <SetSysClock+0xe8>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d0f9      	beq.n	80009f0 <SetSysClock+0xa0>
    {
    }
   
#if defined (STM32F40_41xxx) || defined (STM32F42_43xxx)      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <SetSysClock+0xf4>)
 80009fe:	f240 7205 	movw	r2, #1797	; 0x705
 8000a02:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000a04:	4a0c      	ldr	r2, [pc, #48]	; (8000a38 <SetSysClock+0xe8>)
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <SetSysClock+0xe8>)
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	f023 0303 	bic.w	r3, r3, #3
 8000a0e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000a10:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <SetSysClock+0xe8>)
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <SetSysClock+0xe8>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	f043 0302 	orr.w	r3, r3, #2
 8000a1a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8000a1c:	bf00      	nop
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <SetSysClock+0xe8>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	f003 030c 	and.w	r3, r3, #12
 8000a26:	2b08      	cmp	r3, #8
 8000a28:	d1f9      	bne.n	8000a1e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40007000 	.word	0x40007000
 8000a40:	07405a19 	.word	0x07405a19
 8000a44:	40023c00 	.word	0x40023c00

08000a48 <__libc_init_array>:
 8000a48:	b570      	push	{r4, r5, r6, lr}
 8000a4a:	4e0d      	ldr	r6, [pc, #52]	; (8000a80 <__libc_init_array+0x38>)
 8000a4c:	4c0d      	ldr	r4, [pc, #52]	; (8000a84 <__libc_init_array+0x3c>)
 8000a4e:	1ba4      	subs	r4, r4, r6
 8000a50:	10a4      	asrs	r4, r4, #2
 8000a52:	2500      	movs	r5, #0
 8000a54:	42a5      	cmp	r5, r4
 8000a56:	d109      	bne.n	8000a6c <__libc_init_array+0x24>
 8000a58:	4e0b      	ldr	r6, [pc, #44]	; (8000a88 <__libc_init_array+0x40>)
 8000a5a:	4c0c      	ldr	r4, [pc, #48]	; (8000a8c <__libc_init_array+0x44>)
 8000a5c:	f000 f818 	bl	8000a90 <_init>
 8000a60:	1ba4      	subs	r4, r4, r6
 8000a62:	10a4      	asrs	r4, r4, #2
 8000a64:	2500      	movs	r5, #0
 8000a66:	42a5      	cmp	r5, r4
 8000a68:	d105      	bne.n	8000a76 <__libc_init_array+0x2e>
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
 8000a6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a70:	4798      	blx	r3
 8000a72:	3501      	adds	r5, #1
 8000a74:	e7ee      	b.n	8000a54 <__libc_init_array+0xc>
 8000a76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a7a:	4798      	blx	r3
 8000a7c:	3501      	adds	r5, #1
 8000a7e:	e7f2      	b.n	8000a66 <__libc_init_array+0x1e>
 8000a80:	08000aa8 	.word	0x08000aa8
 8000a84:	08000aa8 	.word	0x08000aa8
 8000a88:	08000aa8 	.word	0x08000aa8
 8000a8c:	08000aac 	.word	0x08000aac

08000a90 <_init>:
 8000a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a92:	bf00      	nop
 8000a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a96:	bc08      	pop	{r3}
 8000a98:	469e      	mov	lr, r3
 8000a9a:	4770      	bx	lr

08000a9c <_fini>:
 8000a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a9e:	bf00      	nop
 8000aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aa2:	bc08      	pop	{r3}
 8000aa4:	469e      	mov	lr, r3
 8000aa6:	4770      	bx	lr
